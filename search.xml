<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基于 Vue3、Typescript、Vite3、Element-plus 构建通用后台</title>
    <url>/admin_template/</url>
    <content><![CDATA[<blockquote>
<p>忙里偷闲，凑空用 vite3 + vue3 + element-plus + ts 撸个后台模板。</p>
</blockquote>
<p>项目地址 ~&gt; <a href="//github.com/ChenyCHENYU/Robot-Admin">Github</a>， <a href="//gitee.com/ycyplus163/robot-admin">Gitee</a>， <a href="//www.tzagileteam.com/">文档</a></p>
<span id="more"></span>

<p align="center" >
    <img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/img/robot-left.png"  loading="lazy"/>
</p>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>Robot Admin</strong> 是一个使用 <code>vite</code> + <code>vue3</code> + <code>pinia</code> + <code>element-plus</code> + <code>typescript</code> 完整技术路线开发的项目，秒级开发更新启动、新的<code>vue3 composition api</code> 结合 <code>script setup</code>语法糖纵享丝滑般的开发体验、全新的 <code>pinia</code>状态管理器和优秀的设计体验（<code>1k</code>的 size）、<code>element+</code>无障碍过渡使用 UI 组件库 <code>element-plus</code>、安全高效的 <code>typescript</code>类型支持、代码规范验证、多级别的权限管理，提供开箱即用轻量级的中后台解决方案，希望通过聚焦业务场景，结合有限的 <code>ElementPlus</code> ui 框架，将基础组件封装成通用的业务组件，把通用的功能通过配置生成，可以尽量少的去写一些代码，更聚焦和关注实际的业务逻辑实现。</p>
<h2 id="推荐的-IDE-和配置"><a href="#推荐的-IDE-和配置" class="headerlink" title="推荐的 IDE 和配置"></a>推荐的 IDE 和配置</h2><ul>
<li><a href="https://code.visualstudio.com/">VSCode</a> 后续我会把插件配置集成在项目代码中，便于大家直接下载使用。</li>
</ul>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>🔥 <strong>最新技术栈</strong>：使用 <strong>vue3</strong>、<strong>vite3</strong>、<strong>pinia</strong> 等前端前沿技术开发</li>
<li>✨ <strong>业务组件</strong> 二次封装了多个常用的组件</li>
<li>🍍 <strong>状态管理器</strong>：<code>vue3</code>新秀 <strong>Pinia</strong>，犹如 <code>react zustand</code>般的体验，友好的 api 和异步处理，官方推荐下一代的 <code>VueX</code></li>
<li>🏆 <strong>开发语言</strong>：拥抱 <strong>TypeScript</strong>，为团队协作更好的去赋能</li>
<li>🎉 <strong>UI 组件</strong>：<code>element-plus</code>开发者无障碍过渡使用 <strong>element-plus</strong>，熟悉的配方熟悉的味道，当然，还有些许的情怀</li>
<li>🎨 <strong>css 样式</strong>：<strong>scss</strong> 、<code>postcss</code></li>
<li>📖 <strong>代码规范</strong>：<strong>Eslint</strong>、<strong>Prettier</strong>、<strong>Commitlint</strong></li>
<li>🔒 <strong>权限管理</strong>：页面级、菜单级、按钮级、接口级</li>
<li>✊ <strong>依赖按需加载</strong>：<strong>unplugin-auto-import</strong>，可自动导入使用到的<code>vue</code>、<code>vue-router</code>、<code>pinia</code>等依赖</li>
<li>💪 <strong>组件按需导入</strong>：<strong>unplugin-vue-components</strong>，无论是第三方 UI 组件还是自定义组件都可实现自动按需导入以及<code>TS</code>语法提示</li>
<li>🌟 <strong>面向业务场景的组件封装</strong> ：我觉得这是比较棒的一个点，更方便的大家低代码的使用，这一块会持续完善拓展，当然，如果有幸，可以 x 吸引您可以加入进来一起玩，那就更棒了</li>
</ul>
<h2 id="前期准备和需要具备的能力"><a href="#前期准备和需要具备的能力" class="headerlink" title="前期准备和需要具备的能力"></a>前期准备和需要具备的能力</h2><ul>
<li><a href="http://nodejs.org/">Node</a> 和 <a href="https://git-scm.com/">git</a> -项目开发环境</li>
<li><a href="https://vitejs.dev/">Vite</a> - 熟悉 <code>vite</code> 特性</li>
<li><a href="https://v3.vuejs.org/">Vue3</a> - 熟悉 <code>Vue</code> 基础语法</li>
<li><a href="https://www.typescriptlang.org/">TypeScript</a> - 熟悉<code>TypeScript</code>基本语法</li>
<li><a href="http://es6.ruanyifeng.com/">Es6+</a> - 熟悉 <code>es6</code> 基本语法</li>
<li><a href="https://next.router.vuejs.org/">Vue-Router-Next</a> - 熟悉 vue-router 基本使用</li>
<li><a href="https://pinia.vuejs.org/">Pinia</a> - 熟悉 <code>Pinia</code> 基本使用</li>
<li><a href="https://element-plus.org/">Element-Plus</a> - <code>ui</code> 框架的基本使用</li>
<li><a href="https://github.com/nuysoft/Mock">Mock.js</a> - <code>mockjs</code> 基本语法</li>
</ul>
<h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vue3_vite3_elementPlus_admin</span><br><span class="line">├─ .<span class="property">cz</span>-config.<span class="property">js</span></span><br><span class="line">├─ .<span class="property">env</span></span><br><span class="line">├─ .<span class="property">env</span>.<span class="property">development</span></span><br><span class="line">├─ .<span class="property">env</span>.<span class="property">production</span></span><br><span class="line">├─ .<span class="property">eslintrc</span>-auto-<span class="keyword">import</span>.<span class="property">json</span></span><br><span class="line">├─ .<span class="property">eslintrc</span>.<span class="property">cjs</span></span><br><span class="line">├─ .<span class="property">git</span></span><br><span class="line">│  ├─ <span class="variable constant_">COMMIT_EDITMSG</span></span><br><span class="line">│  ├─ config</span><br><span class="line">│  ├─ description</span><br><span class="line">│  ├─ <span class="variable constant_">FETCH_HEAD</span></span><br><span class="line">│  ├─ <span class="variable constant_">HEAD</span></span><br><span class="line">│  ├─ hooks</span><br><span class="line">│  │  ├─ applypatch-msg.<span class="property">sample</span></span><br><span class="line">│  │  ├─ commit-msg.<span class="property">sample</span></span><br><span class="line">│  │  ├─ fsmonitor-watchman.<span class="property">sample</span></span><br><span class="line">│  │  ├─ post-update.<span class="property">sample</span></span><br><span class="line">│  │  ├─ pre-applypatch.<span class="property">sample</span></span><br><span class="line">│  │  ├─ pre-commit.<span class="property">sample</span></span><br><span class="line">│  │  ├─ pre-merge-commit.<span class="property">sample</span></span><br><span class="line">│  │  ├─ pre-push.<span class="property">sample</span></span><br><span class="line">│  │  ├─ pre-rebase.<span class="property">sample</span></span><br><span class="line">│  │  ├─ pre-receive.<span class="property">sample</span></span><br><span class="line">│  │  ├─ prepare-commit-msg.<span class="property">sample</span></span><br><span class="line">│  │  ├─ push-to-checkout.<span class="property">sample</span></span><br><span class="line">│  │  └─ update.<span class="property">sample</span></span><br><span class="line">├─ .<span class="property">gitignore</span></span><br><span class="line">├─ .<span class="property">husky</span></span><br><span class="line">│  ├─ commit-msg</span><br><span class="line">│  ├─ pre-commit</span><br><span class="line">│  └─ _</span><br><span class="line">│     ├─ .<span class="property">gitignore</span></span><br><span class="line">│     └─ husky.<span class="property">sh</span></span><br><span class="line">├─ commitlint.<span class="property">config</span>.<span class="property">js</span></span><br><span class="line">├─ components.<span class="property">d</span>.<span class="property">ts</span></span><br><span class="line">├─ index.<span class="property">html</span></span><br><span class="line">├─ <span class="variable constant_">LICENSE</span></span><br><span class="line">├─ package.<span class="property">json</span></span><br><span class="line">├─ pnpm-lock.<span class="property">yaml</span></span><br><span class="line">├─ public                      <span class="comment">// 不被构建的资源文件</span></span><br><span class="line">├─ <span class="variable constant_">README</span>.<span class="property">md</span></span><br><span class="line">├─ src</span><br><span class="line">│  ├─ api                      <span class="comment">// 请求接口文件</span></span><br><span class="line">│  ├─ <span class="title class_">App</span>.<span class="property">vue</span></span><br><span class="line">│  ├─ assets                   <span class="comment">// 静态资源文件</span></span><br><span class="line">│  ├─ auto-imports.<span class="property">d</span>.<span class="property">ts</span></span><br><span class="line">│  ├─ axios</span><br><span class="line">│  ├─ components</span><br><span class="line">│  │  ├─ icons                 <span class="comment">// svgIcon</span></span><br><span class="line">│  │  ├─ lib                   <span class="comment">// 库</span></span><br><span class="line">│  ├─ components.<span class="property">d</span>.<span class="property">ts</span></span><br><span class="line">│  ├─ constant                 <span class="comment">// 全局常量</span></span><br><span class="line">│  ├─ directives               <span class="comment">// 全局指令</span></span><br><span class="line">│  ├─ env.<span class="property">d</span>.<span class="property">ts</span></span><br><span class="line">│  ├─ hooks                    <span class="comment">// 全局钩子函数</span></span><br><span class="line">│  ├─ interface                <span class="comment">// 全局接口</span></span><br><span class="line">│  ├─ locales                  <span class="comment">// 中英文</span></span><br><span class="line">│  ├─ main.<span class="property">ts</span>                  <span class="comment">// 入口文件</span></span><br><span class="line">│  ├─ permission.<span class="property">ts</span>            <span class="comment">// 路由守卫</span></span><br><span class="line">│  ├─ router                   <span class="comment">// 路由文件</span></span><br><span class="line">│  ├─ store                    <span class="comment">// 状态管理 Pinia</span></span><br><span class="line">│  ├─ styles                   <span class="comment">// 全局样式</span></span><br><span class="line">│  ├─ types                    <span class="comment">// 全局类型申明</span></span><br><span class="line">│  │  └─ <span class="variable language_">global</span>.<span class="property">d</span>.<span class="property">ts</span></span><br><span class="line">│  ├─ utils                    <span class="comment">// 工具函数</span></span><br><span class="line">│  └─ views                    <span class="comment">// 视图文件</span></span><br><span class="line">├─ tsconfig.<span class="property">config</span>.<span class="property">json</span></span><br><span class="line">├─ tsconfig.<span class="property">json</span>               <span class="comment">// ts 配置文件</span></span><br><span class="line">├─ tsconfig.<span class="property">node</span>.<span class="property">json</span></span><br><span class="line">└─ vite.<span class="property">config</span>.<span class="property">ts</span>              <span class="comment">// vite 配置文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="项目预览图"><a href="#项目预览图" class="headerlink" title="项目预览图"></a>项目预览图</h2><p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/robot-adminlogin.png" alt="login" loading="lazy"></p>
<p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/robot-admintable.png" alt="table" loading="lazy"></p>
<p>更多界面请访问项目查看，目前请拉代码到本地查看功能，后续会集成部署到线上。</p>
<h2 id="已完成功能-The-functionality-is-complete"><a href="#已完成功能-The-functionality-is-complete" class="headerlink" title="已完成功能 | The functionality is complete"></a>已完成功能 | The functionality is complete</h2><ul>
<li><input checked="" disabled="" type="checkbox"> Element Plus</li>
<li><input checked="" disabled="" type="checkbox"> N+1 多级菜单</li>
<li><input checked="" disabled="" type="checkbox"> Dashboard</li>
<li><input checked="" disabled="" type="checkbox"> 表格</li>
<li><input checked="" disabled="" type="checkbox"> router Tab 选项卡</li>
<li><input checked="" disabled="" type="checkbox"> 表单</li>
<li><input checked="" disabled="" type="checkbox"> 图表 :antv or echart</li>
<li><input checked="" disabled="" type="checkbox"> 导入导出 Excel</li>
<li><input checked="" disabled="" type="checkbox"> 导出 Zip 文件</li>
<li><input checked="" disabled="" type="checkbox"> 拖拽组件</li>
<li><input checked="" disabled="" type="checkbox"> 富文本编辑器</li>
<li><input checked="" disabled="" type="checkbox"> markdown 编辑器</li>
<li><input checked="" disabled="" type="checkbox"> code JSON 编辑器</li>
<li><input checked="" disabled="" type="checkbox"> 个人页</li>
<li><input checked="" disabled="" type="checkbox"> 登录/注册页</li>
<li><input checked="" disabled="" type="checkbox"> 404 / 403 / 401</li>
<li><input checked="" disabled="" type="checkbox"> 菜单管理</li>
<li><input checked="" disabled="" type="checkbox"> 角色管理</li>
<li><input checked="" disabled="" type="checkbox"> 自定义图标</li>
<li><input checked="" disabled="" type="checkbox"> 拖拽组件</li>
<li><input checked="" disabled="" type="checkbox"> 支持切换主题色:一键换肤</li>
<li><input checked="" disabled="" type="checkbox"> 自定义指令</li>
<li><input checked="" disabled="" type="checkbox"> 国际化</li>
<li><input checked="" disabled="" type="checkbox"> 项目看板</li>
</ul>
<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><ul>
<li><input disabled="" type="checkbox"> 完善主题功能集成</li>
<li><input disabled="" type="checkbox"> 考虑引入 <code>windicss</code></li>
<li><input disabled="" type="checkbox"> 集成 <code>nest</code> 服务</li>
<li><input disabled="" type="checkbox"> 完善环境配置 <code>.env.development</code>/<code>.env.production</code></li>
<li><input disabled="" type="checkbox"> 面向业务场景组件的持续扩展，文档同步更新</li>
<li><input disabled="" type="checkbox"> … 还有更多畅想 …</li>
</ul>
<h2 id="工程化-Project-Tool"><a href="#工程化-Project-Tool" class="headerlink" title="工程化 | Project Tool"></a>工程化 | Project Tool</h2><ul>
<li>Git Hook 工具：<a href="https://typicode.github.io/husky/#/">husky</a> + <a href="https://github.com/okonet/lint-staged">lint-staged</a></li>
<li>代码规范：<a href="https://prettier.io/">Prettier</a> + <a href="https://eslint.org/">ESLint</a></li>
<li>提交规范：<a href="http://commitizen.github.io/cz-cli/">Commitizen</a> + <a href="https://commitlint.js.org/#/">Commitlint</a></li>
<li>包管理器：<a href="https://github.com/pnpm/pnpm">pnpm</a></li>
</ul>
<h2 id="安装使用-快速启动"><a href="#安装使用-快速启动" class="headerlink" title="安装使用 | 快速启动"></a>安装使用 | 快速启动</h2><p>:bell: 推荐使用 pnpm 进行依赖管理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆项目</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ChenyCHENYU/Robot-Admin.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入项目</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> Robot Admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖 (建议 pnpm )</span></span><br><span class="line"></span><br><span class="line">pnpm install | pnpm i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line"></span><br><span class="line">pnpm dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包构建</span></span><br><span class="line"></span><br><span class="line">pnpm build</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="git-提交-git-commit"><a href="#git-提交-git-commit" class="headerlink" title="git 提交 | git commit"></a>git 提交 | git commit</h2><pre><code> git add *  // add everything

 git status  // check status

 git cz  // commit change

 git push // push stage commit

// 如果cz 命令无法找到，全局安全commitize
 npm install -g commitizen</code></pre><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><p>后续完善…</p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p>线上地址后续部署发布，目前查看功能请拉取代码到本地</p>
<ul>
<li><a href="https://www.tzagileteam.com">Robot Admin</a> - 项目文档</li>
</ul>
<h2 id="🤝-如何贡献-Contributing"><a href="#🤝-如何贡献-Contributing" class="headerlink" title="🤝 如何贡献 | Contributing"></a>🤝 如何贡献 | Contributing</h2><p>期待优秀的您加入，或者获取到您宝贵的建议和经验，</p>
<p><strong>Pull Request:</strong></p>
<ol>
<li>Fork 代码!</li>
<li>创建自己的分支: <code>git checkout -b feat/xxxx</code></li>
<li>提交你的修改: <code>git commit -am &#39;feat(function): add xxxxx&#39;</code></li>
<li>推送您的分支: <code>git push origin feat/xxxx</code></li>
<li>提交<code>pull request</code></li>
</ol>
<h2 id="Git-贡献提交规范"><a href="#Git-贡献提交规范" class="headerlink" title="Git 贡献提交规范"></a>Git 贡献提交规范</h2><ul>
<li><p>参考 <a href="https://github.com/vuejs/vue/blob/dev/.github/COMMIT_CONVENTION.md">vue</a> 规范 (<a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-angular">Angular</a>)</p>
<ul>
<li><code>wip</code> 开发中</li>
<li><code>feat</code> 增加新功能</li>
<li><code>fix</code> 修复问题/BUG</li>
<li><code>style</code> 代码风格相关无影响运行结果的</li>
<li><code>perf</code> 优化/性能提升</li>
<li><code>refactor</code> 重构</li>
<li><code>revert</code> 撤销修改</li>
<li><code>test</code> 测试相关</li>
<li><code>docs</code> 文档/注释</li>
<li><code>chore</code> 依赖更新/脚手架配置修改等</li>
<li><code>workflow</code> 工作流改进</li>
<li><code>ci</code> 持续集成</li>
<li><code>types</code> 类型定义文件更改</li>
</ul>
</li>
</ul>
<h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><p>推荐使用<code>webkit</code>内核浏览器</p>
<p>支持现代浏览器, 不支持 IE</p>
<table>
<thead>
<tr>
<th align="center"><a href="http://godban.github.io/browsers-support-badges/"><img src="https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_48x48.png" alt=" Edge" width="24px" height="24px"  loading="lazy"/></a></br>IE</th>
<th align="center"><a href="http://godban.github.io/browsers-support-badges/"><img src="https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_48x48.png" alt=" Edge" width="24px" height="24px"  loading="lazy"/></a></br>Edge</th>
<th align="center"><a href="http://godban.github.io/browsers-support-badges/"><img src="https://raw.githubusercontent.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png" alt="Firefox" width="24px" height="24px"  loading="lazy"/></a></br>Firefox</th>
<th align="center"><a href="http://godban.github.io/browsers-support-badges/"><img src="https://raw.githubusercontent.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png" alt="Chrome" width="24px" height="24px"  loading="lazy"/></a></br>Chrome</th>
<th align="center"><a href="http://godban.github.io/browsers-support-badges/"><img src="https://raw.githubusercontent.com/alrra/browser-logos/master/src/safari/safari_48x48.png" alt="Safari" width="24px" height="24px"  loading="lazy"/></a></br>Safari</th>
</tr>
</thead>
<tbody><tr>
<td align="center">not support</td>
<td align="center">last 2 versions</td>
<td align="center">last 2 versions</td>
<td align="center">last 2 versions</td>
<td align="center">last 2 versions</td>
</tr>
</tbody></table>
<h3 id="❓-问题-Issue"><a href="#❓-问题-Issue" class="headerlink" title="❓ 问题 | Issue"></a>❓ 问题 | Issue</h3><p>Contributions, issues and feature requests are welcome!.<br><br />Feel free to check <a href="https://github.com/chenyCHENYU/Robot-Admin/issues">issues page</a>.</p>
<p>欢迎提 Issues</p>
<h2 id="架构中使用的相关仓库"><a href="#架构中使用的相关仓库" class="headerlink" title="架构中使用的相关仓库"></a>架构中使用的相关仓库</h2><p>如果这些插件你认为不错并对你有帮助，可以给相关作者一个 star 支持下</p>
<ul>
<li><a href="https://github.com/vbenjs/vite-plugin-vue-setup-extend">vite-plugin-vue-setup-extend</a> - 扩展 setup 语法糖</li>
<li><a href="https://github.com/antfu/unplugin-vue-components">unplugin-vue-components</a> - 自动按需引入组件，替代手动封装的方式，性能更好</li>
<li><a href="https://github.com/antfu/unplugin-icons">unplugin-icons</a> - 处理外部图标库图标的自动引入</li>
<li><a href="https://github.com/anncwb/vite-plugin-mock">vite-plugin-mock</a> - 用于本地及开发环境数据 mock</li>
<li><a href="https://github.com/anncwb/vite-plugin-html">vite-plugin-html</a> - 用于 html 模版转换及压缩</li>
<li><a href="https://github.com/anncwb/vite-plugin-theme">vite-plugin-theme</a> - 用于在线切换主题色等颜色相关配置</li>
<li><a href="https://github.com/anncwb/vite-plugin-imagemin">vite-plugin-imagemin</a> - 用于打包压缩图片资源</li>
<li><a href="https://github.com/anncwb/vite-plugin-compression">vite-plugin-compression</a> - 用于打包输出.gz|.brotil 文件</li>
<li><a href="https://github.com/anncwb/vite-plugin-svg-icons">vite-plugin-svg-icons</a> - 用于快速生成 svg 雪碧图</li>
</ul>
<p><strong>Robot Admin</strong> 是完全开源免费的项目，项目还在持续完善中，如果您觉得还不错，请 <strong>Star、Fork、Watch</strong> 一键三连 🎉🎉🎉，如果有好的想法和建议，欢迎您通过 <a href="https://mail.google.com/mail">ycyplus@gmail.com</a> 跟我取得联系。</p>
]]></content>
      <categories>
        <category>创作类</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vuex</tag>
        <tag>vue-route</tag>
        <tag>elemelt-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 devenv 实现自动化编译,生成测试文件</title>
    <url>/aotubuild/</url>
    <content><![CDATA[<p>想要实现自动化编译并生产打包替换文件，首要的对项目进行编译生成。一般编译 donnet 项目有三种方式 csc.exe，MSbuild(不需要安装vs)，devenv(需要安装vs)。因为自己已经安装了 vs 了，所以直接使用 devenv 去编译程序了。</p>
<span id="more"></span>

<p>大致流程如下</p>
<p><img src="/images/posts/aotubuild/20200102105829.png" alt="" loading="lazy"><em>流程图</em></p>
<h1 id="SVN-更新提交文件"><a href="#SVN-更新提交文件" class="headerlink" title="SVN 更新提交文件"></a>SVN 更新提交文件</h1><p>SVN 工具使用 TortoiseSVN，为了简化操这里直接使用 TortoiseProc.exe(TortoiseSVN的GUI程序) 所提供的命令行，对项目进行更新等操作。<br>使用 Demo </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TortoiseProc.exe /command:commit</span><br><span class="line">                 /path:&quot;c:\svn_wc\file1.txt*c:\svn_wc\file2.txt&quot;</span><br><span class="line">                 /logmsg:&quot;test log message&quot; /closeonend:2</span><br><span class="line"></span><br><span class="line">参数大概意思</span><br><span class="line"></span><br><span class="line">/closeonend:2 如果没发生错误和冲突则自动关闭对话框</span><br><span class="line">/command    执行的操作</span><br><span class="line">        :update 更新</span><br><span class="line">        :commit 提交</span><br><span class="line">/path   路径</span><br><span class="line">/logmsg 提交备注信息</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>具体的使用方式可以在 TortoiseSVN 提供帮助文档里去查看。</p>
<p><img src="/images/posts/aotubuild/20200102174220.png" alt="" loading="lazy"></p>
<h1 id="动态去修改程序版本和日期"><a href="#动态去修改程序版本和日期" class="headerlink" title="动态去修改程序版本和日期"></a>动态去修改程序版本和日期</h1><p>因为项目的日期和版本是写死在了程序里的，每次给测试生产替换文件时候都得去修改程序日期.大致思路是通过正则去修改文件。考虑到需要后面可能需要修改的地方较多，目前是通过 Json 去配置需要修改文件 和 对应正则 和 调用的方法(获取的值)。为了提供修改灵活性，目前是通过 CSharpCodeProvider 去编译 C# 文件，来方便随时修改获取新的值得规则。</p>
<p>大致流程如下<br><img src="/images/posts/aotubuild/20200102162138.png" alt="" loading="lazy"></p>
<p>json 配置文件如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;FilePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Test.cs&quot;</span><span class="punctuation">,</span><span class="comment">//路径</span></span><br><span class="line">    <span class="attr">&quot;Pattern&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.* string SerEdition .*&quot;</span><span class="punctuation">,</span><span class="comment">//正则规则</span></span><br><span class="line">    <span class="attr">&quot;FunctionName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GetEditDataTime&quot;</span><span class="punctuation">,</span> <span class="comment">//以及需要调用的方法</span></span><br><span class="line">    <span class="attr">&quot;Params&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span> <span class="comment">//参数</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>假如 Test.cs 文件需要修改内如下</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> SerVer = <span class="string">&quot;V7.6.0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> SerEdition = <span class="string">&quot;2019.12.25&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>新增一个 Units.cs(用于动态编译) 文件，生成操作改为内容，不参与编译。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Units.cs 文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DynamicRunCode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Units</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetEditDataTime</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;        public static string SerEdition = \&quot;&quot;</span> + DateTime.Now.ToString(<span class="string">&quot;yyyy.MM.dd&quot;</span>) + <span class="string">&quot;\&quot;;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可自己在这添加方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对 CSharpCodeProvider 进行简单封装，CSharpRunCode 类 主要是对 C# 字符串进行编译，和提供一个可以调用 C# 字符串中方法。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CSharpRunCode</span></span><br><span class="line">&#123;</span><br><span class="line">    CompilerResults cr;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 编译 C# Code 字符串</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;csharpStr&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>返回编译结果<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CSharpRunCode</span> (<span class="params"><span class="built_in">string</span> csharpStr</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CSharpCodeProvider cs = <span class="keyword">new</span> CSharpCodeProvider();</span><br><span class="line">        CompilerParameters cp = <span class="keyword">new</span> CompilerParameters</span><br><span class="line">        &#123;</span><br><span class="line">            GenerateInMemory = <span class="literal">true</span>,<span class="comment">//设定在内存中创建程序集</span></span><br><span class="line">            GenerateExecutable = <span class="literal">false</span><span class="comment">//设定是否创建可执行文件,也就是exe文件或者dll文件</span></span><br><span class="line">        &#125;;</span><br><span class="line">        cr = cs.CompileAssemblyFromSource(cp, csharpStr);</span><br><span class="line">        <span class="keyword">if</span> (cr.Errors.HasErrors)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (CompilerError item <span class="keyword">in</span> cr.Errors)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 调用方法</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;typeName&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;functionName&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;pars&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">RunFunctino</span>(<span class="params"><span class="built_in">string</span> typeName, <span class="built_in">string</span> functionName, <span class="keyword">params</span> <span class="built_in">object</span>[] pars</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Assembly ass = cr.CompiledAssembly;</span><br><span class="line">        <span class="built_in">object</span> obj = ass.CreateInstance(typeName);</span><br><span class="line">        MethodInfo mi = obj.GetType().GetMethod(functionName);</span><br><span class="line">        <span class="keyword">return</span> mi.Invoke(obj, pars);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方法</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//FunctionName 配置中函数名</span></span><br><span class="line"><span class="comment">//FilePath 文件路径</span></span><br><span class="line"><span class="comment">//Pattern 正则规则</span></span><br><span class="line"></span><br><span class="line">CSharpRunCode runCode = <span class="keyword">new</span> CSharpRunCode(File.ReadAllText(<span class="string">&quot;xxx\\Units.cs&quot;</span>));</span><br><span class="line"><span class="built_in">string</span> result = (<span class="built_in">string</span>)runCode.RunFunctino(<span class="string">&quot;DynamicRunCode.Units&quot;</span>, FunctionName);</span><br><span class="line"><span class="built_in">string</span> fileText = File.ReadAllText(FilePath);</span><br><span class="line">List&lt;<span class="built_in">string</span>&gt; fileTextArr = File.ReadAllLines(FilePath).ToList();</span><br><span class="line"><span class="keyword">var</span> matches = Regex.Matches(fileText, Pattern);</span><br><span class="line">File.WriteAllText(FilePath, Regex.Replace(fileText, Pattern, result));</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;Environment.NewLine&#125;</span>文件路径:【<span class="subst">&#123;FilePath&#125;</span>】&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;替换【<span class="subst">&#123;matches.Count&#125;</span>】处&quot;</span>);</span><br><span class="line">Console.ForegroundColor = ConsoleColor.Yellow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (Match match <span class="keyword">in</span> matches)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> rowNum = fileTextArr.FindIndex(t =&gt; t.Contains(match.Value.Trim()));</span><br><span class="line">    <span class="keyword">if</span> (rowNum&gt;<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fileTextArr[rowNum]=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;原值:【<span class="subst">&#123;match.Value.Replace(<span class="string">&quot;\r&quot;</span>, <span class="string">&quot;&quot;</span>)&#125;</span>】行号:【<span class="subst">&#123;rowNum + <span class="number">1</span>&#125;</span>】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.ForegroundColor = ConsoleColor.Green;</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;新值:【<span class="subst">&#123;result&#125;</span>】&quot;</span>);</span><br><span class="line">Console.ForegroundColor = ConsoleColor.White;</span><br></pre></td></tr></table></figure>

<p>执行结果<br><img src="/images/posts/aotubuild/20200102163249.png" alt="" loading="lazy"></p>
<h1 id="使用-devenv-进行编译"><a href="#使用-devenv-进行编译" class="headerlink" title="使用 devenv 进行编译"></a>使用 devenv 进行编译</h1><p>VS 安装的是 2017，devenv 正常路径应该是 [C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\Common7\IDE] 下，网上一堆动态查找 devenv 路径的方法.最后感觉通过注册表方式比较靠谱，<a href="https://www.cnblogs.com/lovecsharp094/p/8952327.html">参考这篇</a><br><img src="/images/posts/aotubuild/20200102152424.png" alt="" loading="lazy"></p>
<p>具体实现</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">DevenvOpt</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 是否安装VS</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsFindDevenv &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> devenv 路径</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> DevenvExePath &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> devenv 所在目录路径</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> DevenvDirPath &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 版本</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Version &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DevenvOpt</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> path = FindDevenv();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrWhiteSpace(path))</span><br><span class="line">        &#123;</span><br><span class="line">            IsFindDevenv = <span class="literal">true</span>;</span><br><span class="line">            DevenvExePath = path;</span><br><span class="line">            DevenvDirPath = path.Replace(<span class="string">&quot;devenv.exe&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">FindDevenv</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> registryPath = <span class="string">@&quot;SOFTWARE\Wow6432Node\Microsoft\VisualStudio\SxS\VS7&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> localMachineRegistry = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32);</span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; vsPaths = ReadRegistryInfo(localMachineRegistry, registryPath);</span><br><span class="line">        <span class="built_in">string</span> highestVSdevenvPath = <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">if</span> (vsPaths != <span class="literal">null</span> &amp;&amp; vsPaths.Any())</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> tempVersion = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; kvp <span class="keyword">in</span> vsPaths)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> devenvExePath = Path.Combine(kvp.Value, <span class="string">@&quot;Common7\IDE\devenv.exe&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (File.Exists(devenvExePath))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> currentVersion = Convert.ToInt32(kvp.Key.Split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">if</span> (currentVersion &gt; tempVersion)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Version = currentVersion;</span><br><span class="line">                        highestVSdevenvPath = devenvExePath;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> highestVSdevenvPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; <span class="title">ReadRegistryInfo</span>(<span class="params">RegistryKey registryKey, <span class="built_in">string</span> registryInfoPath</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span> || <span class="built_in">string</span>.IsNullOrEmpty(registryInfoPath)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            RegistryKey rsg = registryKey.OpenSubKey(registryInfoPath, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (rsg != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> keyNameArray = rsg?.GetValueNames();</span><br><span class="line">                <span class="keyword">var</span> result = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> name <span class="keyword">in</span> keyNameArray)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">string</span> keyValue = (<span class="built_in">string</span>)rsg.GetValue(name);</span><br><span class="line">                    result.Add(name, keyValue);</span><br><span class="line">                &#125;</span><br><span class="line">                rsg.Close();</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找到了路径后接下来就是，将路径写入环境变量(或者执行 devenv 先调转到目录)，调用 CMD 然后去执行 devenv 程序去编译项目操作了。<br>对调用 CMD 简单封装下</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">CMD</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> CmdPath = <span class="string">@&quot;cmd.exe&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 执行cmd命令 </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;cmd&quot;&gt;</span>执行的命令<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CMD_RES <span class="title">RunCmd</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">string</span>[] cmds</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            CMD_RES res = <span class="keyword">new</span> CMD_RES();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (Process p = <span class="keyword">new</span> Process())</span><br><span class="line">            &#123;</span><br><span class="line">                p.StartInfo.FileName = CmdPath;</span><br><span class="line">                p.StartInfo.UseShellExecute = <span class="literal">false</span>;        </span><br><span class="line">                p.StartInfo.RedirectStandardInput = <span class="literal">true</span>;   </span><br><span class="line">                p.StartInfo.RedirectStandardOutput = <span class="literal">true</span>;  </span><br><span class="line">                p.StartInfo.RedirectStandardError = <span class="literal">true</span>;   </span><br><span class="line">                p.StartInfo.CreateNoWindow = <span class="literal">true</span>;          </span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    p.Start();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//向cmd窗口写入命令</span></span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="built_in">string</span> cmd <span class="keyword">in</span> cmds) </span><br><span class="line">                        p.StandardInput.WriteLine(cmd);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//关闭写入流</span></span><br><span class="line">                    p.StandardInput.Close();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//获取cmd窗口的输出信息</span></span><br><span class="line">                    <span class="built_in">string</span> output = p.StandardOutput.ReadToEnd();</span><br><span class="line">                    <span class="built_in">string</span> error = p.StandardError.ReadToEnd();</span><br><span class="line">                    <span class="comment">//等待程序执行完退出进程</span></span><br><span class="line">                    p.WaitForExit();</span><br><span class="line">                    res.ToRes(output, error);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">catch</span> (System.Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    System.Console.WriteLine(e.Message);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span></span><br><span class="line">                &#123;</span><br><span class="line">                    p.Close();</span><br><span class="line">                    p.Dispose();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">CMD_RES</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 状态</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> State &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 输出信息</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Text &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 错误信息</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Error &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ToRes</span>(<span class="params"><span class="built_in">string</span> output, <span class="built_in">string</span> error</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            State = <span class="built_in">string</span>.IsNullOrWhiteSpace(error);</span><br><span class="line">            Text = output;</span><br><span class="line">            Error = error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>devenv 具体参数可以参考<a href="https://docs.microsoft.com/zh-CN/visualstudio/ide/reference/devenv-command-line-switches?view=vs-2017">微软官网文档</a><br>示例</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DevenvDirPath devenv 所在目录</span></span><br><span class="line">CMD_RES res = CMD.RunCmd(<span class="string">&quot;@echo off &quot;</span>, <span class="string">$&quot;<span class="subst">&#123;DevenvDirPath.Substring(<span class="number">0</span>,<span class="number">1</span>)&#125;</span>:&quot;</span>,<span class="string">$&quot;cd <span class="subst">&#123;DevenvDirPath&#125;</span>&quot;</span>,<span class="string">$&quot;devenv 项目路径  /rebuild Release&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>devenv 回输出，然后判断是否全部编译成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">成功x个        失败x个        跳过x个</span><br></pre></td></tr></table></figure>

<p>文件编译好之后，就是对文件的拷贝操作了这里就不描述了</p>
<p>效果如下<br><img src="/images/posts/aotubuild/20200102175312.png" alt="" loading="lazy"></p>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>devenv</tag>
      </tags>
  </entry>
  <entry>
    <title>了解前端脚手架</title>
    <url>/cli/</url>
    <content><![CDATA[<h2 id="了解什么是-脚手架（Cli）"><a href="#了解什么是-脚手架（Cli）" class="headerlink" title="了解什么是 脚手架（Cli）"></a>了解什么是 脚手架（Cli）</h2><blockquote>
<p>Bash 和 Shell 是什么？它们有什么用？</p>
</blockquote>
<ul>
<li>什么是 shell?</li>
</ul>
<p>shell 是计算机提供给用户与其他程序进行交互的接口。<br>shell 是一个命令解释器，当你输入命令后，由 shell 进行解释后交给操作系统内核（OS Kernel）进行处理。</p>
<ul>
<li>什么是 bash?</li>
</ul>
<p>简单的说：Bash 是一种程序，它的职责是用来进行人机交互。<br>Bash 和其他程序最大区别在于，它不是用来完成特定任务（如计算器、文件管理等），我们通常使用 bash shell 来执行程序。</p>
<ul>
<li>什么是 cli</li>
</ul>
<p>命令行界面（cli）是一种基于文本界面（类似：MacOS 终端、Windows cmd.exe），用于运行程序。<br>Cli 是 Bash 的运行环境，Cli 接收用户键盘输入，交给 Bash 执行，并将程序处理结果以文字形式进行显示。</p>
<p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/blog/20230322001437.png" alt="Cli 架构图" loading="lazy"></p>
<h3 id="从使用角度理解什么是脚手架？"><a href="#从使用角度理解什么是脚手架？" class="headerlink" title="从使用角度理解什么是脚手架？"></a>从使用角度理解什么是脚手架？</h3><ul>
<li>脚手架示栗</li>
</ul>
<p>脚手架本质是一个操作系统的客户端，它通过命令行执行，比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create vue-test-app</span><br></pre></td></tr></table></figure>

<p>上面这条命令由 3 个部分组成：</p>
<ul>
<li>主命令: <code>vue</code></li>
<li>command: <code>create</code></li>
<li>command 的 param: <code>vue-test-app</code></li>
</ul>
<p>它表示创建一个 vue 项目，项目的名称为 <code>vue-test-app</code>，以上是最一个较为简单的脚手架命令，但实际场景往往更加复杂，比如：</p>
<p>当前目录已经有文件了，我们需要覆盖当前目录下的文件，强制进行安装 <code>vue</code> 项目，此时我们就可以输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create vue-test-app --force</span><br></pre></td></tr></table></figure>

<p>这里的 <code>--force</code> 叫做 option，用来辅助脚手架确认在特定场景下用户的选择（可以理解为配置）。还有一种场景：</p>
<p>通过 <code>vue create</code> 创建项目时，会自动执行 <code>npm install</code> 帮用户安装依赖，如果我们希望使用淘宝源来安装，可以输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create vue-test-app --force -r https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>这里的 <code>-r</code> 也叫做 option，它与 <code>--force</code> 不同的是它使用 <code>-</code>，并且使用简写，这里的 <code>-r</code> 也可以替换成 <code>--registry</code>，有的同学可能要问，为什么老师知道这个命令，其实我们输入下面的命令就可以看到 <code>vue create</code> 支持的所有 options：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p><code>-r https://registry.npm.taobao.org</code> 后面的 <code>https://registry.npm.taobao.org</code> 成为 option 的 param，其实 <code>--force</code> 可以理解为：<code>--force true</code>，简写为：<code>--force</code> 或 <code>-f</code></p>
<h3 id="脚手架的执行原理"><a href="#脚手架的执行原理" class="headerlink" title="脚手架的执行原理"></a>脚手架的执行原理</h3><p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/blog/w2-c1-cli_work.png" alt="脚手架执行原理" loading="lazy"></p>
<p>脚手架的执行原理如下：</p>
<ul>
<li>在终端输入 <code>vue create vue-test-app</code></li>
<li>终端解析出 <code>vue</code> 命令</li>
<li>终端在环境变量中找到 <code>vue</code> 命令</li>
<li>终端根据 <code>vue</code> 命令链接到实际文件 <code>vue.js</code></li>
<li>终端利用 <code>node</code> 执行 <code>vue.js</code></li>
<li><code>vue.js</code> 解析 command / options</li>
<li><code>vue.js</code> 执行 command</li>
<li>执行完毕，退出执行</li>
</ul>
<h3 id="从应用的角度看如何开发一个脚手架"><a href="#从应用的角度看如何开发一个脚手架" class="headerlink" title="从应用的角度看如何开发一个脚手架"></a>从应用的角度看如何开发一个脚手架</h3><blockquote>
<p>这里以 <code>vue-cli</code> 为例</p>
</blockquote>
<ul>
<li>开发 <code>npm</code> 项目，该项目中应包含一个 <code>bin/vue.js</code> 文件，并将这个项目发布到 <code>npm</code></li>
<li>将 <code>npm</code> 项目安装到 <code>node</code> 的 <code>lib/node_modules</code></li>
<li>在 <code>node</code> 的 <code>bin</code> 目录下配置 <code>vue</code> 软链接指向 <code>lib/node_modules/@vue/cli/bin/vue.js</code></li>
</ul>
<p>这样我们在执行 <code>vue</code> 命令的时候就可以找到 <code>vue.js</code> 进行执行</p>
<h3 id="脚手架实现原理"><a href="#脚手架实现原理" class="headerlink" title="脚手架实现原理"></a>脚手架实现原理</h3><p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/blog/w2-c1-cli_process.png" alt="脚手架实现原理" loading="lazy"></p>
]]></content>
      <categories>
        <category>脚手架</category>
      </categories>
      <tags>
        <tag>前端脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>前端数组转树形结构</title>
    <url>/array_to_tree/</url>
    <content><![CDATA[<p>数组转树形结构这种情况还是很常见的，有时候后端就只给你一个数组，需要前端自己处理。一般情况下一个递归就搞定了，但是数据量很多的时候就有点 hot 不住了。</p>
<span id="more"></span>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;节点1&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;1_1&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;节点1-1&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;1_1_1&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;1_1&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;节点1-1-1&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;节点2&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;2_1&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;节点2-1&#x27;</span> &#125;,</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="使用递归处理"><a href="#使用递归处理" class="headerlink" title="使用递归处理"></a>使用递归处理</h2><p>遍历查找当前 parentId 的子级，然后在递归查找子级的子级。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">convertToTree</span> = (<span class="params">list = [], parentId</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> arr = []</span><br><span class="line">    list.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">parentId</span> === parentId) &#123;</span><br><span class="line">            arr.<span class="title function_">push</span>(&#123;</span><br><span class="line">                ...item,</span><br><span class="line">                <span class="attr">children</span>: <span class="title function_">convertToTree</span>(list, item.<span class="property">id</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">convertToTree</span>(list)</span><br></pre></td></tr></table></figure>
<p>分析代码看到每一次 <strong>convertToTree</strong> 调用都是对 list 一次遍历，加上第一次调用，可以看出该实现的时间复杂度为 <strong>O(n^2+n)</strong>。</p>
<h2 id="使用非递归实现"><a href="#使用非递归实现" class="headerlink" title="使用非递归实现"></a>使用非递归实现</h2><p>可以巧妙的应用了对象保存的是引用的特点，将id作为key 创建一个 map 去存储数据，然后根据 parentId 去找对应父级，添加到对应的 children 里面去。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">convertToTree</span> = (<span class="params">list = []</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> itemMap = &#123;&#125;</span><br><span class="line">    list.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        itemMap[item.<span class="property">id</span>] = &#123; ...item, <span class="attr">children</span>: [] &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    list.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> treeItem = itemMap[item.<span class="property">id</span>]; <span class="comment">//获取当前项</span></span><br><span class="line">        <span class="keyword">const</span> pItem = itemMap[item.<span class="property">parentId</span>]; <span class="comment">// 获取父级</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pItem) &#123;</span><br><span class="line">            pItem.<span class="property">children</span>.<span class="title function_">push</span>(treeItem)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果没有父级说明在顶层</span></span><br><span class="line">            res.<span class="title function_">push</span>(treeItem)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">convertToTree</span>(list)</span><br></pre></td></tr></table></figure>
<p>可以看到我们只需要循环两次，其时间复杂度为 <strong>O(2n)</strong>，因为额外对数据进行一次存储想要的内存消耗会有一定增加。</p>
<p>还可以对上面进一步进行优化，可以在一个循环里解决，这样其时间复杂度为 <strong>O(n)</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">convertToTree</span> = (<span class="params">list = []</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> itemMap = &#123;&#125;</span><br><span class="line">    list.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> id = item.<span class="property">id</span></span><br><span class="line">        <span class="keyword">let</span> pid = item.<span class="property">parentId</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!itemMap[id]) &#123;</span><br><span class="line">            itemMap[id] = &#123;</span><br><span class="line">                <span class="attr">children</span>: []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        itemMap[id] = &#123;</span><br><span class="line">            ...item,</span><br><span class="line">            <span class="attr">children</span>: itemMap[id].<span class="property">children</span> </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pid === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            res.<span class="title function_">push</span>(itemMap[id])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!itemMap[pid]) &#123; <span class="comment">// 没有父级 先创建一个</span></span><br><span class="line">                itemMap[pid] = &#123;</span><br><span class="line">                    <span class="attr">children</span>: []</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            itemMap[pid].<span class="property">children</span>.<span class="title function_">push</span>(itemMap[id])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">convertToTree</span>(list)</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从上面时间复杂度来看，随数据量增大的走势可以看出，当数据越来越大时，递归算法的耗时将远远大于非递归算法。有时候还是需要选择合适的算法来处理数据，会比你一时图个方便写的算法的性能有质的提升。</p>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>脚手架的开发（一）</title>
    <url>/cli_create/</url>
    <content><![CDATA[<h1 id="如何开发脚手架？"><a href="#如何开发脚手架？" class="headerlink" title="如何开发脚手架？"></a>如何开发脚手架？</h1><h2 id="脚手架开发流程"><a href="#脚手架开发流程" class="headerlink" title="脚手架开发流程"></a>脚手架开发流程</h2><ul>
<li>脚手架开发流程<ul>
<li>脚手架创建<ul>
<li><code>npm init</code></li>
</ul>
</li>
<li>脚手架开发<ul>
<li>分包</li>
<li>参数解析</li>
</ul>
</li>
<li>脚手架调试<ul>
<li><code>npm link</code></li>
</ul>
</li>
<li>脚手架发布<ul>
<li><code>npm publish</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><ul>
<li>创建 <code>npm</code> 项目</li>
<li>创建脚手架入口文件，最上方添加：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br></pre></td></tr></table></figure>

<ul>
<li>配置 <code>package.json</code>，添加 <code>bin</code> 属性</li>
<li>编写脚手架代码</li>
<li>将脚手架发布到 <code>npm</code></li>
</ul>
<h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><ul>
<li>安装脚手架</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g your-own-cli</span><br></pre></td></tr></table></figure>

<ul>
<li>使用脚手架</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">your-own-cli</span><br></pre></td></tr></table></figure>

<h2 id="脚手架开发难点解析"><a href="#脚手架开发难点解析" class="headerlink" title="脚手架开发难点解析"></a>脚手架开发难点解析</h2><ul>
<li>分包：将复杂的系统拆分成若干个模块</li>
<li>命令注册：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create</span><br><span class="line">vue add</span><br><span class="line">vue invoke</span><br></pre></td></tr></table></figure>

<ul>
<li>参数解析：<ul>
<li>options 全称：<code>--version</code>、<code>--help</code></li>
<li>options 简写：<code>-V</code>、<code>-h</code></li>
<li>带 params 的 options：<code>--path /Users/sam/Desktop/vue-test</code></li>
</ul>
</li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue <span class="built_in">command</span> [options] &lt;params&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>帮助文档：<ul>
<li>global help<ul>
<li>Usage</li>
<li>Options</li>
<li>Commands</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>示例：<code>vue</code> 的帮助信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: vue &lt;<span class="built_in">command</span>&gt; [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version                              output the version number</span><br><span class="line">  -h, --<span class="built_in">help</span>                                 output usage information</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  create [options] &lt;app-name&gt;                create a new project powered by vue-cli-service</span><br><span class="line">  add [options] &lt;plugin&gt; [pluginOptions]     install a plugin and invoke its generator <span class="keyword">in</span> an already created project</span><br><span class="line">  invoke [options] &lt;plugin&gt; [pluginOptions]  invoke the generator of a plugin <span class="keyword">in</span> an already created project</span><br><span class="line">  inspect [options] [paths...]               inspect the webpack config <span class="keyword">in</span> a project with vue-cli-service</span><br><span class="line">  serve [options] [entry]                    serve a .js or .vue file <span class="keyword">in</span> development mode with zero config</span><br><span class="line">  build [options] [entry]                    build a .js or .vue file <span class="keyword">in</span> production mode with zero config</span><br><span class="line">  ui [options]                               start and open the vue-cli ui</span><br><span class="line">  init [options] &lt;template&gt; &lt;app-name&gt;       generate a project from a remote template (legacy API, requires @vue/cli-init)</span><br><span class="line">  config [options] [value]                   inspect and modify the config</span><br><span class="line">  outdated [options]                         (experimental) check <span class="keyword">for</span> outdated vue cli service / plugins</span><br><span class="line">  upgrade [options] [plugin-name]            (experimental) upgrade vue cli service / plugins</span><br><span class="line">  migrate [options] [plugin-name]            (experimental) run migrator <span class="keyword">for</span> an already-installed cli plugin</span><br><span class="line">  info                                       <span class="built_in">print</span> debugging information about your environment</span><br><span class="line"></span><br><span class="line">  Run vue &lt;<span class="built_in">command</span>&gt; --<span class="built_in">help</span> <span class="keyword">for</span> detailed usage of given <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure>

<ul>
<li>command help<ul>
<li>Usage</li>
<li>Options</li>
</ul>
</li>
</ul>
<p><code>vue create</code> 的帮助信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: create [options] &lt;app-name&gt;</span><br><span class="line"></span><br><span class="line">create a new project powered by vue-cli-service</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --preset &lt;presetName&gt;       Skip prompts and use saved or remote preset</span><br><span class="line">  -d, --default                   Skip prompts and use default preset</span><br><span class="line">  -i, --inlinePreset &lt;json&gt;       Skip prompts and use inline JSON string as preset</span><br><span class="line">  -m, --packageManager &lt;<span class="built_in">command</span>&gt;  Use specified npm client when installing dependencies</span><br><span class="line">  -r, --registry &lt;url&gt;            Use specified npm registry when installing dependencies (only <span class="keyword">for</span> npm)</span><br><span class="line">  -g, --git [message]             Force git initialization with initial commit message</span><br><span class="line">  -n, --no-git                    Skip git initialization</span><br><span class="line">  -f, --force                     Overwrite target directory <span class="keyword">if</span> it exists</span><br><span class="line">  --merge                         Merge target directory <span class="keyword">if</span> it exists</span><br><span class="line">  -c, --<span class="built_in">clone</span>                     Use git <span class="built_in">clone</span> when fetching remote preset</span><br><span class="line">  -x, --proxy &lt;proxyUrl&gt;          Use specified proxy when creating project</span><br><span class="line">  -b, --bare                      Scaffold project without beginner instructions</span><br><span class="line">  --skipGetStarted                Skip displaying <span class="string">&quot;Get started&quot;</span> instructions</span><br><span class="line">  -h, --<span class="built_in">help</span>                      output usage information</span><br></pre></td></tr></table></figure>

<p>还有很多，比如：</p>
<ul>
<li>命令行交互</li>
<li>日志打印</li>
<li>命令行文字变色</li>
<li>网络通信：HTTP/WebSocket</li>
<li>文件处理</li>
</ul>
<p>等等……</p>
<h2 id="脚手架本地-link-标准流程"><a href="#脚手架本地-link-标准流程" class="headerlink" title="脚手架本地 link 标准流程"></a>脚手架本地 link 标准流程</h2><p>链接本地脚手架：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> your-cli-dir</span><br><span class="line">npm <span class="built_in">link</span></span><br></pre></td></tr></table></figure>

<p>链接本地库文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> your-lib-dir</span><br><span class="line">npm <span class="built_in">link</span></span><br><span class="line"><span class="built_in">cd</span> your-cli-dir</span><br><span class="line">npm <span class="built_in">link</span> your-lib</span><br></pre></td></tr></table></figure>

<p>取消链接本地库文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> your-lib-dir</span><br><span class="line">npm <span class="built_in">unlink</span></span><br><span class="line"><span class="built_in">cd</span> your-cli-dir</span><br><span class="line"><span class="comment"># link存在</span></span><br><span class="line">npm <span class="built_in">unlink</span> your-lib</span><br><span class="line"><span class="comment"># link不存在</span></span><br><span class="line"><span class="built_in">rm</span> -rf node_modules</span><br><span class="line">npm install -S your-lib</span><br></pre></td></tr></table></figure>

<p>理解 <code>npm link</code>：</p>
<ul>
<li><code>npm link your-lib</code>：将当前项目中 <code>node_modules</code> 下指定的库文件链接到 <code>node</code> 全局 <code>node_modules</code> 下的库文件</li>
<li><code>npm link</code>：将当前项目链接到 <code>node</code> 全局 <code>node_modules</code> 中作为一个库文件，并解析 <code>bin</code> 配置创建可执行文件</li>
</ul>
<p>理解 <code>npm unlink</code>：</p>
<ul>
<li><code>npm unlink</code>：将当前项目从 <code>node</code> 全局 <code>node_modules</code> 中移除</li>
<li><code>npm unlink your-lib</code>：将当前项目中的库文件依赖移除</li>
</ul>
<h2 id="开发脚手架（示栗）"><a href="#开发脚手架（示栗）" class="headerlink" title="开发脚手架（示栗）"></a>开发脚手架（示栗）</h2><p>先创建一个文件并进入文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> test-cli &amp;&amp; <span class="built_in">cd</span> test-cli</span><br></pre></td></tr></table></figure>

<p>初始化 npm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<p>用代码编辑器打开 test-cli 项目之后，只有一个 <code>package.json</code> 文件，根目录创建 <code>bin/index.js</code> 文件目录及文件，在 <code>index.js</code> 添加 <code>#!/usr/bin/env node</code>。</p>
<p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/blog/20230322104913.png" alt="test-cli" loading="lazy"></p>
<p>打开 <code>package.json</code> 文件，添加如下句柄。</p>
<p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/blog/20230322105051.png" alt="test-cli" loading="lazy"></p>
<p>登录 npm，注意设置 npm 的源，<code>https://registry.npmjs.org/</code>，注意是 https 不是 http，协议更新了，http 将无法登录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm login || npm adduser</span><br></pre></td></tr></table></figure>

<p>发布 npm，注意，如果发布提示失败，注意包名和 <code>package.json</code> 中的 <code>name</code> 名称可以自定义一下，毕竟上面包太多了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure>

<p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/blog/20230322114117.png" alt="npm publish" loading="lazy"></p>
<p>安装发布的依赖，记得环境变量和全局的概念</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i cli-test -g</span><br></pre></td></tr></table></figure>

<p>执行 <code>cli-test</code>，就会执行句柄进行输出。</p>
<h3 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h3><p>相当于增加了一个本地软链接，不全局安装也可以进行调试。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">link</span></span><br></pre></td></tr></table></figure>

<h3 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h3><p>把原项目放入一个文件夹，然后并行创建一个项目 <code>cli-test-lib</code>，执行 <code>npm init -y</code>。</p>
<p>然后新建个 <code>lib/index.js</code> 文件夹及文件，</p>
<p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/blog/20230322120527.png" alt="分包" loading="lazy"></p>
<p>接下来，需要让 <code>cli-test</code> 引用到 <code>cli-test-lib</code> 这个包，需要切换到 <code>cli-test</code>目录下，执行如下句柄。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">link</span></span><br></pre></td></tr></table></figure>

<p>可以看到下图，在 <code>node_modules</code> 下已经多了一个 <code>cli-test-lib</code> 文件夹，表示它引用成功。</p>
<p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/blog/20230322121338.png" alt="软链" loading="lazy"></p>
<p>然后切换到 <code>cli-test</code> 目录下执行 <code>npm link cli-test-lib</code> 进行关联。、</p>
<p>🔔 注意：被引用包的 <code>package.json</code> 文件中， <code>main:</code> 对应的 <code>lib/index.js</code> 而不是默认的 <code>index.js</code> 文件，否则无法找到。<br>🔔 注意：发布上线前，在引用的 <code>package.json</code> 文件中，要在 <code>dependencies</code> 中增加 <code>&quot;cli-test-lib&quot;: &quot;^1.0.0&quot;</code>，否则会出现问题。</p>
<h3 id="注册一个命令"><a href="#注册一个命令" class="headerlink" title="注册一个命令"></a>注册一个命令</h3><p>比如去执行 <code>cli-test init</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cli-test init</span><br></pre></td></tr></table></figure>

<p>可以发现，在命令句柄后面多了个 <code>init</code>，这里，利用 <code>node</code> 的原生模块，<code>process</code> 中的 <code>args</code> 可以拿到路径和命令信息。</p>
<p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/blog/20230322144546.png" alt="注册命令" loading="lazy"></p>
<p>打印出来多了一个 <code>init</code>，既然这样，就可以利用 <strong>分包</strong> 特点，把命令变成方法进行执行，比如在 <code>cli-test-lib/bin/index.js</code> 中添加如下句柄。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;      ++++++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行 init 流程&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后在 <code>cli-test/bin/index.js</code> 中添加如下句柄。</p>
<p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/blog/20230322145032.png" alt="注册命令" loading="lazy"></p>
<p>就可以看到如下效果。</p>
<p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/blog/20230322145219.png" alt="注册命令" loading="lazy"></p>
<h3 id="实现参数解析"><a href="#实现参数解析" class="headerlink" title="实现参数解析"></a>实现参数解析</h3><p>延展上面的用栗，假设解析参数 <code>--name</code> 和 <code>vue-test</code>。</p>
<p>在 <code>cli-test/bin/index.js</code> 下，代码如图。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lib = <span class="built_in">require</span>(<span class="string">&#x27;cli-test-lib&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册一个命令 cli-test init</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> argv = <span class="built_in">require</span>(<span class="string">&#x27;process&#x27;</span>).<span class="property">argv</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> command = argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现参数解析 --name 和 vue-test</span></span><br><span class="line"><span class="comment">// 剥离二级命令和 params</span></span><br><span class="line"><span class="keyword">const</span> options = argv.<span class="title function_">slice</span>(<span class="number">3</span>)      ++++++++++</span><br><span class="line"><span class="keyword">let</span> [option, param] = options      ++++++++++</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理二级命令</span></span><br><span class="line">option = option.<span class="title function_">replace</span>(<span class="string">&#x27;--&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  ++++++++++</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断命令是否存在，是否有效</span></span><br><span class="line"><span class="keyword">if</span> (command) &#123;</span><br><span class="line">  <span class="keyword">if</span> (lib[command]) &#123;</span><br><span class="line">    <span class="comment">// 执行的时候将参数传递过去</span></span><br><span class="line">    lib[command](&#123; option, param &#125;) +++++++++</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;无效的命令&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请输入命令&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>cli-test-lib/bin/index.js</code> 下，代码如图。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">init</span>(<span class="params">&#123; option, param &#125;</span>) &#123;   +++++++++++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行 init 流程&#x27;</span>, option, param)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/blog/20230322151410.png" alt="解析命令" loading="lazy"></p>
<p>如果还涉及到一些多态不确定的参数解析，就要耗费大量的时间处理，所以这块了解原理即可。</p>
<h2 id="发布脚手架"><a href="#发布脚手架" class="headerlink" title="发布脚手架"></a>发布脚手架</h2><p>需要解除本地分包的软链接，比如这里要解除 <code>cli-test-lib</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">unlink</span></span><br></pre></td></tr></table></figure>

<p>然后就可以进行发布，但是在发布的时候，需要更新版本号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure>

<p>然后在 <code>cli-test</code> 的 <code>package.json</code> 中记得更新分包的版本号即可。</p>
<p>最后按照如上方式上钻更新 <code>cli-test</code> 最后发布即可，如果出现异常记得 <code>rm -rf node_modules &amp;&amp; npm unlink &amp;&amp; npm publish</code>，如果找不到版本记得更新 <code>npm i -g</code>，所以不基于框架开发脚手架，需要耗费比较多的心智成本。</p>
]]></content>
      <categories>
        <category>脚手架</category>
      </categories>
      <tags>
        <tag>前端脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>前端原生【数组】Array</title>
    <url>/array/</url>
    <content><![CDATA[<h3 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h3><p><code>Array</code> 对象用于在单个的变量中存储多个值。<br><code>Array</code> 数组表示有序数据的集合，对象是无序数据的集合，如果数据的顺序很重要，就用数组，否则就用对象。</p>
<p><strong>JavaScript 中创建数组的方法有两种方式，综合考虑 推荐第二种方式。</strong></p>
<ol>
<li>使用 Array 构造函数：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>() <span class="comment">//创建一个空数组 []</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">4</span>) <span class="comment">// 创建一个包含4项元素的数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;lily&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>) <span class="comment">//创建一个包含3个元素的数组</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用数组字面量表示方法：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr4 = [] <span class="comment">//创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr5 = [<span class="number">20</span>] <span class="comment">//创建一个包含1项的数组</span></span><br><span class="line"><span class="keyword">var</span> arr6 = [<span class="string">&#x27;lily&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>] <span class="comment">//创建一个包含3个元素的数组</span></span><br></pre></td></tr></table></figure>

<p>🔔 注意：<code>JavaScript</code> 中数组的 <code>length</code> 属性是可以修改的，看下面的示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;lily&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>] <span class="comment">//创建一个包含3个元素的数组</span></span><br><span class="line">arr[arr.<span class="property">length</span>] = <span class="string">&#x27;sean&#x27;</span> <span class="comment">//在下标为3处（也就是数组尾部）添加一项&quot;sean&quot;</span></span><br><span class="line">arr.<span class="property">length</span> = arr.<span class="property">length</span> - <span class="number">1</span> <span class="comment">//通过length属性将数组的最后一项删除</span></span><br></pre></td></tr></table></figure>

<hr>
<p>合理利用数组的 <code>length</code> 可以达到很多意想不到的效果<br>数组也是对象，是引用类型<br>实例的数组对象的 <code>__proto__</code> 指向了 <code>Array.prototype</code> 的构造函数<br><code>Array.__proto__</code> 指向了匿名函数 <code>anonymous()</code> 它的 <code>__proto__</code>最终又指向了 <code>Object</code></p>
<hr>
<h3 id="reduce-方法"><a href="#reduce-方法" class="headerlink" title="reduce 方法"></a>reduce 方法</h3><p><code>reduce()</code> 是数组的归并方法，该方法有返回值 与 <code>forEach()、map()、filter()</code> 等迭代方法一样都会对数组每一项进行遍历，但是 <code>reduce()</code> 可同时将前面数组项遍历产生的结果与当前遍历项进行运算，这一点是其他迭代方法无法企及的。</p>
<p><strong>释义：不断的减少数组元素，最终的到一个结果，类似于递归。</strong></p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">prev,next,index,arr</span>)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;, init);</span><br><span class="line"><span class="comment">//参数一：回调函数</span></span><br><span class="line"><span class="comment">//回调函数的参数1：初始值或之前值（必须）</span></span><br><span class="line"><span class="comment">//回调函数的参数2：当前值（必须）</span></span><br><span class="line"><span class="comment">//回调函数的参数3：当前索引值（可选）</span></span><br><span class="line"><span class="comment">//回调函数的参数4：当前数组（可选）</span></span><br><span class="line"><span class="comment">//回调函数返回值：返回的值作为下一次迭代的初始值</span></span><br><span class="line"><span class="comment">//参数二：初始值（可选）如果缺省，初始值为数组的第一项</span></span><br></pre></td></tr></table></figure>

<p>四个参数：</p>
<ul>
<li>prev：表示上一次调用回调时的返回值，或者初始值 init。</li>
<li>next：表示当前正在处理的数组元素 下一个意思。</li>
<li>index：表示当前正在处理的数组的元素的索引，如提供 init 值，则索引为 0,否则 索引从 1 开始。</li>
<li>init 表示初始值 初始值可以是[] 可以是{} 也可以是任意，初始值参数可选。</li>
</ul>
<p>常用参数一般为第一个和第二个。</p>
<p>栗：先提供一个原始数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>

<ol>
<li>数组项之和</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prev, next</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> prev + next</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>由于传入了初始值 0，所以开始时 prev 的值为 0，next 的值为数组第一项 3，相加之后返回值为 3 作为下一轮回调的 prev 值，然后再继续与下一个数组项相加，以此类推，直至完成所有数组项的和并返回。</p>
<ol start="2">
<li>求数组最大值</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> max = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prev, next</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(prev, next)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>由于未传入初始值，所以开始时 prev 的值为数组第一项 3，cur 的值为数组第二项 9，取两值最大值后继续进入下一轮回调。</p>
<ol start="3">
<li>数组去重</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prev, cur</span>) &#123;</span><br><span class="line">  prev.<span class="title function_">indexOf</span>(cur) === -<span class="number">1</span> &amp;&amp; prev.<span class="title function_">push</span>(cur)</span><br><span class="line">  <span class="keyword">return</span> prev</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure>

<p><strong>实现的基本原理如下：</strong></p>
<p>① 初始化一个空数组<br>② 将需要去重处理的数组中的第 1 项在初始化数组中查找，如果找不到（空数组中肯定找不到），就将该项添加到初始化数组中<br>③ 将需要去重处理的数组中的第 2 项在初始化数组中查找，如果找不到，就将该项继续添加到初始化数组中<br>④ ……<br>⑤ 将需要去重处理的数组中的第 n 项在初始化数组中查找，如果找不到，就将该项继续添加到初始化数组中<br>⑥ 将这个初始化数组返回</p>
<ol start="4">
<li>将二维数组转换成一维数组</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrMix = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">  [<span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> arr = arrMix.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prev, curr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> prev.<span class="title function_">concat</span>(curr)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">//[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>将将 <code>cookie</code> 和 <code>search</code> 以对象的形式显示</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cookie = <span class="string">&#x27;k1=v1; k2=v2; k3=v3; k4=v4&#x27;</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="string">&#x27;k1=v1&amp;k2=v2&amp;k3=v3&amp;k4=v4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// cookie</span></span><br><span class="line">sum = cookie.<span class="title function_">split</span>(<span class="string">&#x27;; &#x27;</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> nx = next.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> pv = nx[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">var</span> value = nx[<span class="number">1</span>]</span><br><span class="line">  <span class="comment">// 设置对象的键=值</span></span><br><span class="line">  <span class="comment">// 因为有reduce方法的遍历 所以下面让他们键值对一一对应就可以了</span></span><br><span class="line">  prev[pv] = value</span><br><span class="line">  <span class="keyword">return</span> prev</span><br><span class="line">&#125;, &#123;&#125;) <span class="comment">// 初始化值是一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br><span class="line"><span class="comment">// ---------------- 分割线 ---------------</span></span><br><span class="line"><span class="comment">// search</span></span><br><span class="line">vum = search.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> nx = next.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> pv = nx[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">var</span> value = nx[<span class="number">1</span>]</span><br><span class="line">  <span class="comment">// 设置对象的键=值</span></span><br><span class="line">  <span class="comment">// 因为有reduce方法的遍历 所以下面让他们键值对一一对应就可以了</span></span><br><span class="line">  prev[pv] = value</span><br><span class="line">  <span class="keyword">return</span> prev</span><br><span class="line">&#125;, &#123;&#125;) <span class="comment">// 初始化值是一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vum)</span><br></pre></td></tr></table></figure>

<p><strong>类似方法：reduceRight()</strong></p>
<p>该方法用法与 reduce()其实是相同的，只是遍历的顺序相反，它是从数组的最后一项开始，向前遍历到第一项。</p>
<h3 id="every-方法"><a href="#every-方法" class="headerlink" title="every 方法"></a>every 方法</h3><p>🔔 注意：every() 用于判断数组中的每一项元素是否都满足条件，返回一个布尔值。</p>
<p>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, -<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>需求：将数组中的每一项翻倍。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isEvery = arr.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isEvery) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>可以看到：<br><code>every()</code> 可以传入一个匿名回调函数作为参数，而该匿名函数有含有三个参数：</p>
<ol>
<li>数组遍历时的当前元素 <code>item</code>;</li>
<li>数组遍历时的当前元素的索引 <code>index</code>;</li>
<li>正在遍历的数组 <code>array</code>。</li>
</ol>
<p>示例中是要判断数组 <code>arr</code> 中的元素是否都大于 0 为正数，很显然不是，所以该方法最终返回 <code>false</code>。</p>
<p><strong>补充：方法除了传递一个匿名函数作为参数之外，还可以传第二个参数，该参数用于指定匿名函数内的 this 指向。</strong></p>
<p>栗：单个参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只传一个匿名函数</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>栗：两个参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传两个参数</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// [1, -2, 3, 4, -5]</span></span><br><span class="line">&#125;, arr)</span><br></pre></td></tr></table></figure>

<h3 id="some-方法"><a href="#some-方法" class="headerlink" title="some 方法"></a>some 方法</h3><p>🔔 注意：some() 用于判断数组中是否存在满足条件的元素，返回一个布尔值。</p>
<p>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, -<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>需求：将数组中的每一项翻倍。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isSome = arr.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item &lt; <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isSome) <span class="comment">// true  元素中有小于0的元素存在</span></span><br></pre></td></tr></table></figure>

<p>可以看到：<br><code>some()</code> 可以传入一个匿名回调函数作为参数，而该匿名函数有含有三个参数：</p>
<ol>
<li>数组遍历时的当前元素 <code>item</code></li>
<li>数组遍历时的当前元素的索引 <code>index</code></li>
<li>正在遍历的数组 <code>array</code></li>
</ol>
<p>该方法与 <code>every()</code> 类似，示例中是要判断数组 <code>arr</code> 中是否存在负数元素，很显然存在，所以该方法最终返回 <code>true</code>。</p>
<p><strong>补充：方法除了传递一个匿名函数作为参数之外，还可以传第二个参数，该参数用于指定匿名函数内的 this 指向</strong></p>
<p>栗：</p>
<p>单个参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只传一个匿名函数</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>两个参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传两个参数</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// [1, -2, 3, 4, -5]</span></span><br><span class="line">&#125;, arr)</span><br></pre></td></tr></table></figure>

<h3 id="splice-方法"><a href="#splice-方法" class="headerlink" title="splice 方法"></a>splice 方法</h3><p>🔔 注意 ：splice()：替换、删除功能 3 个参数</p>
<ul>
<li>第一个值是索引号</li>
<li>第二个值时删除的个数</li>
<li>第三个值是要替换的值</li>
</ul>
<p>如果不写第三个要替换的值；就是删除，如果后面的 2 个参数不写 会从指定下标往后一直删除到底，当出现第 3 个参数的时候，第 2 个参数就是要被替换的个数，第 3 个参数的个数如果大于第 2 个参数设定的个数，对应替换掉第 2 个参数的个数以后，第 3 个参数多余的参数会继续在被替换的参数后面进行添加。</p>
<ul>
<li><p>删除：可以删除任意数量的项，需要 2 个参数：</p>
<ol>
<li>要删除的第一项的位置下标（索引号）</li>
<li>要删除的个数</li>
</ol>
</li>
<li><p>插入：可以向指定位置插入任意数量的项，需要 3n 个参数：</p>
<ol>
<li>要插入的的任意数量的项 一个或多个</li>
</ol>
</li>
<li><p>替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需要指定 3 个参数：：</p>
<ol>
<li>起始位置</li>
<li>要删除的项数</li>
<li>要插入的任意数量的项</li>
</ol>
</li>
</ul>
<p><strong>插入的项数不必与删除的项数相等</strong></p>
<p>🔔 注意：<code>splice()</code> 方法始终都会返回一个数组，该数组中包含从原数组中删除的项，如果没有删除任何项，则返回一个空的数组。</p>
<p>栗：先申明一个数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>删除：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line"><span class="keyword">var</span> arrRemoved = arr.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrRemoved) <span class="comment">// [1,3]  被删除的 从0个开始 删除两个</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure>

<ul>
<li>插入：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrRemoved2 = arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1,3,4,6,5,7,9,11]; 在下标2的位置删除0个插入4和6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrRemoved2)</span><br></pre></td></tr></table></figure>

<ul>
<li>替换：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrRemoved3 = arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1,2,4,5,7,9,11]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrRemoved3)</span><br></pre></td></tr></table></figure>

<p>🔔 注意：这里把下标为 1 的项替换一个， 2 替换了当前的下标为 1 的项， 4 是添加到当前被替换下标的后面。</p>
<h3 id="sort-方法"><a href="#sort-方法" class="headerlink" title="sort 方法"></a>sort 方法</h3><p>🔔 注意： <code>sort()</code> 按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。</p>
<p>在排序时，<code>sort()</code> 方法会调用每个数组项的 <code>toString()</code> 转型方法，然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值，<code>sort()</code> 方法比较的也是字符串，因此会出现以下的这种情况：</p>
<p>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">sort</span>()) <span class="comment">//[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">12</span>, <span class="number">24</span>, <span class="number">51</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2.<span class="title function_">sort</span>()) <span class="comment">//[12,24,3,51]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2) <span class="comment">//[12,24,3,51]  (原数组被改变)</span></span><br></pre></td></tr></table></figure>

<p>上述数组中元素的值没有按照大小进行排序，为了解决上述问题，<code>sort()</code> 方法可以接收一个回调函数，通过回调函数来进行数组大小排序。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">222</span>, <span class="number">63</span>, <span class="number">35</span>, <span class="number">17</span>, <span class="number">12</span>, <span class="number">43</span>]</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">m, n</span>) =&gt;</span> m - n)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// (7) [10, 12, 17, 35, 43, 63, 222] 从小大大排序</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">m, n</span>) =&gt;</span> n - m)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [222, 63, 43, 35, 17, 12, 10] 从大到小排序</span></span><br></pre></td></tr></table></figure>

<p>拓展：如果需要任何包含简单值的数组排序（字符串，数组混合），代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = [<span class="string">&#x27;ac&#x27;</span>, <span class="string">&#x27;cca&#x27;</span>, <span class="string">&#x27;efe&#x27;</span>, <span class="string">&#x27;adg&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">9</span>]</span><br><span class="line">m.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="keyword">typeof</span> b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b ? -<span class="number">1</span> : <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> a &lt; <span class="keyword">typeof</span> b ? -<span class="number">1</span> : <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m)</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 6, 7, 8, 9, &quot;ac&quot;, &quot;adg&quot;, &quot;cca&quot;, &quot;efe&quot;]</span></span><br></pre></td></tr></table></figure>

<p>拓展：数组对象的利用 <code>sort</code> 排序：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = [</span><br><span class="line">  &#123; <span class="attr">first</span>: <span class="string">&#x27;Joe&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Besser&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">first</span>: <span class="string">&#x27;Moe&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Howord&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">first</span>: <span class="string">&#x27;Joe&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;DeRita&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">first</span>: <span class="string">&#x27;Shemp&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Howord&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">first</span>: <span class="string">&#x27;Larry&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Fine&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">first</span>: <span class="string">&#x27;Curly&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Howord&#x27;</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> by = <span class="keyword">function</span> (<span class="params">name, minor</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">o, p</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a, b</span><br><span class="line">    <span class="keyword">if</span> (o &amp;&amp; p &amp;&amp; <span class="keyword">typeof</span> o === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> p === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">      a = o[name]</span><br><span class="line">      b = p[name]</span><br><span class="line">      <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> minor === <span class="string">&#x27;function&#x27;</span> ? <span class="title function_">minor</span>(o, p) : <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="keyword">typeof</span> b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; b ? -<span class="number">1</span> : <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> a &lt; <span class="keyword">typeof</span> b ? -<span class="number">1</span> : <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Error&#x27;</span>,</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;报错了&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">s.<span class="title function_">sort</span>(<span class="title function_">by</span>(<span class="string">&#x27;last&#x27;</span>, <span class="title function_">by</span>(<span class="string">&#x27;first&#x27;</span>)))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0: &#123;first: &quot;Joe&quot;, last: &quot;Besser&quot;&#125;</span></span><br><span class="line"><span class="comment">// 1: &#123;first: &quot;Joe&quot;, last: &quot;DeRita&quot;&#125;</span></span><br><span class="line"><span class="comment">// 2: &#123;first: &quot;Larry&quot;, last: &quot;Fine&quot;&#125;</span></span><br><span class="line"><span class="comment">// 3: &#123;first: &quot;Curly&quot;, last: &quot;Howord&quot;&#125;</span></span><br><span class="line"><span class="comment">// 4: &#123;first: &quot;Moe&quot;, last: &quot;Howord&quot;&#125;</span></span><br><span class="line"><span class="comment">// 5: &#123;first: &quot;Shemp&quot;, last: &quot;Howord&quot;&#125;</span></span><br><span class="line"><span class="comment">// length: 6</span></span><br><span class="line"><span class="comment">// __proto__: Array(0)</span></span><br></pre></td></tr></table></figure>

<p>针对对象数组对象的排序：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCom</span>(<span class="params">propertyName</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">object1, object2</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> v1 = object1[propertyName]</span><br><span class="line">    <span class="keyword">var</span> v2 = object2[propertyName]</span><br><span class="line">    <span class="keyword">return</span> v1 &lt; v2 ? -<span class="number">1</span> : <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;bizhen&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line">data.<span class="title function_">sort</span>(<span class="title function_">createCom</span>(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data[<span class="number">0</span>].<span class="property">name</span>) <span class="comment">// bizhen</span></span><br><span class="line"></span><br><span class="line">data.<span class="title function_">sort</span>(<span class="title function_">createCom</span>(<span class="string">&#x27;age&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data[<span class="number">0</span>].<span class="property">age</span>) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<h3 id="filter-方法"><a href="#filter-方法" class="headerlink" title="filter 方法"></a>filter 方法</h3><p>🔔 注意：<code>filter()</code> 用于筛选数组中满足条件的元素，返回一个筛选后的 新数组。</p>
<p>栗：先声明一个数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, -<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>需求：将数组中的每一项翻倍。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> minus = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item &lt; <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(minus) <span class="comment">// [-2, -5]</span></span><br></pre></td></tr></table></figure>

<p>可以看到：map()可以传入一个匿名回调函数作为参数，而该匿名函数有含有三个参数：</p>
<ol>
<li>数组遍历时的当前元素 <code>item</code>；</li>
<li>数组遍历时的当前元素的索引 <code>index</code>；</li>
<li>正在遍历的数组 <code>array</code>。</li>
</ol>
<p>示例中是要筛选出数组 <code>arr</code> 中的所有负数，所以该方法最终返回一个筛选后的新数组 <code>[-2, -5]</code>。</p>
<p>补充：方法除了传递一个匿名函数作为参数之外，还可以传第二个参数，该参数用于指定匿名函数内的 <code>this</code> 指向。</p>
<p>栗：单个参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只传一个匿名函数</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>栗：两个参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传两个参数</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// [1, -2, 3, 4, -5]</span></span><br><span class="line">&#125;, arr)</span><br></pre></td></tr></table></figure>

<h3 id="indexOf-方法-和-lastIndexOf-方法"><a href="#indexOf-方法-和-lastIndexOf-方法" class="headerlink" title="indexOf 方法 和 lastIndexOf()方法"></a>indexOf 方法 和 lastIndexOf()方法</h3><p>此方法字符串和数组都可用 indexOf(): 有返回值，返回当前项所在下标位置 此方法接收两个参数：</p>
<ol>
<li>要查找的项；</li>
<li>（可选的）表示查找起始点位置的索引：其中，从数组的开头（位置 0）开始向后查找。也可以理解为数组中元素第一次出现的位置。</li>
</ol>
<p><code>lastIndexOf</code>: 有返回值，接收两个参数：</p>
<ol>
<li>要查找的项；</li>
<li>（可选的）表示查找起始点位置的索引：其中，从数组的开头（位置 0）开始向后查找。也可以理解为数组中元素最后一次出现的位置；</li>
</ol>
<p>🔔 注意：这两个方法都会返回要查找的项在数组中的位置，在没找到的情况下返回-1，在比较第一个参数与数组中的每一项时，会使用全等操作符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="number">5</span>)) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">lastIndexOf</span>(<span class="number">5</span>)) <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="number">5</span>, <span class="number">2</span>)) <span class="comment">// 2 从下标为2的位置开始找</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">lastIndexOf</span>(<span class="number">5</span>, <span class="number">4</span>)) <span class="comment">// 2 从下标为4的位置开始找</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="string">&#x27;5&#x27;</span>)) <span class="comment">// -1 不存在返回-1</span></span><br></pre></td></tr></table></figure>

<h3 id="concat-方法"><a href="#concat-方法" class="headerlink" title="concat 方法"></a>concat 方法</h3><p>🔔 注意： concat() 将参数添加到原数组中 有返回值。</p>
<p>这个方法会创建当前数组一个副本，然后将接受到的参数添加到这个副本末尾，参数可以是一个或多个数值或字符串或数组，最后返回新构建的数组。在没有给 <code>concat()</code> 方法传递参数的情况下，它只是复制当前数组并返回副本。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> arrCopy = arr.<span class="title function_">concat</span>(<span class="number">9</span>, [<span class="number">11</span>, <span class="number">13</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrCopy) <span class="comment">//[1,3,5,7,9,11,13]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">//[1,3,5,7](原数组未被修改)</span></span><br></pre></td></tr></table></figure>

<p>从上面测试结果可以发现：传入的不是数组，则直接把参数添加到数组后面，如果传入的是数组，则将数组中的个项添加到数组中。但是如果传入的是一个二维数组呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传入二维数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> arrCopy2 = arr.<span class="title function_">concat</span>([<span class="number">9</span>,[<span class="number">11</span>,<span class="number">13</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrCopy2);           <span class="comment">//[1,3,5,7,9,Array[2]]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">log</span>(arrCopy2[<span class="number">5</span>]);    <span class="comment">//[11,13]</span></span><br></pre></td></tr></table></figure>

<p>上述代码中，<strong>arrCopy2</strong> 数组的第五项是一个包含两项的数组，也就是说 <code>concat</code> 方法只能将传入数组中的每一项添加到数组中，如果传入数组中有些是数组，那么也就会把这一数组当作一项添加到 <strong>arrCopy2</strong> 中。</p>
<h3 id="slice-方法"><a href="#slice-方法" class="headerlink" title="slice 方法"></a>slice 方法</h3><p><code>slice()</code> 方法有返回值，不修改原数组，只会返回一个浅拷贝了原数组中的元素的一个新数组，即地址都指向了同一个对象。</p>
<p>🔔 注意： <code>slice()</code> 返回从指定开始下标到结束下标之间的项组成的新数组，含前不含后。</p>
<p>接收一或两个参数：即要返回项的起始和结束位置。</p>
<ul>
<li>一个参数的情况下：返回从该参数指定位置开始到当前数组末尾所有项。</li>
<li>两个参数的情况下：返回起始和结束位置之间的项——但不包括结束位置的项。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line"><span class="keyword">var</span> arrCopy = arr.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> arrCopy2 = arr.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">var</span> arrCopy3 = arr.<span class="title function_">slice</span>(<span class="number">1</span>, -<span class="number">2</span>) <span class="comment">//  最后一个是-1</span></span><br><span class="line"><span class="keyword">var</span> arrCopy4 = arr.<span class="title function_">slice</span>(-<span class="number">4</span>, -<span class="number">1</span>) <span class="comment">// 从后往前 -4到-1之间不含后</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1,3,5,7,9,11] (原数组没变)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrCopy) <span class="comment">// [3,5,7,9,11]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrCopy2) <span class="comment">// [3,5,7]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrCopy3) <span class="comment">// [3,5,7]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrCopy4) <span class="comment">// [5,7,9]</span></span><br></pre></td></tr></table></figure>

<p>上面示例注意：处理负数之间两种思路</p>
<ul>
<li>思路一：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">当为负数的时候，-<span class="number">1</span>代表最后一个 -<span class="number">2</span>依次往前推，-<span class="number">1</span>到-<span class="number">4</span>之间 从右往前推，第二个参数是-<span class="number">1</span>，最后一个，因 <span class="string">`slice()`</span> 方法含前不含后原则，就是-<span class="number">4</span>到-<span class="number">1</span>之间。</span><br></pre></td></tr></table></figure>

<ul>
<li>思路二：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">给所有的负数，加上数组的长度 然后进行截取 比如上面数组长度为<span class="number">6</span>,<span class="number">1</span>到-<span class="number">2</span> 那么-<span class="number">2</span>加上数组长度<span class="number">6</span> 就是<span class="number">4</span> 就是<span class="number">1</span>-<span class="number">4</span>之间，下面-<span class="number">4</span>到-<span class="number">1</span>各加<span class="number">6</span> 就是-<span class="number">2</span>到<span class="number">5</span>之间。</span><br></pre></td></tr></table></figure>

<p>延伸：还有一个基本相似的方法 <code>substring</code> 该方法跟 <code>slice</code> 方法 唯二的区别就是：</p>
<ol>
<li>substring 方法不接受负数。</li>
<li>substring 方法只会寻找两个参数 从小到大去截取 就算参数写成 substring(6,3)它实际执行还是从 substring(3,6)去进行截取！</li>
</ol>
<h3 id="reverse-方法"><a href="#reverse-方法" class="headerlink" title="reverse 方法"></a>reverse 方法</h3><p>🔔 注意： reverse() 翻转数组顺序 更新数组 返回值可省略。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">13</span>, <span class="number">24</span>, <span class="number">51</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reverse</span>()) <span class="comment">//[3,51,24,13]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">//[3,51,24,13](原数组改变)</span></span><br></pre></td></tr></table></figure>

<h3 id="push-和-pop-方法"><a href="#push-和-pop-方法" class="headerlink" title="push 和 pop 方法"></a>push 和 pop 方法</h3><p>🔔 注意：返回值可选，返回值是长度或者删除的数值，不用返回值直接更新原数组。</p>
<p><code>push()</code> 方法：可以接受任意数量的参数，把它们逐个添加到数组的末尾，并返回修改后的数组长度<br><code>pop()</code>方法 ： 数组末尾移除最后一项，减少数组的 <code>length</code> 值，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;lily&#x27;</span>, <span class="string">&#x27;lucy&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> count = arr.<span class="title function_">push</span>(<span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;sean&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count) <span class="comment">//5  返回的是数组的长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [&quot;lily&quot;,&quot;lucy&quot;,&quot;tom&quot;,&quot;jack&quot;,&quot;sean&quot;] 返回添加后新的数组</span></span><br><span class="line"><span class="keyword">var</span> item = arr.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">//sean   返回移除的最后一项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">//[&quot;lily&quot;,&quot;lucy&quot;,&quot;tom&quot;,&quot;jack&quot;]</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li>添加的方法 <code>push</code> <code>unshift</code> 返回值是新的长度 不用返回值得到的是更新后的数组。</li>
<li>删除方法 <code>pop</code> <code>shift</code> 返回值是被删除的那个元素，不用返回值得到是更新后的数组。</li>
</ul>
<h3 id="unshift-和-shift-方法"><a href="#unshift-和-shift-方法" class="headerlink" title="unshift 和 shift 方法"></a>unshift 和 shift 方法</h3><p>🔔 注意：返回值可选，返回值是添加或者删除的数值，不用返回值直接更新原数组。</p>
<p><code>unshift()</code> 方法 ： 将参数添加到数组开头，并返回数组新的长度。<br><code>shift()</code> 方法：删除原数组的第一项，并返回删除元素的值，如果数组为空返回 <code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;lily&#x27;</span>, <span class="string">&#x27;lucy&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> count = arr.<span class="title function_">unshift</span>(<span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;sean&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count) <span class="comment">//5  返回数组的长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">//[&quot;jack&quot;,&quot;sean&quot;,&quot;lily&quot;,&quot;lucy&quot;,&quot;tom&quot;] 返回新的数组</span></span><br><span class="line"><span class="keyword">var</span> item = arr.<span class="title function_">shift</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">//jack   返回移除的第一项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">//[&quot;sean&quot;,&quot;lily&quot;,&quot;lucy&quot;,&quot;tom&quot;]</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li>添加的方法 <code>push</code> <code>unshift</code> 返回值是新的长度，不用返回值得到的是更新后的数组。</li>
<li>删除方法 <code>pop</code> <code>shift</code> 返回值是被删除的那个元素，不用返回值得到是更新后的数组。</li>
</ul>
<h3 id="join-方法"><a href="#join-方法" class="headerlink" title="join 方法"></a>join 方法</h3><p>🔔 注意：<code>join()</code> 将数组的元素组起一个字符串，以这个字符串为分隔符，省略的话则用默认逗号为分隔符，该方法只接受一个参数： 分隔符 ，有返回值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>()) <span class="comment">// 1,2,3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)) <span class="comment">// 1-2-3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [1,2,3]（原数组不变)</span></span><br></pre></td></tr></table></figure>

<p>通过 join()方法可以实现重复字符串，只需传入字符串以及重复的次数，就能返回重复后的字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">repeatString</span>(<span class="params">str, n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Array</span>(n + <span class="number">1</span>).<span class="title function_">join</span>(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">repeatString</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="number">3</span>)) <span class="comment">//abcabcabc</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">repeatString</span>(<span class="string">&#x27;Hi&#x27;</span>, <span class="number">5</span>)) <span class="comment">//HiHiHiHiHi</span></span><br></pre></td></tr></table></figure>

<p>📣 当然更好的办法可以参考 es6 语法新增的 repeat()方法！</p>
<h3 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach 方法"></a>forEach 方法</h3><p>🔔 注意：forEach() 用以遍历数组 方法无返回值。</p>
<p>栗：先申明一个数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, -<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>需求：将数组中的每一项翻倍。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  array[index] = item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [2,-4,6,8,-10]</span></span><br></pre></td></tr></table></figure>

<p>可以看到：<br><code>forEach()</code> 可以传入一个匿名回调函数作为参数，而该匿名函数有含有三个参数：</p>
<ol>
<li>数组遍历时的当前元素 item；</li>
<li>数组遍历时的当前元素的索引 index；</li>
<li>正在遍历的数组 array。</li>
</ol>
<p>有了这三个参数，可以方便我们做很多事情，比如说示例当中将每一项数组元素翻倍，这时需要用到第一个参数 item。但是，仅仅只是将 item 乘以 2 可不行，我们还得将其赋值给原来的数组，这时我们就得用到后面两个参数 index 和 array。</p>
<p>根据上述可知，array[index] 是全等于 item 的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(array[index] === item) <span class="comment">// true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>🔔 注意：一般计算的时候，我们更推荐使用 <code>map()</code> 方法 代码更精简，并 <code>map</code> 有返回值，具体参考 <code>map</code> 方法。</p>
<p><strong>补充：方法除了传递一个匿名函数作为参数之外，还可以传第二个参数，该参数用于指定匿名函数内的 <code>this</code> 指向。</strong></p>
<p>栗：单个参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只传一个匿名函数</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>栗：两个参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传两个参数</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// [1, -2, 3, 4, -5]</span></span><br><span class="line">&#125;, arr)</span><br></pre></td></tr></table></figure>

<h3 id="map-方法"><a href="#map-方法" class="headerlink" title="map 方法"></a>map 方法</h3><p>🔔 注意：<code>map()</code> 用于遍历数组，返回处理之后的新数组，有返回值。</p>
<p>栗：先申明一个数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, -<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>需求：将数组中的每一项翻倍。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [2,-4,6,8,-10]</span></span><br></pre></td></tr></table></figure>

<p>可以看到：<br><code>map()</code> 可以传入一个匿名回调函数作为参数，而该匿名函数有含有三个参数：</p>
<ol>
<li>数组遍历时的当前元素 <code>item</code>；</li>
<li>数组遍历时的当前元素的索引 <code>index</code>；</li>
<li>正在遍历的数组 <code>array</code>。</li>
</ol>
<p>该方法与 <code>forEach()</code> 的功能类似，只不过<code>map()</code> 具有返回值，会返回一个新的数组，这样处理数组后也不会影响到原有数组。</p>
<p>补充：方法除了传递一个匿名函数作为参数之外，还可以传第二个参数，该参数用于指定匿名函数内的 <code>this</code> 指向。</p>
<p>栗：单个参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只传一个匿名函数</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>栗：两个参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传两个参数</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, array</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// [1, -2, 3, 4, -5]</span></span><br><span class="line">&#125;, arr)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端原生</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>脚手架的开发（三）</title>
    <url>/cli_ui/</url>
    <content><![CDATA[<h1 id="如何实现命令行-UI-显示？"><a href="#如何实现命令行-UI-显示？" class="headerlink" title="如何实现命令行 UI 显示？"></a>如何实现命令行 UI 显示？</h1><h2 id="命令行渲染标准"><a href="#命令行渲染标准" class="headerlink" title="命令行渲染标准"></a>命令行渲染标准</h2><ul>
<li><a href="https://handwiki.org/wiki/:ANSI%20escape%20code">ANSI escape code</a></li>
</ul>
<h2 id="脚手架常用-UI-库"><a href="#脚手架常用-UI-库" class="headerlink" title="脚手架常用 UI 库"></a>脚手架常用 UI 库</h2><ul>
<li><a href="https://www.npmjs.com/package/chalk">chalk</a>: 颜色渲染<ul>
<li>基本用法</li>
<li>chalk-cli 各种使用技巧</li>
<li>源码阅读</li>
</ul>
</li>
<li><a href="https://www.npmjs.com/package/ora">ora</a>: loading 状态<ul>
<li>基本用法</li>
<li>cli-spinners</li>
<li>源码阅读</li>
</ul>
</li>
</ul>
<h3 id="chalk-的使用"><a href="#chalk-的使用" class="headerlink" title="chalk 的使用"></a>chalk 的使用</h3><p>安装 <code>chalk</code> 依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -S chalk</span><br></pre></td></tr></table></figure>

<p>新建 <code>ui/src/chalk.mjs</code> 文件，注意因为这里用 <code>ES</code> 模块引入，所以要使用 <code>.mjs</code> 创建文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> chalk, &#123; <span class="title class_">Chalk</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;chalk&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chalk.<span class="title function_">red</span>(<span class="string">&#x27;hello cli-ui 测试效果&#x27;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chalk.<span class="property">red</span>.<span class="property">bgGreen</span>.<span class="title function_">bold</span>(<span class="string">&#x27;HELLO CHENY&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">error</span> = (<span class="params">...text</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(chalk.<span class="property">bold</span>.<span class="title function_">hex</span>(<span class="string">&#x27;#ff0000&#x27;</span>)(text))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">warning</span> = (<span class="params">...text</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(chalk.<span class="property">bold</span>.<span class="title function_">hex</span>(<span class="string">&#x27;#ffa500&#x27;</span>)(text))</span><br><span class="line"></span><br><span class="line"><span class="title function_">error</span>(<span class="string">&#x27;Error!&#x27;</span>)</span><br><span class="line"><span class="title function_">warning</span>(<span class="string">&#x27;Warning!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 颜色为0 的时候 不显示颜色</span></span><br><span class="line"><span class="keyword">const</span> cusotmChalk = <span class="keyword">new</span> <span class="title class_">Chalk</span>(&#123; <span class="attr">level</span>: <span class="number">0</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cusotmChalk.<span class="title function_">blue</span>(<span class="string">&#x27;颜色显示不&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/blog/chalk.png" alt="cli ui" loading="lazy"></p>
<h3 id="chalk-cli-脚手架的使用"><a href="#chalk-cli-脚手架的使用" class="headerlink" title="chalk-cli 脚手架的使用"></a>chalk-cli 脚手架的使用</h3><p>安装 <code>chalk-cli</code> 依赖</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g chalk-cli</span><br></pre></td></tr></table></figure>

<p>安装后直接在命令行输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chalk -t <span class="string">&#x27;&#123;red.bold hello cheny&#125;&#x27;</span>   // 该句柄就为红色</span><br><span class="line">或</span><br><span class="line">chalk red bold hello cheny</span><br></pre></td></tr></table></figure>

<p>更多命令可以参考 <code>chalk-cli</code> <code>--help</code> 或 npm 包介绍</p>
<h3 id="ora-的使用"><a href="#ora-的使用" class="headerlink" title="ora 的使用"></a>ora 的使用</h3><p>安装 <code>ora</code> 依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install ora -S</span><br></pre></td></tr></table></figure>

<p>使其命令行具备 <code>loading</code> 效果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ora <span class="keyword">from</span> <span class="string">&#x27;ora&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> spinner = <span class="title function_">ora</span>(<span class="string">&#x27;Loading&#x27;</span>).<span class="title function_">start</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> percent = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">spinner.<span class="property">color</span> = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">spinner.<span class="property">text</span> = <span class="string">&#x27;Loading...&#x27;</span></span><br><span class="line">spinner.<span class="property">prefixText</span> = <span class="string">&#x27;Downloading chalk&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> task = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  percent += <span class="number">10</span></span><br><span class="line">  spinner.<span class="property">text</span> = <span class="string">&#x27;Loading...&#x27;</span> + percent + <span class="string">&#x27;%&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (percent === <span class="number">100</span>) &#123;</span><br><span class="line">    spinner.<span class="title function_">stop</span>()</span><br><span class="line">    spinner.<span class="title function_">succeed</span>(<span class="string">&#x27;Download finish!&#x27;</span>)</span><br><span class="line">    <span class="built_in">clearInterval</span>(task)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">300</span>)</span><br></pre></td></tr></table></figure>

<p>执行 <code>node src/ora.mjs</code></p>
<h2 id="inquirer-用法"><a href="#inquirer-用法" class="headerlink" title="inquirer 用法"></a>inquirer 用法</h2><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -S inquirer</span><br></pre></td></tr></table></figure>

<p>基本使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> inquirer <span class="keyword">from</span> <span class="string">&#x27;inquirer&#x27;</span></span><br><span class="line"></span><br><span class="line">inquirer</span><br><span class="line">  .<span class="title function_">prompt</span>([</span><br><span class="line">    <span class="comment">/* Pass your questions in here */</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;yourName&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;your name&#x27;</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;CHENY&#x27;</span>,</span><br><span class="line">      <span class="attr">validate</span>: <span class="function"><span class="params">v</span> =&gt;</span> v === <span class="string">&#x27;CHENY&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;number&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;num&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;your number&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Use user feedback for... whatever!!</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(answers)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">isTtyError</span>) &#123;</span><br><span class="line">      <span class="comment">// Prompt couldn&#x27;t be rendered in the current environment</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Something else went wrong</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>其他用法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> inquirer <span class="keyword">from</span> <span class="string">&#x27;inquirer&#x27;</span></span><br><span class="line"></span><br><span class="line">inquirer</span><br><span class="line">  .<span class="title function_">prompt</span>([</span><br><span class="line">    <span class="comment">/* Pass your questions in here */</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;checkbox&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;choice&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;your choice&#x27;</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">choices</span>: [</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">1</span>, <span class="attr">value</span>: <span class="string">&#x27;red&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">2</span>, <span class="attr">value</span>: <span class="string">&#x27;green&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">3</span>, <span class="attr">value</span>: <span class="string">&#x27;blue&#x27;</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Use user feedback for... whatever!!</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(answers)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>脚手架</category>
      </categories>
      <tags>
        <tag>前端脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>脚手架的开发（二）</title>
    <url>/cli_setup,/</url>
    <content><![CDATA[<h2 id="框架搭建脚手架"><a href="#框架搭建脚手架" class="headerlink" title="框架搭建脚手架"></a>框架搭建脚手架</h2><h3 id="为什么需要脚手架框架"><a href="#为什么需要脚手架框架" class="headerlink" title="为什么需要脚手架框架"></a>为什么需要脚手架框架</h3><ul>
<li>提升脚手架开发效率，大幅提升脚手架命令创建、修改的速度</li>
<li>简化脚手架开发过程，大幅提升代码的可读性和可维护性</li>
</ul>
<h3 id="常用的脚手架框架"><a href="#常用的脚手架框架" class="headerlink" title="常用的脚手架框架"></a>常用的脚手架框架</h3><ul>
<li><a href="https://www.npmjs.com/package/yargs">yargs</a><ul>
<li>周下载量 6000w+</li>
<li>案例：<ul>
<li><a href="https://github.com/gulpjs/gulp-cli/blob/master/package.json">gulp-cli</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="https://www.npmjs.com/package/commander">commander</a><ul>
<li>周下载量 8000w+</li>
<li>案例：<ul>
<li><a href="https://github.com/vuejs/vue-cli/blob/dev/packages/%40vue/cli/package.json">vue-cli</a></li>
<li><a href="https://github.com/webpack/webpack-cli/blob/master/packages/webpack-cli/package.json">webpack-cli</a></li>
<li><a href="https://github.com/facebook/create-react-app/blob/main/packages/create-react-app/package.json">create-react-app</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="https://www.npmjs.com/package/oclif">oclif</a><ul>
<li>脚手架生成器</li>
</ul>
</li>
</ul>
<h3 id="使用-yargs-搭建脚手架"><a href="#使用-yargs-搭建脚手架" class="headerlink" title="使用 yargs 搭建脚手架"></a>使用 yargs 搭建脚手架</h3><p>还在之前的项目 <code>cli-test</code> 目录，进入目录，安装 <code>yargs</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i yargs -S</span><br></pre></td></tr></table></figure>

<p>命令无需拼接换行输入，并可以取消缩进的一个插件包 <code>dedent</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -S dedent</span><br></pre></td></tr></table></figure>

<p><code>yargs</code> 的具体的使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> yargs = <span class="built_in">require</span>(<span class="string">&#x27;yargs/yargs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; hideBin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;yargs/helpers&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dedent = <span class="built_in">require</span>(<span class="string">&#x27;dedent&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arg = <span class="title function_">hideBin</span>(process.<span class="property">argv</span>) <span class="comment">// 拿到命令信息</span></span><br><span class="line"><span class="keyword">const</span> cli = <span class="title function_">yargs</span>(arg)</span><br><span class="line"></span><br><span class="line">cli</span><br><span class="line">  .<span class="title function_">usage</span>(<span class="string">&#x27;Usage: cli-test [command] &lt;options&gt;&#x27;</span>) <span class="comment">// 使用说明标题</span></span><br><span class="line">  .<span class="title function_">demandCommand</span>(<span class="number">1</span>, <span class="string">&#x27;最少输入一个命令&#x27;</span>) <span class="comment">// 命令输入限制提示</span></span><br><span class="line">  .<span class="title function_">strict</span>() <span class="comment">// 严格模式，不存在的命令会提示</span></span><br><span class="line">  .<span class="title function_">recommendCommands</span>() <span class="comment">// 命令输入错误后，找到类似的命令，进行提示</span></span><br><span class="line">  .<span class="title function_">alias</span>(<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;help&#x27;</span>) <span class="comment">// 别名</span></span><br><span class="line">  .<span class="title function_">alias</span>(<span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;version&#x27;</span>)</span><br><span class="line">  .<span class="title function_">epilogue</span>(<span class="title function_">dedent</span>(<span class="string">`底部的一行描述信息`</span>)) <span class="comment">// 底部信息，可以使用 dedent 插件</span></span><br><span class="line">  .<span class="title function_">options</span>(&#123;</span><br><span class="line">    <span class="comment">// 增加命令配置</span></span><br><span class="line">    <span class="attr">debug</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;boolean&#x27;</span>,</span><br><span class="line">      <span class="attr">describe</span>: <span class="string">&#x27;启动 debug&#x27;</span>,</span><br><span class="line">      <span class="attr">alias</span>: <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;regsitry&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 另一种增加命令配置的方式</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">    <span class="attr">describe</span>: <span class="string">&#x27;全局的地址&#x27;</span>,</span><br><span class="line">    <span class="attr">alias</span>: <span class="string">&#x27;r&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">group</span>([<span class="string">&#x27;debug&#x27;</span>], <span class="string">&#x27;开发选项&#x27;</span>)</span><br><span class="line">  .<span class="title function_">command</span>(</span><br><span class="line">    <span class="comment">// 也可以通过这种方式追加命令</span></span><br><span class="line">    <span class="string">&#x27;init [name]&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;项目初始化&#x27;</span>,</span><br><span class="line">    <span class="function">(<span class="params">yargs</span>) =&gt;</span> &#123;</span><br><span class="line">      yargs.<span class="title function_">option</span>(<span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">        <span class="attr">describe</span>: <span class="string">&#x27;项目名称&#x27;</span>,</span><br><span class="line">        <span class="attr">alias</span>: <span class="string">&#x27;n&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">argv</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;argv ==&gt;&#x27;</span>, argv)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">command</span>(&#123;</span><br><span class="line">    <span class="comment">// 甚至可以通过这种方式追加</span></span><br><span class="line">    <span class="attr">command</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">    <span class="attr">aliases</span>: [<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;la&#x27;</span>, <span class="string">&#x27;ll&#x27;</span>],</span><br><span class="line">    <span class="attr">describe</span>: <span class="string">&#x27;list 命令的描述信息&#x27;</span>,</span><br><span class="line">    <span class="attr">builder</span>: <span class="function">(<span class="params">yargs</span>) =&gt;</span> &#123;&#125;,</span><br><span class="line">    <span class="attr">handler</span>: <span class="function">(<span class="params">argv</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn argv =&gt;&#x27;</span>, argv)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;).<span class="property">argv</span> <span class="comment">// 分组命令</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-Commander-开发脚手架"><a href="#使用-Commander-开发脚手架" class="headerlink" title="使用 Commander 开发脚手架"></a>使用 Commander 开发脚手架</h3><p>还在之前的项目 <code>cli-test</code> 目录，进入目录，安装 <code>commander</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i commander -S</span><br></pre></td></tr></table></figure>

<p><code>commander</code> 的具体的使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Command</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;commander&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> pkg = <span class="built_in">require</span>(<span class="string">&#x27;../package.json&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 commander 的单例</span></span><br><span class="line"><span class="comment">// const &#123;   &#125; = commander</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动实例化一个 commander 示栗</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="keyword">new</span> <span class="title class_">Command</span>()</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .<span class="title function_">name</span>(pkg.<span class="property">name</span>)</span><br><span class="line">  .<span class="title function_">usage</span>(<span class="string">&#x27;Hi bro help me cli-test study&#x27;</span>)</span><br><span class="line">  .<span class="title function_">version</span>(pkg.<span class="property">version</span>)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;-d, --debug&#x27;</span>, <span class="string">&#x27;是否开启调试模式&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;-e, --env &lt;envName&gt;&#x27;</span>, <span class="string">&#x27;获取环境变量名称&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// program</span></span><br><span class="line"><span class="comment">//   .command(&#x27;split&#x27;)</span></span><br><span class="line"><span class="comment">//   .description(&#x27;Look, use split as a command character&#x27;)</span></span><br><span class="line"><span class="comment">//   .argument(&#x27;&lt;string&gt;&#x27;, &#x27;string to split&#x27;)</span></span><br><span class="line"><span class="comment">//   .option(&#x27;--first&#x27;, &#x27;display just the first substring&#x27;)</span></span><br><span class="line"><span class="comment">//   .option(&#x27;-s, --separator &lt;char&gt;&#x27;, &#x27;separator character&#x27;, &#x27;,&#x27;)</span></span><br><span class="line"><span class="comment">//   .action((str, options) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     const limit = options.first ? 1 : undefined</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;===&gt;&#x27;, str.split(options.separator, limit))</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册命令</span></span><br><span class="line"><span class="keyword">const</span> clone = program.<span class="title function_">command</span>(<span class="string">&#x27;clone &lt;source&gt; [destination]&#x27;</span>) <span class="comment">// 参数约定和要求</span></span><br><span class="line"></span><br><span class="line">clone</span><br><span class="line">  .<span class="title function_">description</span>(<span class="string">&#x27;Look, is clone&#x27;</span>)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;-f, --first&#x27;</span>, <span class="string">&#x27;是否强制克隆&#x27;</span>)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;-s, --separator &lt;char&gt;&#x27;</span>, <span class="string">&#x27;separator character&#x27;</span>, <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  .<span class="title function_">action</span>(<span class="function">(<span class="params">source, destination</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;do clone&#x27;</span>, source, destination))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意 这个命令不要链式去写</span></span><br><span class="line">program.<span class="title function_">parse</span>(process.<span class="property">argv</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>脚手架</category>
      </categories>
      <tags>
        <tag>前端脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 CloudBase 实现静态博客评论 （一）</title>
    <url>/cloudbase_comment/</url>
    <content><![CDATA[<p>使用 CloudBase 给静态博客添加评论功能。</p>
<span id="more"></span>

<h2 id="申请-CloudBase"><a href="#申请-CloudBase" class="headerlink" title="申请 CloudBase"></a>申请 CloudBase</h2><p>新建CloudBase环境</p>
<p><img src="/images/posts/cloudbase/20200615242451.png" alt="" loading="lazy"></p>
<p>选中包年包月，选择基础版1 (或者选择按量计费，开启免费额度)</p>
<p><img src="/images/posts/cloudbase/20200615232440.png" alt="" loading="lazy"></p>
<p>在安全配置-&gt;Web安全域名 将自己得域名添加进去</p>
<p><img src="/images/posts/cloudbase/20200615234334.png" alt="" loading="lazy"></p>
<h2 id="评论大致流程"><a href="#评论大致流程" class="headerlink" title="评论大致流程"></a>评论大致流程</h2><p><img src="/images/posts/cloudbase/20200615221122.png" alt="" loading="lazy"></p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;唯一ID&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;articleID&quot;</span><span class="punctuation">:</span><span class="string">&quot;文章ID&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nick&quot;</span><span class="punctuation">:</span><span class="string">&quot;昵称&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;邮箱&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;链接&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span><span class="string">&quot;时间&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;评论内容&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;top&quot;</span><span class="punctuation">:</span><span class="string">&quot;置顶&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;childer&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;唯一ID&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;nick&quot;</span><span class="punctuation">:</span><span class="string">&quot;昵称&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;邮箱&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;链接&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span><span class="string">&quot;时间&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;评论内容&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;at&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="comment">//回复</span></span><br><span class="line">                <span class="attr">&quot;nick&quot;</span><span class="punctuation">:</span><span class="string">&quot;昵称&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;邮箱&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;唯一ID&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;nick&quot;</span><span class="punctuation">:</span><span class="string">&quot;昵称&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;邮箱&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;链接&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span><span class="string">&quot;时间&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;评论内容&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;at&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;nick&quot;</span><span class="punctuation">:</span><span class="string">&quot;昵称&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;邮箱&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<h2 id="CloudBase-开发"><a href="#CloudBase-开发" class="headerlink" title="CloudBase 开发"></a>CloudBase 开发</h2><p>在 VS Code  安装 tencentcloud.cloudbase-toolkit 插件，直接在 VS Code 上去创建、编写、部署。<a href="https://www.cloudbase.net/">参考地址</a><br>常用操作。<br><img src="/images/posts/cloudbase/20200616162909.png" alt="" loading="lazy"></p>
<h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><p>在数据库新增两个集合 article,comments 。<br><img src="/images/posts/cloudbase/20200616162356.png" alt="" loading="lazy"></p>
<h3 id="云函数"><a href="#云函数" class="headerlink" title="云函数"></a>云函数</h3><p>目前云函数支持 Node，PHP，Python 三种，本文使用 Node 为云函数环境</p>
<h4 id="获取文章ID"><a href="#获取文章ID" class="headerlink" title="获取文章ID"></a>获取文章ID</h4><p>新建一个云函数 GetArticleID,代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> tcb = <span class="built_in">require</span>(<span class="string">&#x27;tcb-admin-node&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = tcb.<span class="title function_">init</span>(&#123; <span class="attr">env</span>: <span class="string">&#x27;环境ID&#x27;</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> db = app.<span class="title function_">database</span>();</span><br><span class="line"><span class="keyword">const</span> articleDb = db.<span class="title function_">collection</span>(<span class="string">&#x27;article&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; hash, url &#125; = event;</span><br><span class="line">        <span class="comment">//根据 hash 获取 article id</span></span><br><span class="line">        <span class="keyword">let</span> &#123; data &#125; = <span class="keyword">await</span> articleDb.<span class="title function_">field</span>(&#123; <span class="attr">_id</span>: <span class="number">1</span> &#125;).<span class="title function_">where</span>(&#123; hash &#125;).<span class="title function_">get</span>();</span><br><span class="line">        <span class="keyword">let</span> articleID = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//不存在  新增一条 article 数据</span></span><br><span class="line">            <span class="keyword">let</span> &#123; id &#125; = <span class="keyword">await</span> articleDb.<span class="title function_">add</span>(&#123; <span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(), url, hash, &#125;)</span><br><span class="line">            articleID = id;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123; _id &#125; = data[<span class="number">0</span>]</span><br><span class="line">            articleID = _id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">success</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">data</span>: articleID</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">data</span>: error</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取评论列表"><a href="#获取评论列表" class="headerlink" title="获取评论列表"></a>获取评论列表</h4><p>新建一个云函数 GetComments，代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> tcb = <span class="built_in">require</span>(<span class="string">&#x27;tcb-admin-node&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = tcb.<span class="title function_">init</span>(&#123; <span class="attr">env</span>:<span class="string">&quot;环境ID&quot;</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> db = app.<span class="title function_">database</span>();</span><br><span class="line"><span class="keyword">const</span> _ = db.<span class="property">command</span>;</span><br><span class="line"><span class="keyword">const</span> $ = _.<span class="property">aggregate</span>;</span><br><span class="line"><span class="keyword">const</span> commentsDB = db.<span class="title function_">collection</span>(<span class="string">&#x27;comments&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; pagesize, articleID = <span class="string">&#x27;&#x27;</span> &#125; = event;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(<span class="built_in">parseInt</span>(pagesize)) || pagesize &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> &#123; <span class="attr">data</span>: list &#125; = <span class="keyword">await</span> commentsDB</span><br><span class="line">        .<span class="title function_">aggregate</span>()</span><br><span class="line">        <span class="comment">//查询条件</span></span><br><span class="line">        .<span class="title function_">match</span>(&#123; articleID &#125;)</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        .<span class="title function_">sort</span>(&#123;</span><br><span class="line">            <span class="attr">top</span>: -<span class="number">1</span>,</span><br><span class="line">            <span class="attr">date</span>: -<span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//分页</span></span><br><span class="line">        .<span class="title function_">skip</span>((pagesize - <span class="number">1</span>) * <span class="number">10</span>)</span><br><span class="line">        .<span class="title function_">limit</span>(<span class="number">10</span>)</span><br><span class="line">        <span class="comment">//指定需要查询字段</span></span><br><span class="line">        .<span class="title function_">project</span>(&#123;</span><br><span class="line">            <span class="attr">_id</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">id</span>: <span class="string">&quot;$_id&quot;</span>,</span><br><span class="line">            <span class="attr">articleID</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">nick</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">link</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">date</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">content</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">top</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">childer</span>: &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">nick</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">link</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">date</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">content</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">at</span>: &#123;</span><br><span class="line">                    <span class="attr">nick</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">link</span>: <span class="number">1</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">end</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="新增、回复"><a href="#新增、回复" class="headerlink" title="新增、回复"></a>新增、回复</h4><p>新建一个云函数 AddComment，代码如下<br>使用 nodemailer 来发送邮件通知，nodemailer <a href="https://nodemailer.com/about/">参考文档</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> tcb = <span class="built_in">require</span>(<span class="string">&#x27;tcb-admin-node&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">&#x27;nodemailer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> uuid = <span class="built_in">require</span>(<span class="string">&#x27;node-uuid&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = tcb.<span class="title function_">init</span>(&#123; <span class="attr">env</span>:<span class="string">&quot;环境ID&quot;</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> db = app.<span class="title function_">database</span>();</span><br><span class="line"><span class="keyword">const</span> _ = db.<span class="property">command</span>;</span><br><span class="line"><span class="keyword">const</span> $ = _.<span class="property">aggregate</span></span><br><span class="line"><span class="keyword">const</span> comments = db.<span class="title function_">collection</span>(<span class="string">&#x27;comments&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//邮件配置</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;smtp.qq.com&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">465</span>,</span><br><span class="line">    <span class="attr">secure</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">auth</span>: &#123;</span><br><span class="line">        <span class="attr">user</span>: <span class="string">&#x27;邮箱@xx.com&#x27;</span>,</span><br><span class="line">        <span class="attr">pass</span>: <span class="string">&#x27;密码或者授权码&#x27;</span> <span class="comment">//推荐使用授权码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> transporter = nodemailer.<span class="title function_">createTransport</span>(config);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">main</span> = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; articleID = <span class="string">&#x27;&#x27;</span>, url = <span class="string">&#x27;&#x27;</span>,  nick = <span class="string">&#x27;Anonymous&#x27;</span>, email = <span class="string">&#x27;&#x27;</span>, link = <span class="string">&#x27;&#x27;</span>, content = <span class="string">&#x27;&#x27;</span>, at = <span class="literal">false</span>, istop = <span class="literal">true</span>, topID = <span class="string">&#x27;&#x27;</span>, userID = <span class="string">&#x27;&#x27;</span> &#125; = event;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (content == <span class="string">&#x27;&#x27;</span> || articleID == <span class="string">&#x27;&#x27;</span> || (!istop &amp;&amp; topID == <span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">success</span>: <span class="literal">false</span>, <span class="attr">data</span>: <span class="string">&#x27;数据格式有误&#x27;</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> par = &#123; userID, articleID, content, url, nick, email, link, at, istop, date &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (at) &#123;</span><br><span class="line">        par.<span class="property">id</span>= uuid.<span class="title function_">v1</span>().<span class="title function_">replace</span>(<span class="regexp">/\-/g</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> comments.<span class="title function_">where</span>(&#123; <span class="attr">_id</span>: topID &#125;).<span class="title function_">update</span>(&#123; <span class="attr">childer</span>: _.<span class="title function_">push</span>([par]) &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> _atemail = <span class="keyword">await</span> <span class="title function_">getEmailByID</span>(at.<span class="property">id</span>);</span><br><span class="line">        <span class="keyword">if</span> (!!_atemail &amp;&amp; _atemail != email) &#123;</span><br><span class="line">            <span class="title function_">sendemail</span>(_atemail, nick, content)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">success</span>: <span class="literal">true</span>, <span class="attr">data</span>: &#123; date &#125; &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; code = <span class="literal">false</span>, message, id &#125; = <span class="keyword">await</span> comments.<span class="title function_">add</span>(par)</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">success</span>: !code, <span class="attr">data</span>: !code ? &#123; id, date &#125; : message &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*根据回复id获取 对应人 邮箱</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getEmailByID</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; data &#125; = <span class="keyword">await</span> comments.<span class="title function_">where</span>(&#123; <span class="attr">_id</span>: id &#125;).<span class="title function_">get</span>()</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; data &#125; = <span class="keyword">await</span> comments</span><br><span class="line">            .<span class="title function_">aggregate</span>()</span><br><span class="line">            .<span class="title function_">match</span>(&#123; <span class="string">&#x27;childer.id&#x27;</span>: id &#125;)</span><br><span class="line">            .<span class="title function_">project</span>(&#123;</span><br><span class="line">                <span class="attr">_id</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">item</span>: $.<span class="title function_">filter</span>(&#123;</span><br><span class="line">                    <span class="attr">input</span>: <span class="string">&#x27;$childer&#x27;</span>,</span><br><span class="line">                    <span class="attr">as</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">                    <span class="attr">cond</span>: $.<span class="title function_">eq</span>([<span class="string">&#x27;$$item.id&#x27;</span>, id])</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">end</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="property">length</span> &gt; <span class="number">0</span>) <span class="keyword">return</span> data[<span class="number">0</span>].<span class="property">item</span>[<span class="number">0</span>].<span class="property">email</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data[<span class="number">0</span>].<span class="property">email</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * email 收件人邮箱</span></span><br><span class="line"><span class="comment"> * nick 评论人昵称</span></span><br><span class="line"><span class="comment"> * content 评论类容</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">sendemail</span>(<span class="params">email, nick, content</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">`<span class="subst">$&#123;date.getFullYear()&#125;</span>年<span class="subst">$&#123;date.getMonth() + <span class="number">1</span>&#125;</span>月<span class="subst">$&#123;date.getDate()&#125;</span>日 <span class="subst">$&#123;date.getHours()&#125;</span>时<span class="subst">$&#123;date.getMinutes()&#125;</span>分<span class="subst">$&#123;date.getSeconds()&#125;</span>秒`</span>;</span><br><span class="line">    <span class="keyword">let</span> mail = &#123;</span><br><span class="line">        <span class="attr">from</span>: <span class="string">&#x27;Cheny &lt;ycyplus@gmail.com&gt;&#x27;</span>,</span><br><span class="line">        <span class="attr">subject</span>: <span class="string">&#x27;[Cheny][博客] 收到新的回复&#x27;</span>,</span><br><span class="line">        <span class="attr">to</span>: email,</span><br><span class="line">        <span class="attr">html</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;h2&gt;<span class="subst">$&#123;nick&#125;</span> <span class="subst">$&#123;str&#125;</span> 回复了您&lt;h2&gt;</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;content&#125;</span></span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> transporter.<span class="title function_">sendMail</span>(mail);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="web-端"><a href="#web-端" class="headerlink" title="web 端"></a>web 端</h2><p>对 tcb 做一个简单封装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">tcbComment</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">env, hash</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!env) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;未设置CloudBase环境id:env&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!hash) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;未设置当前Comment的hash值&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">env</span> = env;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">skip</span> = <span class="number">1</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hash</span> = hash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">_init</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> tcb = <span class="keyword">await</span> <span class="title class_">TcbLoader</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">app</span> = tcb.<span class="title function_">init</span>(&#123; <span class="attr">env</span>: <span class="variable language_">this</span>.<span class="property">env</span> &#125;);</span><br><span class="line">        <span class="keyword">let</span> auth = <span class="variable language_">this</span>.<span class="property">app</span>.<span class="title function_">auth</span>(&#123;</span><br><span class="line">            <span class="attr">persistence</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (!auth.<span class="title function_">hasLoginState</span>()) &#123;</span><br><span class="line">            <span class="keyword">await</span> auth.<span class="title function_">anonymousAuthProvider</span>().<span class="title function_">signIn</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getArticleID</span>(<span class="variable language_">this</span>.<span class="property">hash</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getArticleID</span>(<span class="params">hash</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="title function_">callFunction</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;getArticleID&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                hash,</span><br><span class="line">                <span class="attr">url</span>: location.<span class="property">pathname</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">let</span> &#123; <span class="attr">result</span>: &#123; success, data &#125; &#125; = res;</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">articleID</span> = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取评论列表</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getComment</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="title function_">callFunction</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;getComments&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">pagesize</span>: <span class="variable language_">this</span>.<span class="property">skip</span>++,</span><br><span class="line">                <span class="attr">articleID</span>: <span class="variable language_">this</span>.<span class="property">articleID</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> res.<span class="property">result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">addComment</span>(<span class="params">parm</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="title function_">callFunction</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;addComment&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">articleID</span>: <span class="variable language_">this</span>.<span class="property">articleID</span>,</span><br><span class="line">                ...parm</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 加载tcb-js-jdk</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TcbLoader</span> = <span class="keyword">function</span> (<span class="params">v = <span class="string">&#x27;1.6.0&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">tcb</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="variable language_">window</span>.<span class="property">tcb</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">            script.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span></span><br><span class="line">            script.<span class="property">async</span> = <span class="literal">true</span></span><br><span class="line">            script.<span class="property">src</span> = <span class="string">`//imgcache.qq.com/qcloud/tcbjs/<span class="subst">$&#123;v&#125;</span>/tcb.js`</span></span><br><span class="line">            script.<span class="property">onerror</span> = reject</span><br><span class="line">            script.<span class="property">onload</span> = <span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="variable language_">window</span>.<span class="property">tcb</span>)</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>弄完cloudbase 云函数，和对 web 端简单使用封装，剩下得就是页面上弄个评论列表组件和评论组件了</p>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>关于重写评论插件这件事</title>
    <url>/cloudbase_comment_two/</url>
    <content><![CDATA[<p>因为以前使用的评论插件存在很多 bug 和漏洞，但是也没啥人用，一直没有去修改，最近空闲时间比较多，所以准备对之前插件进行重构一番。原评论插件是使用原生 JS 编写 WebComponents 组件，感觉结构维护起来挺费力的(自己太菜)，决定使用 Vue3 构建 WebComponents 。</p>
<span id="more"></span>

<h2 id="已支持功能"><a href="#已支持功能" class="headerlink" title="已支持功能"></a>已支持功能</h2><ul>
<li>支持回复</li>
<li>支持插入表情（可禁用）</li>
<li>支持 Ctrl + Enter 快捷回复</li>
<li>评论框内容实时保存草稿，刷新不会丢失</li>
<li>支持私密评论（可禁用）</li>
<li>隐私信息安全（通过云函数控制敏感字段（邮箱、IP、环境配置等）不会泄露）</li>
<li>支持人工审核模式</li>
<li>防 XSS 注入</li>
<li>支持限制每个 IP 每 10 分钟最多发表多少条评论</li>
<li>支持邮件提醒（访客和博主）, 可扩展三方通知方式</li>
<li>支持自定义“博主”标识文字</li>
<li>支持自定义通知邮件模板</li>
<li>支持自定义【昵称】【邮箱】【网址】必填 / 选填</li>
<li>支持自定义代码高亮主题</li>
<li>支持自定义配置主题 (使用 css 变量)</li>
<li>通过邮箱登录快捷回复管理</li>
<li>内嵌式管理面板，通过邮箱登录，可方便地查看评论、回复评论、删除评论、修改配置、站点统计信息</li>
</ul>
<h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><h3 id="组件样式问题"><a href="#组件样式问题" class="headerlink" title="组件样式问题"></a>组件样式问题</h3><p>vue-loader 在 customElement 模式下，当使用子组件时候，并不会将子组件样式插入到 shadow-root 里，默认只有父组件的样式，需要我们自己处理下。<a href="https://www.yangchenyu.com/vue_web_components">参考这里</a></p>
<h3 id="style-和-svg-问题"><a href="#style-和-svg-问题" class="headerlink" title="style 和 svg 问题"></a>style 和 svg 问题</h3><p>直接使用打包后都是默认插入到 dom 里的，而没有插入到 customElement 需要我们对这里插入的数据进行一些处理。css 可以配合使用 to-string-loader 在挂载时候手工插入，svg 处理方法也类似这样。</p>
<h3 id="contenteditable-光标问题"><a href="#contenteditable-光标问题" class="headerlink" title="contenteditable 光标问题"></a>contenteditable 光标问题</h3><p>使用 contenteditable 作为输入框时，当需要插入表情或者粘贴文本到光标处时候，需要存储光标信息，但是在 Can I Use 上看到 ShadowRoot Api: getSelection 的兼容性，可以看到除了 chromium 其他几乎都是不支持的。</p>
<h3 id="弹出层问题"><a href="#弹出层问题" class="headerlink" title="弹出层问题"></a>弹出层问题</h3><p>当在 customElement 里实现 Popover 组件，点击其他区域需要关闭弹出层时候，一般情况下我们都是判断当前点击事件触发对象 (target) 是不是我们 Popover 本身来决定我们是否关闭，但是当我们点击在 customElement 上时候 document 事件的 target 是自定义元素本身，不会到自定义元素内部去，所以我们需要在 customElement 和 document 都做一个监听。</p>
<h3 id="跨-customElement-数据共享问题"><a href="#跨-customElement-数据共享问题" class="headerlink" title="跨 customElement 数据共享问题"></a>跨 customElement 数据共享问题</h3><p>在评论插件里，com-a(评论组件) 和 com-b(评论管理组件) 是使用的两个 <strong>自定义元素</strong>，但我们在 com-a 登录后，在使用 com-b 也需要有登录状态，这时候我们可能需要共享登录信息。</p>
<p>如果我们是用 js 去编写 customElement 去共享数据是很麻烦的事，还好在 vue3 还是比较好解决的，可以使用 <strong>reactive</strong> 去实现一个简易 store 去共享数据，实现一个 customElement 修改数据多个地方同时修改。</p>
<p>示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="comment">// 用户</span></span><br><span class="line">    <span class="attr">user</span>: <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">data</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

<h3 id="给-customElement-添加方法"><a href="#给-customElement-添加方法" class="headerlink" title="给 customElement 添加方法"></a>给 customElement 添加方法</h3><p>vue3 提供 <strong>defineCustomElement</strong> 是没有将可以将函数暴露到 customElement 上的，只能通过元素上的 <strong>_instance</strong> (vue 创建 customElement 创建实例) 去调用，需要我们自己对 <strong>defineCustomElement</strong> 做下改造。<a href="https://www.yangchenyu.com/vue_web_components">参考这里</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>重构过程中，发现坑还是挺多的，还好大部分还是有解决方法的。重写服务端时候，发现腾讯云云开发的数据库文档还是挺坑的，一些 MongDB 操作在里面也没有，调试也很麻烦。</p>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>css 实现网页灰度</title>
    <url>/css_filter/</url>
    <content><![CDATA[<p>今天为表达全国各族人民对抗击新冠肺炎疫情斗争牺牲烈士和逝世同胞的深切哀悼，各大网站也纷纷将界面弄成黑白以示哀悼。</p>
<span id="more"></span>
<p>实现网页黑白办法其实很简单，只需要设置 filter 滤镜为 grayscale 就可以了。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">     <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>); </span><br><span class="line">    -webkit-<span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>常用几个值<br>grayscale ：将图像转换为灰度图像。<br>blur：可以实现高斯模糊效果。<br>Saturate ：设置饱和度。<br>Invert : 颜色反转。<br>Contrast  ：设置对比度。</p>
<style>
    html{
         filter: grayscale(100%); 
        -webkit-filter: grayscale(100%); 
        -moz-filter: grayscale(100%); 
        -ms-filter: grayscale(100%); 
        -o-filter: grayscale(100%); 
        -webkit-filter: grayscale(1);
    }
</style>]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>编码七宗罪与技术债务</title>
    <url>/debt/</url>
    <content><![CDATA[<p>代码不规范，伙伴泪汪汪，请务必要求自己遵守开发规范，莫要误人误己！</p>
<h2 id="编码七宗罪"><a href="#编码七宗罪" class="headerlink" title="编码七宗罪"></a>编码七宗罪</h2><p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/img/20230320223805.png" alt="编码七宗罪" loading="lazy"></p>
<h2 id="为什么要重视技术债务？"><a href="#为什么要重视技术债务？" class="headerlink" title="为什么要重视技术债务？"></a>为什么要重视技术债务？</h2><p>那么问题来了，为什么要重视技术债务呢？或者说，烂代码会有什么问题呢？</p>
<p>从用户的角度来说，技术债务的多少好像并不影响用户的直观体验，说白了就是不耽误使用，应该有的功能都很正常。那么比如说，既然 2 天开发的系统，和 1 周开发的系统，从使用的角度来说并没有什么区别，那是不是就意味着，理应选择时间成本更低的方案呢？</p>
<p>显然没有这么简单。举个例子，一个人出门时衣着得体，但是家里却乱成一团，找点东西总是要花很长时间，这当然不是什么值得骄傲的事情。对于软件来说，也是如此。技术债务最直接的影响就是内部代码质量的高低。如果软件内部质量很差，会带来 3 个方面的影响：</p>
<ol>
<li><p>额外的研发成本<br>对一个架构清晰、代码规范、逻辑有序、注释全面的系统来说，新增一个特性可能只需要 1 ～ 2 天时间。但是，同样的需求，在一个混乱的代码里面，可能要花上 1 周甚至是更长的时间。因为，单是理解原有代码的逻辑、理清调用关系、把所有潜在的坑趟出来就不是件容易的事情。更何况还有大量重复的代码，每个地方都要修改一遍，一不小心就会出问题。</p>
</li>
<li><p>不稳定的产品质量<br>代码质量越差，修改问题所带来的影响可能就越大，因为你不知道改了一处内容，会在哪个边缘角落引发异常问题。而且，这类代码往往也没有可靠的测试案例，能够保证修改前和修 改后的逻辑是正确的。如果新增一个功能，导致了严重的线上问题，这时就要面临是继续修改还是回滚的选择问题。因为如果继续修改，可能会越错越多，就像一个无底洞一样，怎么都填不满。</p>
</li>
<li><p>难以维护的产品<br>正是由于以上这些问题，研发人员在维护这种代码的时候往往是小心加谨慎，生怕出问题。这样一来，研发人员宁愿修修补补，也不愿意改变原有的逻辑，这就会导致代码质量陷入一种不断变坏的向下螺旋，越来越难以维护，问题越积累越多，直到再也没办法维护的那一天，就以重构的名义，推倒重来。其实这压根就不是重构，而是重写。另外，如果研发团队整天跟这样的项目打交道，团队的学习能力和工作积极性都有可能受到影响。可见，技术债务的积累就像真的债务一样，属于“出来混，迟早要还”的那种，只不过是谁来还的问题而已。<br>技术债务导图。</p>
</li>
</ol>
<p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/img/20230320224155.png" alt="技术债务" loading="lazy"></p>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>技术债务</tag>
      </tags>
  </entry>
  <entry>
    <title>css 实现换肤几种方式</title>
    <url>/css_theme/</url>
    <content><![CDATA[<p>说起换肤功能，前端肯定不陌生，其实就是颜色值的更换，实现方式有很多，也各有优缺点。</p>
<span id="more"></span>

<h2 id="一、可供选择的换肤"><a href="#一、可供选择的换肤" class="headerlink" title="一、可供选择的换肤"></a>一、可供选择的换肤</h2><p>对于只提供几种主题方案，让用户来选择的，一般就简单粗暴的写多套主题。</p>
<ul>
<li>一个全局 class 控制样式切换，直接更改全局class</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&#x27;dark&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用js去修改 link 的 href</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">id</span>=<span class="string">&#x27;link_theme&#x27;</span>  <span class="attr">href</span>=<span class="string">&quot;skin.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;link_theme&#x27;</span>).<span class="property">href</span>=<span class="string">&#x27;skin-dark.css&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="二、动态色值换肤的实现"><a href="#二、动态色值换肤的实现" class="headerlink" title="二、动态色值换肤的实现"></a>二、动态色值换肤的实现</h2><ul>
<li>全局替换颜色值<br>可以参看 <a href="https://elementui.github.io/theme-preview/#/zh-CN">Element-UI</a> 的换肤实现，就是先把样式中颜色全部替换后在塞到&lt;style&gt;标签里面。</li>
<li>使用 less 的 modifyVars 动态修改<br>modifyVars 方法是是基于 less 在浏览器中的编译来实现。所以在引入 less 文件的时候需要通过 link 方式引入，然后基于 less.js 中的方法来进行修改变量。</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// styles.less</span></span><br><span class="line"><span class="variable">@color:</span> red;</span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet/less&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.less&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/less&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">        card</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;themeBtn&quot;</span>&gt;</span>更改颜色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;themeBtn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> color = <span class="string">&#x27;#&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">256</span> * <span class="number">1000000000</span>).<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">6</span>)</span></span><br><span class="line"><span class="language-javascript">        less.<span class="title function_">modifyVars</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;@color&#x27;</span>: color</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`color: <span class="subst">$&#123;color&#125;</span>F`</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>css 变量(var)</li>
</ul>
<p>css 原生变量 <a href="https://www.caniuse.com/#search=--var">兼容性</a>,大部分主流浏览器还是支持的，而且主要是操作起来够简便。</p>
<p>定义变量</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 加上前缀 -- 就可以了 </span><br><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">    <span class="attr">--color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line">//使用 当<span class="attr">--color</span> 不生效的时候会使用后面参数替代</span><br><span class="line"><span class="selector-tag">body</span>:&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="built_in">var</span>(--color,<span class="number">#000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 js 去修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取根</span></span><br><span class="line"><span class="keyword">let</span> root = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line">root.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;--color&#x27;</span>, <span class="string">&#x27;#f00&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>如果需要动态替换颜色主题，使用第二种比较合适也方便.如果每套主题有很大差异性不仅仅只是颜色的替换，第一种的方式就好了很多，使用第二种就不太合适了.如果都需要满足也可以两种相结合使用。</p>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>项目上线部署发布流程</title>
    <url>/deployment/</url>
    <content><![CDATA[<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>规范项目和产品的上线流程，建立和完善产品的版本控制，保证软件产品质量。</p>
<h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><p>适用于所有软件项目和产品。</p>
<h3 id="发布人员"><a href="#发布人员" class="headerlink" title="发布人员"></a>发布人员</h3><ul>
<li>开发环境由开发人员内部负责（包括维护和管理开发分支和 git 代码库）。</li>
<li>测试环境由测试人员负责。</li>
<li>UAT 灰目前没有暂不考虑。</li>
<li>正式生产环境由项目经理各环节确认清楚后构建发布（后期交付运维验收发布）。</li>
<li>数据库操作由后端组长统一负责（可交付运维或大数据）。</li>
</ul>
<h3 id="发布流程"><a href="#发布流程" class="headerlink" title="发布流程"></a>发布流程</h3><ol>
<li><p>提交测试<br>开发人员在功能开发过程中做好功能自测，数据自测，功能开发完成后做好前后联测，前后联通自测无问题后进行 showCase 冒烟测试，而后将系统部署到测试环境。<br>测试人员根据模块功能选择测试方案，测试用例，特别处理边界异常测试。<br>测试人员测试不可擅改数据库信息，如有需要由开发配合处理。<br>记录各种数据测试结果及测试问题，测试问题及时提交禅道做好回归确认，该点须生成相关测试结果报告。<br>用户验证测试（如果需要）。</p>
</li>
<li><p>预热发布<br>测试人员在测试环境测试并跟踪修改 bug 达到上限标准（没有 1、2 级 bug，3 级 bug 达到要求）。<br>如达到上线标准，测试人员发起邮件通知相关开发人员，产品人员，准备正式上线发布流程，提交最终测试结果报告，产品验收通过，要求项目经理走上线审批。</p>
</li>
<li><p>正式发布<br>上线审批通过后，由项目经理点击上线构建按钮，研发群告知当前版本/迭代上线模块/内容。<br>发布完成后，产品经理告知业务方进行生产使用，线上压测，产品经理持续跟踪反馈，如若出现问题不能短时间内解决，执行回滚方案，并进行迭代改进。<br>紧急 bug 修改走补丁 / hotfix 流程，不影响功能的 bug 在下个迭代中一次解决，项目/产品经理做好相关记录，测试做好相关的监督跟进。</p>
</li>
<li><p>应用服务监控<br>通过系统内部添加的应用服务监控和新增云主机的系统监控及开发的分析插件进行持续使用情况关注跟踪。<br>产品对相关业务方保持上线后正式生产系统进行有计划的监控服务和功能的可用性以及软件性能方面，追踪反馈，及时发现问题并快速处理反馈问题。</p>
</li>
<li><p>总结报告<br>上线成功后，撰写或总结系统需求，架构及开发文档进行更新备案。</p>
</li>
</ol>
<blockquote>
<p>满足上线要求后，提交上线审批，上线审批需满足三个情况</p>
</blockquote>
<ul>
<li>当前迭代功能使用操作说明书完成。</li>
<li>测试报告完成，明确影响范围，达到上线标准。</li>
<li>环境部署已到位，紧急应急情况具备回滚能力。</li>
</ul>
<p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/blog/20230320101318.png" alt="项目部署上线流程" loading="lazy"></p>
<p><img src="https://cheny-chenyu.oss-cn-chengdu.aliyuncs.com/blog/20230320101454.png" alt="项目部署上线流程" loading="lazy"></p>
]]></content>
      <categories>
        <category>管理类</category>
      </categories>
      <tags>
        <tag>技术管理</tag>
      </tags>
  </entry>
  <entry>
    <title>前端的设计模式</title>
    <url>/design_pattern/</url>
    <content><![CDATA[<p>之前梳理的关于设计模式在前端的几个用栗。</p>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示栗一：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;init&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fun1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;f1&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fun2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;f2&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Creator</span> &#123;</span><br><span class="line">  <span class="title function_">create</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Product</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> creator = <span class="keyword">new</span> <span class="title class_">Creator</span>()</span><br><span class="line"><span class="keyword">let</span> p = creator.<span class="title function_">create</span>(<span class="string">&#x27;p1&#x27;</span>)</span><br><span class="line">p.<span class="title function_">init</span>()</span><br><span class="line">p.<span class="title function_">fun1</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示栗二：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Checks</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">cheackA</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是A&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">cheackB</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是B&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">cheackC</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是C&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="title class_">Checks</span>()</span><br><span class="line">c.<span class="title function_">cheackA</span>().<span class="title function_">cheackB</span>().<span class="title function_">cheackC</span>()</span><br></pre></td></tr></table></figure>

<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 旧接口格式和使用者不兼容，中间加一个适配转换接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adaptee</span> &#123;</span><br><span class="line">  <span class="title function_">specificRequest</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;德国标准插头&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">Adaptee</span> = <span class="keyword">new</span> <span class="title class_">Adaptee</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">request</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> info = <span class="variable language_">this</span>.<span class="property">Adaptee</span>.<span class="title function_">specificRequest</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;info&#125;</span> - 转换器 - 中国标准插头`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> target = <span class="keyword">new</span> <span class="title class_">Target</span>()</span><br><span class="line"><span class="keyword">let</span> res = target.<span class="title function_">request</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure>

<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 明星经纪人示例:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 明星</span></span><br><span class="line"><span class="keyword">let</span> star = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张某某&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">phone</span>: <span class="string">&#x27;13900001111&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 经纪人</span></span><br><span class="line"><span class="keyword">let</span> agent = <span class="keyword">new</span> <span class="title class_">Proxy</span>(star, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;phone&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 返回经纪人电话</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;168xxxxxx&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;price&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 明星不报价 经济人报价</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">120000</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target[key]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">target, key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;customPrice&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (value &lt; <span class="number">100000</span>) &#123;</span><br><span class="line">        <span class="comment">// 最低10万</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;价格太低&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        target[key] = value</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// test 测试</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(agent.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(agent.<span class="property">age</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(agent.<span class="property">phone</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(agent.<span class="property">price</span>)</span><br><span class="line"></span><br><span class="line">agent.<span class="property">customPrice</span> = <span class="number">90000</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(agent.<span class="property">customPrice</span>)</span><br></pre></td></tr></table></figure>

<h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 红灯 绿灯 黄灯</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">color</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handle</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`turn to <span class="subst">$&#123;<span class="variable language_">this</span>.color&#125;</span> light`</span>)</span><br><span class="line">    <span class="comment">// 设置状态</span></span><br><span class="line">    context.<span class="title function_">setState</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主体</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">seState</span> = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getState</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setState</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">let</span> context = <span class="keyword">new</span> <span class="title class_">Context</span>()</span><br><span class="line"><span class="keyword">let</span> green = <span class="keyword">new</span> <span class="title class_">State</span>(<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> yellow = <span class="keyword">new</span> <span class="title class_">State</span>(<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> red = <span class="keyword">new</span> <span class="title class_">State</span>(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绿灯亮了</span></span><br><span class="line">green.<span class="title function_">handle</span>(context)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="title function_">getState</span>())</span><br><span class="line"></span><br><span class="line">yellow.<span class="title function_">handle</span>(context)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="title function_">getState</span>())</span><br><span class="line"></span><br><span class="line">red.<span class="title function_">handle</span>(context)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="title function_">getState</span>())</span><br></pre></td></tr></table></figure>

<h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为对象添加新功能，不改变其他原有的结构和功能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;画一个圆形&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰器代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Decoator</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">circle</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">circle</span> = circle</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">circle</span>.<span class="title function_">draw</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setRedBorder</span>(circle)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setRedBorder</span>(<span class="params">circle</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;设置红色边框&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">let</span> circle = <span class="keyword">new</span> <span class="title class_">Circle</span>()</span><br><span class="line">circle.<span class="title function_">draw</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------ 分割线 ----- &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰开始</span></span><br><span class="line"><span class="keyword">let</span> dec = <span class="keyword">new</span> <span class="title class_">Decoator</span>(circle)</span><br><span class="line">dec.<span class="title function_">draw</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>装饰器推荐使用第三方库 core-decorators<br>第三方开源 lib，提供常用的装饰器；<br>首先安装 npm install core-decorators –save；<br>引入 import {readonly} from ‘core-decorators’。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  @readyonly</span><br><span class="line">  <span class="title function_">name</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Jonly&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>)</span><br></pre></td></tr></table></figure>

<h3 id="代理模式-1"><a href="#代理模式-1" class="headerlink" title="代理模式"></a>代理模式</h3><p>系统中被唯一使用，一个类只有一个实例 只实例化唯一的对象，比如：登陆框 购物车等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示栗一：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleObject</span> &#123;</span><br><span class="line">  <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">ProxySingleInstance</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> instance</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> <span class="title class_">SingleObject</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="title class_">ProxySingleInstance</span>()</span><br><span class="line">obj1.<span class="title function_">login</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="keyword">new</span> <span class="title class_">ProxySingleInstance</span>()</span><br><span class="line">obj2.<span class="title function_">login</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj1===obj2:&#x27;</span>, obj1 === obj2) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------------- 华丽的分割线 ---------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="keyword">new</span> <span class="title class_">ProxySingleInstance</span>()</span><br><span class="line">obj3.<span class="title function_">login</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj1===obj2:&#x27;</span>, obj1 === obj3) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示栗二：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleObject</span> &#123;</span><br><span class="line">  <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SingleObject</span>.<span class="property">getInstance</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> instance</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> <span class="title class_">SingleObject</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="title class_">SingleObject</span>.<span class="title function_">getInstance</span>()</span><br><span class="line">obj1.<span class="title function_">login</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="title class_">SingleObject</span>.<span class="title function_">getInstance</span>()</span><br><span class="line">obj2.<span class="title function_">login</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj1===obj2:&#x27;</span>, obj1 === obj2) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------------- 华丽的分割线 ---------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="keyword">new</span> <span class="title class_">SingleObject</span>.<span class="title function_">getInstance</span>()</span><br><span class="line">obj3.<span class="title function_">login</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj1===obj3:&#x27;</span>, obj1 === obj3) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示栗三：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleObject</span> &#123;</span><br><span class="line">  <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SingleObject</span>.<span class="property">getInstance</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> instance</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> <span class="title class_">SingleObject</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="title class_">SingleObject</span>.<span class="title function_">getInstance</span>()</span><br><span class="line">obj1.<span class="title function_">login</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="title class_">SingleObject</span>.<span class="title function_">getInstance</span>()</span><br><span class="line">obj2.<span class="title function_">login</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj1===obj2:&#x27;</span>, obj1 === obj2) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------------- 华丽的分割线 ---------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="keyword">new</span> <span class="title class_">SingleObject</span>() <span class="comment">// 不推荐 不可控</span></span><br><span class="line"><span class="comment">// let obj3 = SingleObject.getInstance(); // 最好这样写</span></span><br><span class="line">obj3.<span class="title function_">login</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj1===obj3:&#x27;</span>, obj1 === obj3) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>技术管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron 的断点续下载</title>
    <url>/file_download/</url>
    <content><![CDATA[<p>最近用 Electron 做了个壁纸程序，需要断点续下载，在这里记录一下。<span id="more"></span></p>
<h2 id="HTTP断点下载相关的报文"><a href="#HTTP断点下载相关的报文" class="headerlink" title="HTTP断点下载相关的报文"></a>HTTP断点下载相关的报文</h2><ul>
<li>Accept-Ranges<br>告诉客户端服务器是否支持断点续传，服务器返回</li>
<li>Content-Range<br>在HTTP协议中，响应首部 Content-Range 显示的是一个数据片段在整个文件中的位置。</li>
<li>ETag<br>资源标识 非必须 服务器返回</li>
<li>Last-Modified<br>资源最后一次更新的时间 非必须 服务器返回<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//响应示例 </span><br><span class="line">accept-ranges: bytes</span><br><span class="line">Content-Range: bytes 200-1000/67589 // 返回文件 200字节到1000字节 的数据，总文件大小67589字节</span><br><span class="line">etag: &quot;5f0dce96-48e&quot;</span><br><span class="line">last-modified: Tue, 14 Jul 2020 15:26:14 GMT</span><br></pre></td></tr></table></figure></li>
<li>Range<br>请求头设置 Range，指定服务器返回指定区域内容，如果不设置 Range 会返回整个文件。服务器片段返回状态码是 206，请求的范围如果无效状态码会是 416，全部返回状态码是 200。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//示例 </span><br><span class="line">Range: bytes=0-499 表示第 0-499 字节范围的内容 </span><br><span class="line">Range: bytes=500-999 表示第 500-999 字节范围的内容 </span><br><span class="line">Range: bytes=-500 表示最后 500 字节的内容 </span><br><span class="line">Range: bytes=500- 表示从第 500 字节开始到文件结束部分的内容 </span><br><span class="line">Range: bytes=0-0,-1 表示第一个和最后一个字节 </span><br><span class="line">Range: bytes=500-600,601-999 同时指定几个范围</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Electron-断点续下载方式"><a href="#Electron-断点续下载方式" class="headerlink" title="Electron 断点续下载方式"></a>Electron 断点续下载方式</h2><ul>
<li>使用 Chromium 的下载功能，在主进程里监听 will-download 事件去处理</li>
<li>使用 Electron 的net模块或者 Node.js 的 http/https 模块自己创建请求，记录已下载位置</li>
</ul>
<h3 id="使用-Chromium-的下载"><a href="#使用-Chromium-的下载" class="headerlink" title="使用 Chromium 的下载"></a>使用 Chromium 的下载</h3><p>可以在渲染进程中和网页一样进行触发下载（例如a标签），也可以在主进程中使用 BrowserWindow.webContents 或 session 的 downloadURL触发下载。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用窗体 创建下载事件和监听</span></span><br><span class="line"><span class="keyword">let</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>()</span><br><span class="line">win.<span class="property">webContents</span>.<span class="title function_">downloadURL</span>(url)</span><br><span class="line">win.<span class="property">webContents</span>.<span class="property">session</span>.<span class="title function_">on</span>(<span class="string">&#x27;will-download&#x27;</span>, <span class="function">(<span class="params">event,  downloadItem, webContents</span>) =&gt;</span> &#123;</span><br><span class="line"> event.<span class="title function_">preventDefault</span>()<span class="comment">//可以阻止下载</span></span><br><span class="line"> <span class="comment">//downloadItem 下载项目的 EventEmitter</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者 使用默认session对象。</span></span><br><span class="line">session.<span class="property">defaultSession</span>.<span class="title function_">downloadURL</span>(url)</span><br><span class="line">session.<span class="property">defaultSession</span>.<span class="title function_">on</span>(<span class="string">&#x27;will-download&#x27;</span>, <span class="function">(<span class="params">event,  downloadItem, webContents</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>然后可以 will-download 事件中的 downloadItem 实例去存储下载信息。等待程序再次启动时通过 session.createInterruptedDownload 恢复上一次的下载<br>大致流程。<br><img src="/images/posts/onewallhaven/down.png" alt="" loading="lazy"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个简易示例</span></span><br><span class="line"><span class="keyword">let</span> cacheItem = &#123;&#125;</span><br><span class="line">session.<span class="property">defaultSession</span>.<span class="title function_">on</span>(<span class="string">&#x27;will-download&#x27;</span>, <span class="function">(<span class="params">e, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = item.<span class="title function_">getURL</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取文件的总大小</span></span><br><span class="line">    <span class="keyword">const</span> totalBytes = item.<span class="title function_">getTotalBytes</span>();</span><br><span class="line">    <span class="comment">// 设置下载路径</span></span><br><span class="line">    <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(app.<span class="title function_">getPath</span>(<span class="string">&quot;downloads&quot;</span>), item.<span class="title function_">getFilename</span>());</span><br><span class="line">    item.<span class="title function_">setSavePath</span>(filePath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存downitem 将这些信息保存下来，</span></span><br><span class="line">    cacheItem.<span class="property">path</span> = item.<span class="title function_">getSavePath</span>();<span class="comment">//图片地址</span></span><br><span class="line">    cacheItem.<span class="property">eTag</span> = item.<span class="title function_">getETag</span>();<span class="comment">//资源标识</span></span><br><span class="line">    cacheItem.<span class="property">urlChain</span> = item.<span class="title function_">getURLChain</span>();<span class="comment">//地址</span></span><br><span class="line">    cacheItem.<span class="property">length</span> = totalBytes<span class="comment">//资源大小</span></span><br><span class="line">    cacheItem.<span class="property">lastModified</span> = item.<span class="title function_">getLastModifiedTime</span>()<span class="comment">//资源最后一次更新的时间</span></span><br><span class="line">    cacheItem.<span class="property">startTime</span> = item.<span class="title function_">getStartTime</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> lastBytes = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听下载过程，计算并设置进度条进度</span></span><br><span class="line">    item.<span class="title function_">on</span>(<span class="string">&#x27;updated&#x27;</span>, <span class="function">(<span class="params">event, state</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (state === <span class="string">&#x27;interrupted&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;下载已经中断，可以恢复&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="string">&#x27;progressing&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.<span class="title function_">isPaused</span>()) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;暂停下载&#x27;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> offset = item.<span class="title function_">getReceivedBytes</span>();</span><br><span class="line">                cacheItem.<span class="property">speedBytes</span> = offset - lastBytes;<span class="comment">//下载速度</span></span><br><span class="line">                cacheItem.<span class="property">offset</span> = offset<span class="comment">//已经下载</span></span><br><span class="line">                lastBytes = offset</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;下载中&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    item.<span class="title function_">once</span>(<span class="string">&#x27;done&#x27;</span>, <span class="function">(<span class="params">event, state</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (state === <span class="string">&#x27;interrupted&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;下载已经中断，无法恢复&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="string">&#x27;cancelle&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;下载取消&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;下载完成&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否可恢复下载</span></span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">canResume</span>) &#123;</span><br><span class="line">        item.<span class="title function_">resume</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//程序关闭时将 cacheItem 存储下载</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ===&gt; 程序 再次打开时</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将上面存储cacheItem信息读取出来 恢复下载</span></span><br><span class="line">session.<span class="property">defaultSession</span>.<span class="title function_">createInterruptedDownload</span>(&#123;</span><br><span class="line">    path, </span><br><span class="line">    urlChain, </span><br><span class="line">    offset, <span class="comment">// 下载断点开始位置</span></span><br><span class="line">    length, </span><br><span class="line">    lastModified, <span class="comment">//</span></span><br><span class="line">    eTag, <span class="comment">// </span></span><br><span class="line">    startTime</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>需要注意的一个地方是，Electron 会在程序退出时候删除我们下载一般的文件，我目前处理方案是在 程序退出时，将所有还没有下载完成文件复制一份，等下次继续下载时候还原回去。</p>
<p>相关的文档地址 <a href="https://www.electronjs.org/docs/api/browser-window">BrowserWindow</a>  ,<a href="https://www.electronjs.org/docs/api/session">Session</a> , <a href="https://www.electronjs.org/docs/api/web-contents">webContents</a>, <a href="https://www.electronjs.org/docs/api/download-item">DownloadItem</a></p>
<h3 id="创建请求实现续下载"><a href="#创建请求实现续下载" class="headerlink" title="创建请求实现续下载"></a>创建请求实现续下载</h3><p>大致上和上面是差不多的，记录已下载文件信息，再次请求时候设置从指定位置开始请求数据。</p>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter 中的动画</title>
    <url>/flutter_animation/</url>
    <content><![CDATA[<p>Flutter 中动画的创建有很多种， 需要根据具体的需求选择不同的动画。如果只是简单的布局等的动画直接使用最简单的隐式动画就可以了，因为隐式动画是由框架控制的，所以仅仅只需要更改变需要变化属性就可以了。如果你想自己控制动画的变换则需要使用显示动画，如果需要控制一些列动画组合时使用交织动画去控制。如果内置的满足不了需求的时候，还可以结合画布自绘动画。</p>
<span id="more"></span>

<h2 id="动画基础"><a href="#动画基础" class="headerlink" title="动画基础"></a>动画基础</h2><p>Flutter 动画和其他平台动画原理也是一样的，都是在快速更改 UI 实现动画效果。在一个 Flutter 动画中主要包含 Animation（动画）、AnimationController（控制器）、Curve（速度曲线）、Animatable（动画取值范围）、Listeners （监听事件）、Ticker（帧）。</p>
<ul>
<li>Animation  一个抽象类是 Flutter 动画的核心类，主用于保存动画当前插值的和状态，在动画运行时会持续生成介于两个值之间的插入值。例如当宽从 100 变成 200，会在动画第一帧到最后一帧都会生成 100-200 区间的一个值，如果速度是匀速的，这个值就是匀速增加到 200。</li>
<li>AnimationController  用来控制动画的状态启动、暂停、反向运行等， 是 Animation 的一个子类</li>
<li>Curve  用来定义动画运动的是匀速运动还是匀加速等，和 css 中 animation-timing-function 类似</li>
<li>Animatable 用于表明动画值范围值。可以通过调用 animate 方法，返回一个 Animation，常见的 Tween 系列的类都是对他的实现</li>
<li>Listener 监听动画状态的变化</li>
<li>Ticker 帧回调，在动画执行时候每一帧都会调用其回调，类似与 js 中的 requestAnimationFrame </li>
</ul>
<h3 id="动画组成结构"><a href="#动画组成结构" class="headerlink" title="动画组成结构"></a>动画组成结构</h3><p><img src="/images/posts/flutter_animation/gxt.png" alt="结构图" loading="lazy"></p>
<h3 id="动画选择"><a href="#动画选择" class="headerlink" title="动画选择"></a>动画选择</h3><p><img src="/images/posts/flutter_animation/lct.png" alt="流程图" loading="lazy"></p>
<!-- Flutter 会用 AnimationController 控制执行状态，执行的时候会根据 Animatable，Curve 在每一帧都生成对应的中间插值，插值会保存在 Animation 中，我们 Animation 的插值我们就可以更新每一帧的画面，形成动画（Animation）。不管是隐式还是显示动画都是这样来处理动画的。 -->

<h2 id="隐式动画"><a href="#隐式动画" class="headerlink" title="隐式动画"></a>隐式动画</h2><p>隐式动画简单来说就是我们只需要修改对应的属性，Flutter 就是自己帮我们过渡动画，和 css 中过渡有点类似，当我们设置后 transition 后只需要更改对应的 css 属性就会自动过渡到新的值。Flutter 内置了一些常用的隐式动画，可以看到源码里都是对 ImplicitlyAnimatedWidget 的实现，如果需要我们也可以自己实现 ImplicitlyAnimatedWidget 来自定义隐式动画。 </p>
<h3 id="内置隐式动画"><a href="#内置隐式动画" class="headerlink" title="内置隐式动画"></a>内置隐式动画</h3><p>看个使用例子</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先我们在一个StatefulWidget定义 一个height和color</span></span><br><span class="line"><span class="built_in">double</span> heihgt = <span class="number">100</span>;</span><br><span class="line">Color color = Colors.yellow[<span class="number">800</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在build 怎加一个隐式动画组建 AnimatedContainer，需要个Duration（动画执行时间），其他的参数和Container的基本一致</span></span><br><span class="line">AnimatedContainer(</span><br><span class="line">    duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">500</span>), </span><br><span class="line">    height: heihgt, <span class="comment">// 使用我们定义好的值</span></span><br><span class="line">    color: color,</span><br><span class="line">    margin: EdgeInsets.all(<span class="number">8</span>),</span><br><span class="line">    child: Center(</span><br><span class="line">        child: Text(<span class="string">&#x27;AnimatedContainer&#x27;</span>,</span><br><span class="line">            style: TextStyle(color: Colors.white, fontSize: <span class="number">20</span>),</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在需要执行动画时候我们修改 height 和 color 值,就会看到 上边的组建会一边变高边过渡到蓝色上</span></span><br><span class="line">setState(() &#123;</span><br><span class="line">    heihgt = <span class="number">200</span>;</span><br><span class="line">    color = Colors.blue;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在 Flutter 内置的隐式动画组件中，一般都是 AnimatedXxxxxx 类似的，后面的 Xxxxxx 都能找到对应的组件。内置的有下面这些 AnimatedContainer、AnimatedPadding、AnimatedAlign、AnimatedPositioned、AnimatedOpacity、SliverAnimatedOpacity、AnimatedDefaultTextStyle、AnimatedPhysicalModel。这些隐式动画的使用和其 Xxxxxx 对应的属性基本一致，只需要额外的指定 duration 就可以了，当然也可以为动画指定动画曲线 curve。</p>
<h3 id="自定义隐式动画"><a href="#自定义隐式动画" class="headerlink" title="自定义隐式动画"></a>自定义隐式动画</h3><p>当这内置的满足不了你的时候，你也可以去实现一个隐式动画，只需要实现抽象类 ImplicitlyAnimatedWidget。实现自定义隐式动画仅需要重写 build 和 forEachTween 就可以简单实现了。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接继承ImplicitlyAnimatedWidget </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimatedDemo</span> <span class="keyword">extends</span> <span class="title">ImplicitlyAnimatedWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Color color;</span><br><span class="line">  <span class="keyword">final</span> Widget child;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> height;</span><br><span class="line"></span><br><span class="line">  AnimatedDemo(&#123;</span><br><span class="line">    <span class="keyword">this</span>.color,</span><br><span class="line">    <span class="keyword">this</span>.height,</span><br><span class="line">    Curve curve = Curves.linear,</span><br><span class="line">    <span class="keyword">this</span>.child,</span><br><span class="line">    <span class="meta">@required</span> <span class="built_in">Duration</span> duration,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(curve: curve, duration: duration);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _AnimatedDemo createState() =&gt; _AnimatedDemo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为ImplicitlyAnimatedWidget是继承 StatefulWidget 的，所以还需要继承他的状态类 （AnimatedWidgetBaseState 继承自 ImplicitlyAnimatedWidgetState）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AnimatedDemo</span> <span class="keyword">extends</span> <span class="title">AnimatedWidgetBaseState</span>&lt;<span class="title">AnimatedDemo</span>&gt; </span>&#123;</span><br><span class="line">  ColorTween _color;</span><br><span class="line">  Tween&lt;<span class="built_in">double</span>&gt; _height;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 在动画执行时候会每一帧都调用 build</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: _color.evaluate(animation), <span class="comment">//使用evaluate可以获取Tween当前帧的状态值</span></span><br><span class="line">      height: _height.evaluate(animation),</span><br><span class="line">      child: widget.child,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//首次build和更新时候会调用，在这里设置动画需要的Tween的开始值和结束值</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> forEachTween(visitor) &#123;</span><br><span class="line">    <span class="comment">//visitor 有三个参数（当前的tween，动画终止状态，一个回调函数（将第一次给定的值设置为Tween的开始值））</span></span><br><span class="line">    _color = visitor(_color, widget.color, (value) =&gt; ColorTween(begin: value));<span class="comment">// 这里value==首次widget.color的值</span></span><br><span class="line">    _height = visitor(_height, widget.height, (value) =&gt; Tween&lt;<span class="built_in">double</span>&gt;(begin: value));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以去看 ImplicitlyAnimatedWidget 是如何控制动画的，在 ImplicitlyAnimatedWidgetState 中会看到其实里面定义了 AnimationController 控制动画。然后可以看到 didUpdateWidget 钩子函数中调用了  _controller.forward() 执行动画，当父 Widget 调用 setState 时候就会触发这个钩子函数的调用。</p>
<h2 id="显示动画"><a href="#显示动画" class="headerlink" title="显示动画"></a>显示动画</h2><p>有时候有些动画需要们自己去控制动画的状态，而不是交给框架去处理，这时就需要我们自己去定义前面简介里提到的那几个动画要素了。</p>
<h3 id="内置显示动画"><a href="#内置显示动画" class="headerlink" title="内置显示动画"></a>内置显示动画</h3><p>在 Flutter 中内置的显示动画大部分都是 XxxxxxTransition 名称的，我们看个内置显示动画使用例子，RotationTransition 组件需要一个 turns（Animation&lt;double&gt;）参数,我们可以给它个AnimationController</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RotationTransition 参数</span></span><br><span class="line">RotationTransition(</span><br><span class="line">   turns: Animation&lt;<span class="built_in">double</span>&gt;,</span><br><span class="line">   child: ChildWidget(),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// AnimationController 参数</span></span><br><span class="line">AnimationController(</span><br><span class="line">  <span class="built_in">double?</span> value, <span class="comment">// 初始值</span></span><br><span class="line">  <span class="keyword">this</span>.duration, <span class="comment">//动画时间</span></span><br><span class="line">  <span class="keyword">this</span>.reverseDuration, <span class="comment">// 反向动画执行的时间</span></span><br><span class="line">  <span class="keyword">this</span>.debugLabel, </span><br><span class="line">  <span class="keyword">this</span>.lowerBound = <span class="number">0.0</span>, <span class="comment">//动画开始值</span></span><br><span class="line">  <span class="keyword">this</span>.upperBound = <span class="number">1.0</span>, <span class="comment">//动画结束值</span></span><br><span class="line">  <span class="keyword">this</span>.animationBehavior = AnimationBehavior.normal,</span><br><span class="line">  <span class="keyword">required</span> TickerProvider vsync, <span class="comment">//垂直同步，需要一个 Ticker ,Flutter 给我们提供了</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>使用 RotationTransition，可以看到一个红蓝渐变色方块旋转一周。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RotationTransitionDemo</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _RotationTransitionDemoState createState() =&gt; _RotationTransitionDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_RotationTransitionDemoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RotationTransitionDemo</span>&gt; <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  AnimationController _controller;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// 设置动画时间为1秒</span></span><br><span class="line">    _controller = AnimationController(duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">1000</span>), vsync: <span class="keyword">this</span>)</span><br><span class="line">    ..addListener(() &#123; <span class="comment">// 监听动画的状态值发生变化</span></span><br><span class="line">        <span class="built_in">print</span>(_controller.value);</span><br><span class="line">    &#125;)</span><br><span class="line">    ..addStatusListener((status) &#123; <span class="comment">//监听动画状态</span></span><br><span class="line">        <span class="comment">// dismissed 动画在起始点停止</span></span><br><span class="line">        <span class="comment">// forward 动画正在正向执行</span></span><br><span class="line">        <span class="comment">// reverse 动画正在反向执行</span></span><br><span class="line">        <span class="comment">// completed 动画在终点停止</span></span><br><span class="line">        <span class="built_in">print</span>(status);</span><br><span class="line">    &#125;)</span><br><span class="line">    ..forward(); <span class="comment">// 执行动画</span></span><br><span class="line">    <span class="comment">// 常用方法</span></span><br><span class="line">    <span class="comment">// forward() // 正向执行动画</span></span><br><span class="line">    <span class="comment">// reverse() 反向执行动画</span></span><br><span class="line">    <span class="comment">// repeat() 重复执行 可以传个参数 是否会反向运动</span></span><br><span class="line">    <span class="comment">// stop() 停止动画</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;RotationTransition&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: RotationTransition(</span><br><span class="line">          turns: _controller, <span class="comment">// 设置 Animation</span></span><br><span class="line">          child: Container(</span><br><span class="line">            height: <span class="number">300</span>,</span><br><span class="line">            width: <span class="number">300</span>,</span><br><span class="line">            decoration: BoxDecoration(</span><br><span class="line">              gradient: LinearGradient(colors: [Colors.red, Colors.blue]),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="控制器补间和曲线"><a href="#控制器补间和曲线" class="headerlink" title="控制器补间和曲线"></a>控制器补间和曲线</h3><p>在控制器中我们可以看的动画开始值和结束值默认是 0.0 到 1.0，而且是 double 类型的。而实际动画中不可能只是 double 类型的，需要我们自己使用 Animatable 来指定补间范围值。<br>修改一下上面的代码</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过控制器的drive方法添加</span></span><br><span class="line"> _controller = AnimationController(duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">1000</span>),vsync: <span class="keyword">this</span>)</span><br><span class="line">  ..drive(Tween(begin: <span class="number">1</span>, end: <span class="number">4</span>)) <span class="comment">//使用Tween（Animatable的子类）指定补间范围</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我也也可以是使用Animatable的animate方法添加到控制器</span></span><br><span class="line">Tween(begin: <span class="number">1</span>, end: <span class="number">4</span>).animate(_controller);</span><br><span class="line"><span class="comment">// 这样写我们可以使用 chain() 叠加多个 Tween</span></span><br><span class="line">Tween(begin: <span class="number">1</span>, end: <span class="number">4</span>)</span><br><span class="line">.chain(CurveTween(curve: Curves.ease)) <span class="comment">//叠加个曲线</span></span><br><span class="line">.animate(_controller);</span><br></pre></td></tr></table></figure>
<p>Flutter 已经内置帮我们实现了很多 Animatable，ColorTween、SizeTween、IntTween、StepTween 等等。</p>
<h3 id="自定义显示动画"><a href="#自定义显示动画" class="headerlink" title="自定义显示动画"></a>自定义显示动画</h3><p>查看 RotationTransition 的源码，我们可以看到它是对的抽象类 AnimatedWidget 的实现，当内置的满足不了我们的时候，可以直接自己实现 AnimatedWidget 自定义显示动画。先来看看 AnimatedWidget 里面都有些啥。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只摘取主要的部分</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimatedWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> AnimatedWidget(&#123; Key key,<span class="meta">@required</span> <span class="keyword">this</span>.listenable,  &#125;) : <span class="keyword">assert</span>(listenable != <span class="keyword">null</span>), <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _AnimatedState createState() =&gt; _AnimatedState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AnimatedState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AnimatedWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    widget.listenable.addListener(_handleChange);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _handleChange() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="comment">// 我们可以看到显示动画是通过控制器监听插值更改 setState 进行重绘。</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来我自己继承 AnimatedWidget 实现一个自定义显示动画</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 继承 AnimatedWidget</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpacityAnimatedWidget</span> <span class="keyword">extends</span> <span class="title">AnimatedWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Widget child;</span><br><span class="line">  Animation&lt;Color&gt; colorAnimation;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// AnimatedWidget 需要可传递一个 listenable 进去，我们可以传递个 AnimationController</span></span><br><span class="line">  OpacityAnimatedWidget(listenable, &#123;<span class="keyword">this</span>.colorAnimation, <span class="keyword">this</span>.child&#125;) : <span class="keyword">super</span>(listenable: listenable);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    Animation&lt;<span class="built_in">double</span>&gt; animation = listenable;</span><br><span class="line">    <span class="keyword">return</span> Opacity(</span><br><span class="line">      opacity: animation.value,</span><br><span class="line">      child: Container(</span><br><span class="line">        color: colorAnimation.value,</span><br><span class="line">        child: child,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 需要在状态类上 混入一个 SingleTickerProviderStateMixin</span></span><br><span class="line">AnimationController _controller = AnimationController(duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">1000</span>), vsync: <span class="keyword">this</span>); </span><br><span class="line"></span><br><span class="line">OpacityAnimatedWidget(</span><br><span class="line">  Tween(begin: <span class="number">1.0</span>, end: <span class="number">.8</span>).animate(_controller),</span><br><span class="line">  colorAnimation: ColorTween(begin: Colors.red, end: Colors.blue).animate(_controller),</span><br><span class="line">  child: Container(</span><br><span class="line">    height: <span class="number">300</span>,</span><br><span class="line">    width: <span class="number">300</span>,</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Flutter 内部还提供了一个 AnimatedBuilder 帮助我们简化自定义动画。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只需要三个三参数</span></span><br><span class="line">AnimatedBuilder( </span><br><span class="line">  animation, <span class="comment">// 一个listenable</span></span><br><span class="line">  child,<span class="comment">// 传入个子组件，非必填</span></span><br><span class="line">  builder,<span class="comment">// (BuildContext context, Widget child)&#123;&#125;  这里的第二个参数 child ，就是上面传入的 child</span></span><br><span class="line">  <span class="comment">// 这么做的好处就是，动画执行的时候只会执行 builder ,如果一个动画只是包裹层需要执行动画，这个时候就可以把包裹的子组件 放到外面传进去</span></span><br><span class="line">  <span class="comment">// 这样就每次只需要 执行 builder 而方法第二个参数是传递进来的引用，所以可以避免每次都更新，减少开销</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="交织动画"><a href="#交织动画" class="headerlink" title="交织动画"></a>交织动画</h3><p>官方是这么介绍的：交织动画是一个简单的概念：视觉变化是随着一系列的动作发生，而不是一次性的动作。动画可能是纯粹顺序的，一个改变随着一个改变发生，动画也可能是部分或者全部重叠的。动画也可能有间隙，没有变化发生。</p>
<p>简单点说就是一个动画可以分割成很多片段，每个片段都有不同的 Tween，看个使用示例</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaggeredAnimationDemo</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _StaggeredAnimationDemoState createState() =&gt; _StaggeredAnimationDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_StaggeredAnimationDemoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">StaggeredAnimationDemo</span>&gt; <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  AnimationController _controller;</span><br><span class="line">  Animation&lt;<span class="built_in">double</span>&gt; _height;</span><br><span class="line">  Animation&lt;Color&gt; _color;</span><br><span class="line">  Animation&lt;<span class="built_in">double</span>&gt; _borderRadius;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _controller = AnimationController(duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">5000</span>), vsync: <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    _height = Tween(begin: <span class="number">50.0</span>, end: <span class="number">300.0</span>).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Interval(<span class="number">0</span>, <span class="number">0.15</span>), <span class="comment">// Interval 范围必须是0-1 指定Tween在哪一段时间执行</span></span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _color = ColorTween(begin: Colors.red, end: Colors.blue).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Interval(<span class="number">0.1</span>, <span class="number">0.2</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _borderRadius = Tween(begin: <span class="number">10.0</span>, end: <span class="number">150.0</span>).animate(</span><br><span class="line">      CurvedAnimation(</span><br><span class="line">        parent: _controller,</span><br><span class="line">        curve: Interval(<span class="number">0.1</span>, <span class="number">0.25</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _controller.forward();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> BasiceAppLayout(</span><br><span class="line">      title: <span class="string">&#x27;交织动画&#x27;</span>,</span><br><span class="line">      body: Center(</span><br><span class="line">        child: AnimatedBuilder(</span><br><span class="line">          animation: _controller,</span><br><span class="line">          builder: (context, child) &#123;</span><br><span class="line">            <span class="keyword">return</span> Container(</span><br><span class="line">              height: _height.value,</span><br><span class="line">              width: _height.value,</span><br><span class="line">              decoration: BoxDecoration(</span><br><span class="line">                color: _color.value,</span><br><span class="line">                borderRadius: BorderRadius.circular(_borderRadius.value),</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Hero动画"><a href="#Hero动画" class="headerlink" title="Hero动画"></a>Hero动画</h2><p>Flutter 叫它主动画，用于不同页面之间切换时候动画，比如有一个商品列表，点击后跳到一个新的页面查看原图，就可以这个动画。使用也很简单，在不同页面使用 Hero 包裹需要动画组件，两个页面的 tag 需要甚至成一直，但是同一个页面需要保持唯一。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Hero(</span><br><span class="line">  tag: <span class="string">&quot;avatar&quot;</span>, <span class="comment">//唯一标记，前后两个路由页Hero的tag必须相同</span></span><br><span class="line">  child: ChildWidget(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<!-- ## 自绘动画 -->]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>git 中的 stash</title>
    <url>/git_stash/</url>
    <content><![CDATA[<p>当你 分支1 上修改了东西，你发现修改错了分支，你想将 分支1 上的修改移到 分支2 的时候会.亦或者你一分支1上修改了一半，这个时候需要切的其他分支改其他的时候.这个时候 stash 就排上用场了，stash 命令可用于临时保存和回复修改，可跨分支。</p>
<span id="more"></span>

<ul>
<li><p>git stash [save message]</p>
<p>  保存，save为可选项，message为本次保存的注释</p>
</li>
<li><p>git stash list</p>
<p>  所有保存的记录列表</p>
</li>
<li><p>git stash pop stash@{num}</p>
<p>  恢复，num是可选项，通过git stash list可查看具体值。只能恢复一次</p>
</li>
<li><p>git stash apply stash@{num}</p>
<p>  恢复，num是可选项，通过git stash list可查看具体值。可回复多次</p>
</li>
<li><p>git stash drop stash@{num}</p>
<p>  删除某个保存，num是可选项，通过git stash list可查看具体值</p>
</li>
<li><p>git stash clear</p>
<p>  删除所有保存</p>
</li>
</ul>
<p>更多用法<a href="//git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E8%B4%AE%E8%97%8F%E4%B8%8E%E6%B8%85%E7%90%86">参考</a>这里</p>
<p>使用例子<br><img src="/images/posts/git_stash/20200824154456.jpg" alt="" loading="lazy"></p>
<p><img src="/images/posts/git_stash/20200824154701.jpg" alt="" loading="lazy"></p>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter 常用小部件(一)</title>
    <url>/flutter_basic_widget/</url>
    <content><![CDATA[<p>Flutter 中所有的UI界面都是widget构建的。widget用来描述元素配置数据,然后会被渲染成对应UI界面。 当widget的状态修改时, 它会重新渲染UI。</p>
<span id="more"></span>

<h2 id="widget"><a href="#widget" class="headerlink" title="widget"></a>widget</h2><p>Flutter 官网对 widget 描述</p>
<blockquote>
<p>Flutter从React中吸取灵感，通过现代化框架创建出精美的组件。它的核心思想是用widget来构建你的UI界面。 Widget描述了在当前的配置和状态下视图所应该呈现的样子。当widget的状态改变时，它会重新构建其描述（展示的 UI），框架则会对比前后变化的不同，以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。</p>
</blockquote>
<p>一个新的组件通常是继承 StatelessWidget 或 StatefulWidget</p>
<ul>
<li>StatelessWidget 是状态不可变的 widget， 其中的展示内容不会随着数据的变化而变化（非响应式）。</li>
<li>StatefulWidget 可以进行状态管理， 数据更新， 页面中的内容可以随之变化（响应式）。</li>
</ul>
<p>使用 StatefulWidget 时候， 对状态进行更改时候， 会触发 build 方法对组件进行重绘， 也会连同子组件的一起触发。当一个组件数据中途不需要更改的时候，尽可能的使用 StatelessWidget， 对性能有较好提升。或者将需要更新部分尽可能拆分成子节点。</p>
<h2 id="基础-widget"><a href="#基础-widget" class="headerlink" title="基础 widget"></a>基础 widget</h2><h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><p>Text使用还是比较常用的，用于显示简单样式文本。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Text(</span><br><span class="line">   <span class="string">&#x27;要显示文本&#x27;</span>, </span><br><span class="line">   <span class="comment">//style 设置文本样式</span></span><br><span class="line">   style: TextStyle(</span><br><span class="line">       color: Colors.blue,</span><br><span class="line">       fontSize: <span class="number">18.0</span>,</span><br><span class="line">       height: <span class="number">1.2</span>,  </span><br><span class="line">   ),</span><br><span class="line">   <span class="comment">//textAlign 设置对齐方式</span></span><br><span class="line">   <span class="comment">//maxLines 最大行数</span></span><br><span class="line">   <span class="comment">//overflow 超出显示方式</span></span><br><span class="line">   <span class="comment">//softWrap 设置换行</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>使用自定义字体</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义好自定义字体文件 pubspec.yaml</span></span><br><span class="line"><span class="attr">flutter:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">family:</span> <span class="string">Mango</span></span><br><span class="line">    <span class="attr">fonts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">asset:</span> <span class="string">asset/fonts/Mango-Regular-2.otf</span></span><br></pre></td></tr></table></figure>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用字体</span></span><br><span class="line">Text(</span><br><span class="line">    <span class="string">&#x27;自定义字体 hello Flutter&#x27;</span>,</span><br><span class="line">    style: TextStyle(fontFamily: <span class="string">&#x27;Mango&#x27;</span>, color: Colors.white),</span><br><span class="line">    textAlign: TextAlign.center,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>有时我们还会需要一段文本中，可能需要不同的字体样式。这个时候可以使用 Text.rich 或者 RichText</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Text.rich(</span><br><span class="line">    TextSpan(</span><br><span class="line">        style: TextStyle(fontSize: <span class="number">18</span>, color: Colors.white),</span><br><span class="line">        children: &lt;TextSpan&gt;[</span><br><span class="line">            TextSpan(text: <span class="string">&#x27; 天上&#x27;</span>),</span><br><span class="line">            TextSpan(text: <span class="string">&#x27; 白玉京&#x27;</span>,style: TextStyle(fontWeight: FontWeight.bold,color: Colors.red,fontSize: <span class="number">20</span>,)),</span><br><span class="line">            TextSpan(text: <span class="string">&#x27; ，&#x27;</span>),</span><br><span class="line">            TextSpan(text: <span class="string">&#x27; 十二楼五城。&#x27;</span>),</span><br><span class="line">            TextSpan(text: <span class="string">&#x27;仙人 &#x27;</span>, style: TextStyle(fontWeight: FontWeight.bold, color: Colors.red, fontSize: <span class="number">20</span>)),</span><br><span class="line">            TextSpan(text: <span class="string">&#x27;抚我顶，结发受长生。&#x27;</span>),</span><br><span class="line">        ],</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 或者 两个效果是一样的 都是需要一个 InlineSpan 类型, maxLines,overflow等这些可以在外层设置, 单独样式在TextSpan的style设置</span></span><br><span class="line">RichText(</span><br><span class="line">    text: TextSpan(</span><br><span class="line">        style: TextStyle(fontSize: <span class="number">18</span>, color: Colors.white),</span><br><span class="line">        children: &lt;TextSpan&gt;[</span><br><span class="line">            TextSpan(text: <span class="string">&#x27; 天上&#x27;</span>),</span><br><span class="line">            TextSpan(text: <span class="string">&#x27; 白玉京&#x27;</span>,style: TextStyle(fontWeight: FontWeight.bold,color: Colors.red,fontSize: <span class="number">20</span>,)),</span><br><span class="line">            TextSpan(text: <span class="string">&#x27; ，&#x27;</span>),</span><br><span class="line">            TextSpan(text: <span class="string">&#x27; 十二楼五城。&#x27;</span>),</span><br><span class="line">            TextSpan(text: <span class="string">&#x27;仙人 &#x27;</span>, style: TextStyle(fontWeight: FontWeight.bold, color: Colors.red, fontSize: <span class="number">20</span>)),</span><br><span class="line">            TextSpan(text: <span class="string">&#x27;抚我顶，结发受长生。&#x27;</span>),</span><br><span class="line">        ],</span><br><span class="line">    ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><p>Flutter 内置了很多按钮，Material 中大致分为 RawMaterialButton 和 IconButton 两类</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RawMaterialButton 常见的有 RaisedButton / FlatButton / OutlineButton /FlatButton</span></span><br><span class="line">RawMaterialButton(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.onPressed,</span><br><span class="line">    <span class="keyword">this</span>.onHighlightChanged,            <span class="comment">// 高亮变化的回调</span></span><br><span class="line">    <span class="keyword">this</span>.textStyle,                     <span class="comment">// 文字属性</span></span><br><span class="line">    <span class="keyword">this</span>.fillColor,                     <span class="comment">// 填充颜色</span></span><br><span class="line">    <span class="keyword">this</span>.highlightColor,                <span class="comment">// 背景高亮颜色</span></span><br><span class="line">    <span class="keyword">this</span>.splashColor,                   <span class="comment">// 水波纹颜色</span></span><br><span class="line">    <span class="keyword">this</span>.elevation = <span class="number">2.0</span>,               <span class="comment">// 阴影</span></span><br><span class="line">    <span class="keyword">this</span>.highlightElevation = <span class="number">8.0</span>,      <span class="comment">// 高亮时阴影</span></span><br><span class="line">    <span class="keyword">this</span>.disabledElevation = <span class="number">0.0</span>,       <span class="comment">// 不可点击时阴影</span></span><br><span class="line">    <span class="keyword">this</span>.padding = EdgeInsets.zero,     <span class="comment">// 内容周围边距</span></span><br><span class="line">    <span class="keyword">this</span>.constraints = <span class="keyword">const</span> BoxConstraints(minWidth: <span class="number">88.0</span>, minHeight: <span class="number">36.0</span>),   <span class="comment">// 默认按钮尺寸</span></span><br><span class="line">    <span class="keyword">this</span>.shape = <span class="keyword">const</span> RoundedRectangleBorder(),    <span class="comment">// 形状样式</span></span><br><span class="line">    <span class="keyword">this</span>.animationDuration = kThemeChangeDuration,  <span class="comment">// 动画效果持续时长</span></span><br><span class="line">    <span class="keyword">this</span>.clipBehavior = Clip.none,                  <span class="comment">// 抗锯齿剪切效果</span></span><br><span class="line">    MaterialTapTargetSize materialTapTargetSize,    <span class="comment">// 点击目标的最小尺寸</span></span><br><span class="line">    <span class="keyword">this</span>.child,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//IconButton类型的按钮</span></span><br><span class="line"><span class="comment">// IconButton 常见的有 BackButton(返回上一个页面)/CloseButton(关闭当前页面)</span></span><br><span class="line">IconButton(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.iconSize = <span class="number">24.0</span>,   <span class="comment">// 图标大小</span></span><br><span class="line">    <span class="keyword">this</span>.padding = <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),   <span class="comment">// 图标周围间距</span></span><br><span class="line">    <span class="keyword">this</span>.alignment = Alignment.center,          <span class="comment">// 图标位置</span></span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.icon,    <span class="comment">// 图标资源</span></span><br><span class="line">    <span class="keyword">this</span>.color,             <span class="comment">// 图标颜色</span></span><br><span class="line">    <span class="keyword">this</span>.highlightColor,    <span class="comment">// 点击高亮颜色</span></span><br><span class="line">    <span class="keyword">this</span>.splashColor,       <span class="comment">// 水波纹颜色</span></span><br><span class="line">    <span class="keyword">this</span>.disabledColor,     <span class="comment">// 不可点击时高亮颜色</span></span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.onPressed,</span><br><span class="line">    <span class="keyword">this</span>.tooltip            <span class="comment">// 长按提示</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他按钮</span></span><br><span class="line"><span class="comment">//FloatingActionButton 悬浮</span></span><br><span class="line"><span class="comment">//TextButton 文本按钮</span></span><br><span class="line"><span class="comment">//CupertinoButton iOS风格按钮</span></span><br></pre></td></tr></table></figure>

<h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p>Image 日常开发中的使用频率也非常高，Image 可以加载本地，网络，缓存的图片。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本地加载图片 需要在 pubspec.yaml 添加图片资源</span></span><br><span class="line">Image(</span><br><span class="line">    image: AssetImage(<span class="string">&#x27;asset/images/demo.png&#x27;</span>), <span class="comment">//本地图片</span></span><br><span class="line">    <span class="comment">// 在线图片</span></span><br><span class="line">    <span class="comment">// image: NetworkImage(&#x27;https://dev-file.iviewui.com/ttkIjNPlVDuv4lUTvRX8GIlM2QqSe0jg/middle&#x27;),</span></span><br><span class="line">    height: <span class="number">100.0</span>,</span><br><span class="line">    width: <span class="number">100.0</span>,</span><br><span class="line">    fit: BoxFit.fill, <span class="comment">// 填充方式和Web上差不多</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// Image 也提供了 Image.asset 和 Image.network 构造函数的快捷方式</span></span><br></pre></td></tr></table></figure>
<h3 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a>Icon</h3><p>使用内置图标，Flutter 内置提供了一套 material-icon 图标</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要一个IconData类型图标数据</span></span><br><span class="line">Icon(</span><br><span class="line">    Icons.thirteen_mp, <span class="comment">//material-icon 都定义在 Icons 类中</span></span><br><span class="line">    size: <span class="number">30</span>,</span><br><span class="line">    color: Colors.black,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>使用自定义图标</p>
<ul>
<li>下载好图标文件</li>
<li>加入在项目中</li>
<li>在pubspec.yaml中引入字体文件ttf(不同版本的flutter可能有差异)<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pubspec.yaml</span></span><br><span class="line"><span class="attr">flutter:</span></span><br><span class="line"> <span class="attr">fonts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">family:</span> <span class="string">IconFont</span></span><br><span class="line">    <span class="attr">fonts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">asset:</span> <span class="string">asset/fonts/iconfont.ttf</span></span><br></pre></td></tr></table></figure></li>
<li>编写自定义 IconData 类型<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//IconFont:是引入时候设置字体名称,0xe611 为对应图标的Unicode</span></span><br><span class="line">IconData li = IconData(<span class="number">0xe611</span>, fontFamily: <span class="string">&#x27;IconFont&#x27;</span>) <span class="comment">// 设置自定义IconData</span></span><br><span class="line">Icon(</span><br><span class="line">    li,</span><br><span class="line">    size: <span class="number">30</span>,</span><br><span class="line">    color: Colors.black,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="AppBar"><a href="#AppBar" class="headerlink" title="AppBar"></a>AppBar</h3><p>AppBar 是一个顶端导航栏 </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"> AppBar(&#123;</span><br><span class="line">    <span class="keyword">this</span>.leading, <span class="comment">//左侧按钮 可以自定义,在其他页时候 回显示返回按钮</span></span><br><span class="line">    <span class="keyword">this</span>.automaticallyImplyLeading = <span class="keyword">true</span>,<span class="comment">//leading为null，是否自动实现默认的leading按钮</span></span><br><span class="line">    <span class="keyword">this</span>.title, <span class="comment">// 标题,是一个Widget</span></span><br><span class="line">    <span class="keyword">this</span>.actions, <span class="comment">//  一个Widget列表,显示在右侧,</span></span><br><span class="line">    <span class="keyword">this</span>.flexibleSpace,<span class="comment">//显示在 AppBar 下方的控件，高度和 AppBar 高度一样 可是定制些特殊效果</span></span><br><span class="line">    <span class="keyword">this</span>.bottom,<span class="comment">// 一个PreferredSizeWidget,可以用来放TabBar</span></span><br><span class="line">    <span class="keyword">this</span>.elevation,<span class="comment">//控件的 z 坐标顺序 为0可以隐藏阴影</span></span><br><span class="line">    <span class="keyword">this</span>.shadowColor,<span class="comment">// 阴影颜色</span></span><br><span class="line">    <span class="keyword">this</span>.shape,</span><br><span class="line">    <span class="keyword">this</span>.backgroundColor, <span class="comment">// 背景色</span></span><br><span class="line">    <span class="keyword">this</span>.brightness, <span class="comment">//设置状态栏颜色 light:文字是黑色 dark:文字是白色</span></span><br><span class="line">    <span class="keyword">this</span>.iconTheme,<span class="comment">//</span></span><br><span class="line">    <span class="keyword">this</span>.actionsIconTheme,</span><br><span class="line">    <span class="keyword">this</span>.textTheme, <span class="comment">//文字样式</span></span><br><span class="line">    <span class="keyword">this</span>.primary = <span class="keyword">true</span>, <span class="comment">//为false时候会在屏幕顶部,不保留状态栏</span></span><br><span class="line">    <span class="keyword">this</span>.centerTitle, <span class="comment">//标题是否居中显示</span></span><br><span class="line">    <span class="keyword">this</span>.excludeHeaderSemantics = <span class="keyword">false</span>,</span><br><span class="line">    <span class="keyword">this</span>.titleSpacing = NavigationToolbar.kMiddleSpacing, <span class="comment">//水平标题间距</span></span><br><span class="line">    <span class="keyword">this</span>.toolbarOpacity = <span class="number">1.0</span>,<span class="comment">//透明度</span></span><br><span class="line">    <span class="keyword">this</span>.bottomOpacity = <span class="number">1.0</span>,<span class="comment">//透明度</span></span><br><span class="line">    <span class="keyword">this</span>.toolbarHeight, <span class="comment">//高度</span></span><br><span class="line">    <span class="keyword">this</span>.leadingWidth,<span class="comment">// 左侧按钮宽度</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line">AppBar(</span><br><span class="line">    automaticallyImplyLeading: <span class="keyword">false</span>,</span><br><span class="line">    title: Text(<span class="string">&quot;去掉阴影和左侧默认按钮&quot;</span>),</span><br><span class="line">    elevation: <span class="number">0.0</span>,</span><br><span class="line">    actions: [</span><br><span class="line">        IconButton(</span><br><span class="line">            icon: Icon(Icons.search, color: Colors.white),</span><br><span class="line">            onPressed: <span class="keyword">null</span>,</span><br><span class="line">        ),</span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例AppBar+TabBar</span></span><br><span class="line">DefaultTabController(</span><br><span class="line">    length: <span class="number">2</span>,</span><br><span class="line">    child: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">                automaticallyImplyLeading: <span class="keyword">false</span>,</span><br><span class="line">                title: Text(<span class="string">&quot;AppBar+TabBar&quot;</span>),</span><br><span class="line">                centerTitle: <span class="keyword">true</span>,</span><br><span class="line">                elevation: <span class="number">0.0</span>,</span><br><span class="line">                bottom: TabBar(</span><br><span class="line">                    unselectedLabelColor: Colors.white60,</span><br><span class="line">                    indicatorColor: Colors.white,</span><br><span class="line">                    indicatorSize: TabBarIndicatorSize.label,</span><br><span class="line">                    indicatorWeight: <span class="number">2.0</span>,</span><br><span class="line">                    tabs: &lt;Widget&gt;[</span><br><span class="line">                        Tab(text: <span class="string">&#x27;tab1&#x27;</span>),</span><br><span class="line">                        Tab(text: <span class="string">&#x27;tab2&#x27;</span>),</span><br><span class="line">                    ],</span><br><span class="line">                ),</span><br><span class="line">            ),</span><br><span class="line">        body: TabBarView(</span><br><span class="line">            children: [</span><br><span class="line">                Container(</span><br><span class="line">                    color: Colors.black12,</span><br><span class="line">                    child: Center(child: Text(<span class="string">&#x27;tab1&#x27;</span>)),</span><br><span class="line">                ),</span><br><span class="line">                Container(</span><br><span class="line">                    color: Colors.yellow[<span class="number">50</span>],</span><br><span class="line">                    child: Center(child: Text(<span class="string">&#x27;tab2&#x27;</span>)),</span><br><span class="line">                ),</span><br><span class="line">            ],</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<!-- ### Tabs -->

<h2 id="布局类-widget"><a href="#布局类-widget" class="headerlink" title="布局类 widget"></a>布局类 widget</h2><p>常用布局 widget 有 Row、Column、Flex、Warp、Flow、Stack、Positioned 等。</p>
<h3 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h3><p>Flutter 使用的 Flex 模型基本上跟 CSS 类似。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Row</span></span><br><span class="line">Row(</span><br><span class="line">    <span class="comment">// 主轴对齐方式(水平方向)</span></span><br><span class="line">    mainAxisAlignment: MainAxisAlignment.spaceBetween,</span><br><span class="line">    <span class="comment">//CrossAxisAlignment 负轴(垂直方向)</span></span><br><span class="line">    children: [</span><br><span class="line">        Text(<span class="string">&quot; Row1 &quot;</span>),</span><br><span class="line">        Text(<span class="string">&quot; Row2 &quot;</span>),</span><br><span class="line">        <span class="comment">// 占用剩余空间</span></span><br><span class="line">        Expanded(</span><br><span class="line">            flex: <span class="number">1</span>, <span class="comment">// 设置占比</span></span><br><span class="line">            child: Text(<span class="string">&quot; Row3 &quot;</span>),</span><br><span class="line">        ),</span><br><span class="line">        Expanded(</span><br><span class="line">            flex: <span class="number">2</span>,</span><br><span class="line">            child: Text(<span class="string">&quot; Row4 &quot;</span>),</span><br><span class="line">        ),</span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Column</span></span><br><span class="line">Column(</span><br><span class="line">    <span class="comment">// 主轴对齐方式(垂直方向)</span></span><br><span class="line">    mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">     <span class="comment">//CrossAxisAlignment 负轴(水平方向)</span></span><br><span class="line">    children: <span class="built_in">List</span>.generate(<span class="number">3</span>, (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> Container(</span><br><span class="line">            margin: EdgeInsets.symmetric(vertical: <span class="number">8</span>),</span><br><span class="line">            height: <span class="number">50</span>,</span><br><span class="line">            color: Colors.black12,</span><br><span class="line">            child: Center(</span><br><span class="line">                child: Text(<span class="string">&#x27;Column&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">        );</span><br><span class="line">    &#125;).toList(),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Flex 与 Column,Row 使用方式类似</span></span><br><span class="line"> Flex(</span><br><span class="line">    <span class="comment">//设置方向 水平和垂直</span></span><br><span class="line">    direction: Axis.vertical,</span><br><span class="line">    mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">    children: <span class="built_in">List</span>.generate(<span class="number">3</span>, (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> Container(</span><br><span class="line">            margin: EdgeInsets.symmetric(vertical: <span class="number">8</span>),</span><br><span class="line">            height: <span class="number">50</span>,</span><br><span class="line">            color: Colors.black12,</span><br><span class="line">            child: Center(</span><br><span class="line">            child: Text(<span class="string">&#x27;vertical&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">        );</span><br><span class="line">    &#125;).toList(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><p>在介绍 Row 和 Colum 时，如果子 widget 超出屏幕范围， 则会报溢出错误， 并不会自动换行。Flutter 中提供了 Wrap 和 Flow 来支持溢出部分后会自动折行。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Wrap 的示例</span></span><br><span class="line">Wrap(</span><br><span class="line">    spacing: <span class="number">8.0</span>, <span class="comment">// 主轴(水平)方向间距</span></span><br><span class="line">    runSpacing: <span class="number">4.0</span>, <span class="comment">// 纵轴（垂直）方向间距</span></span><br><span class="line">    alignment: WrapAlignment.center, <span class="comment">//沿主轴方向居中</span></span><br><span class="line">    <span class="comment">//runAlignment 纵轴方向的对齐方式</span></span><br><span class="line">    children: <span class="built_in">List</span>.generate(<span class="number">12</span>, (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> Container(</span><br><span class="line">            decoration: BoxDecoration(</span><br><span class="line">                color: Color(<span class="number">0xff38acfa</span>),</span><br><span class="line">                borderRadius: BorderRadius.circular(<span class="number">5</span>),</span><br><span class="line">            ),</span><br><span class="line">            padding: EdgeInsets.symmetric(horizontal: <span class="number">10</span>, vertical: <span class="number">5</span>),</span><br><span class="line">            child: Text(<span class="string">&#x27;tag<span class="subst">$e</span>&#x27;</span>, style: TextStyle(color: Colors.white)),</span><br><span class="line">        );</span><br><span class="line">    &#125;).toList(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Flow 布局需要一个 FlowDelegate 类型的 delegate 对象， 但是 Flutter 没有现成实现的类， 需要我们自己实现。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承FlowDelegate   只需要实现paintChildren 和 shouldRepaint</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestFlowDelegate</span> <span class="keyword">extends</span> <span class="title">FlowDelegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来绘制子组件</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paintChildren(FlowPaintingContext context) &#123;</span><br><span class="line">    <span class="comment">//FlowPaintingContext 绘制上下文信息</span></span><br><span class="line">    <span class="comment">// size 父组件大小</span></span><br><span class="line">    <span class="comment">// childCount 子组件个数</span></span><br><span class="line">    <span class="comment">// getChildSize 获取子组件大小</span></span><br><span class="line">    <span class="comment">// paintChild 绘制子组件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; context.childCount; i++) &#123;</span><br><span class="line">      <span class="comment">//paintChild 三个参数 一个指定第几个子组件 一个表示位置信息 一个是透明度</span></span><br><span class="line">      context.paintChild(i, transform: Matrix4.translationValues(i * <span class="number">20.0</span>, i * <span class="number">20.0</span>, <span class="number">0.0</span>), opacity: <span class="number">0.6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(FlowDelegate oldDelegate) &#123;</span><br><span class="line">    <span class="keyword">return</span> oldDelegate != <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Flow(</span><br><span class="line">  delegate: TestFlowDelegate(),</span><br><span class="line">  children: <span class="built_in">List</span>.generate(<span class="number">9</span>, (index) &#123;</span><br><span class="line">      <span class="keyword">return</span> Container(width: <span class="number">80.0</span>, height: <span class="number">80.0</span>, color: Colors.red[index * <span class="number">100</span>]);</span><br><span class="line">  &#125;).toList(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="叠层布局"><a href="#叠层布局" class="headerlink" title="叠层布局"></a>叠层布局</h3><p>Stack 结合 Positioned 进行叠层布局，和 css 中的绝对定位类似。Positioned 组件通过 left，top ，right，bottom 四个方向上的属性值来决定其在 Stack 中的位置。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Stack(</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">        Container(</span><br><span class="line">            child: Text(<span class="string">&quot;Stack&quot;</span>, style: TextStyle(color: Colors.white),</span><br><span class="line">            color: Colors.red,</span><br><span class="line">        ),</span><br><span class="line">        Positioned(</span><br><span class="line">            left: <span class="number">18.0</span>,</span><br><span class="line">            top: <span class="number">80</span>,</span><br><span class="line">            child: Text(<span class="string">&quot;I am Jack&quot;</span>),</span><br><span class="line">        ),</span><br><span class="line">        Positioned(</span><br><span class="line">            right: <span class="number">36.0</span>,</span><br><span class="line">            bottom: <span class="number">200</span>,</span><br><span class="line">            child: Text(<span class="string">&quot;Your friend&quot;</span>),</span><br><span class="line">        )</span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="对齐和相对定位"><a href="#对齐和相对定位" class="headerlink" title="对齐和相对定位"></a>对齐和相对定位</h3><p>Align 组件可以调整子组件位置，同过一个 AlignmentGeometry 类型的值，表示子组件在父组件中的起始位</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  height: <span class="number">120.0</span>,</span><br><span class="line">  width: <span class="number">120.0</span>,</span><br><span class="line">  color: Colors.blue[<span class="number">50</span>],</span><br><span class="line">  child: Align(</span><br><span class="line">    alignment: Alignment.topRight, <span class="comment">//Alignment 一个AlignmentGeometry的实现类</span></span><br><span class="line">    child: Text(<span class="string">&#x27;topRight&#x27;</span>),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alignment 对应坐标系,</span><br><span class="line">topRight对应着(-1,-1),中心坐标center就是(0,0),</span><br><span class="line"></span><br><span class="line">  -1,-1        1,-1</span><br><span class="line">    -------------</span><br><span class="line">    |           |</span><br><span class="line">    |           |</span><br><span class="line">    |    0,0    |</span><br><span class="line">    |           |</span><br><span class="line">    |           |</span><br><span class="line">    -------------</span><br><span class="line">  -1,1          1,1</span><br><span class="line"></span><br><span class="line">自定义时候对应公式  x,y 就是上面对应坐标值,  childWidth childHeight 容器宽高</span><br><span class="line">(Alignment.x*childWidth/2+childWidth/2, Alignment.y*childHeight/2+childHeight/2)</span><br><span class="line"></span><br><span class="line">Alignment(2,0.0) =&gt;  180,60</span><br></pre></td></tr></table></figure>

<h2 id="容器类型"><a href="#容器类型" class="headerlink" title="容器类型"></a>容器类型</h2><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p>Container 是一个组合类容器的组装的多功能容器。了解一个 Container 其他也就很清楚了</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.alignment, <span class="comment">//对齐方式  =&gt;对应 Align</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.padding, <span class="comment">// 内间距，是个 EdgeInsetsGeometry 抽象类  =&gt;对应  Padding </span></span><br><span class="line">    <span class="comment">// FLutter 提供了是个 EdgeInsetsGeometry 实现类 EdgeInsets，提供了下面四个方法</span></span><br><span class="line">    <span class="comment">// fromLTRB(double left， double top，double right， double bottom)：分别指定四个方向的填充。</span></span><br><span class="line">    <span class="comment">// all(double value) : 所有方向均使用相同数值的填充。</span></span><br><span class="line">    <span class="comment">// only(&#123;left， top， right ，bottom &#125;)：可以设置具体某个方向的填充(可以同时指定多个方向)。</span></span><br><span class="line">    <span class="comment">// symmetric(&#123; vertical， horizontal &#125;)：用于设置对称方向的填充，vertical 指 top 和 bottom，horizontal 指 left 和 right。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.color, <span class="comment">//背景色</span></span><br><span class="line">    <span class="keyword">this</span>.decoration,  <span class="comment">// 背景装饰，设置了decoration，外面的color属性将不可用，需要在decoration内设置   =&gt;对应  DecoratedBox</span></span><br><span class="line">    <span class="keyword">this</span>.foregroundDecoration,<span class="comment">// 前景装饰</span></span><br><span class="line">    <span class="comment">// DecoratedBox 提供的样式属性</span></span><br><span class="line">    <span class="comment">// color, //背景颜色</span></span><br><span class="line">    <span class="comment">// image,//背景图片</span></span><br><span class="line">    <span class="comment">// border, //边框</span></span><br><span class="line">    <span class="comment">// borderRadius, //圆角</span></span><br><span class="line">    <span class="comment">// boxShadow, //阴影,可以指定多个</span></span><br><span class="line">    <span class="comment">// gradient, //渐变</span></span><br><span class="line">    <span class="comment">// backgroundBlendMode, //背景混合模式</span></span><br><span class="line">    <span class="comment">// shape //形状</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> width, <span class="comment">// 宽度</span></span><br><span class="line">    <span class="built_in">double</span> height,<span class="comment">// 高度</span></span><br><span class="line">    BoxConstraints constraints, <span class="comment">//设置限制 =&gt;对应  ConstrainedBox，与其相反的是 UnconstrainedBox(取消限制)</span></span><br><span class="line">    <span class="comment">// ConstrainedBox 提供属性 都是double类型</span></span><br><span class="line">    <span class="comment">// minWidth //最小宽度</span></span><br><span class="line">    <span class="comment">// maxWidth //最大宽度</span></span><br><span class="line">    <span class="comment">// minHeight//最小高度</span></span><br><span class="line">    <span class="comment">// maxHeight//最大高度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.margin, <span class="comment">// 外间距 和padding 使用方式一样</span></span><br><span class="line">    <span class="keyword">this</span>.transform, <span class="comment">//变形 需要一个Matrix4类,具体可以看Matrix4源码,提供了很多不同变形构造方法 =&gt;对应 Transform </span></span><br><span class="line">    <span class="keyword">this</span>.child,</span><br><span class="line">    <span class="keyword">this</span>.clipBehavior = Clip.none,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="其他容器类"><a href="#其他容器类" class="headerlink" title="其他容器类"></a>其他容器类</h3><ul>
<li>SizedBox 固定宽高</li>
<li>AspectRatio 宽高比</li>
<li>UnconstrainedBox 取消限制</li>
</ul>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 GitHub Actions + Github Pages 实现博客自动部署</title>
    <url>/github_action/</url>
    <content><![CDATA[<p>看看官方对GitHub Actions的介绍: GitHub Actions 帮助您自动完成软件开发周期内的任务。 GitHub Actions 是事件驱动的，意味着您可以在指定事件发生后运行一系列命令。 例如，每次有人为仓库创建拉取请求时，您都可以自动运行命令来执行软件测试脚本。</p>
<p>简单的说就是，GitHub 把持续集成系列操作步骤叫做 actions。比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。可以看看官方的介绍，对<a href="https://docs.github.com/cn/actions/learn-github-actions/introduction-to-github-actions">GitHub Actions</a>快速了解</p>
<span id="more"></span>

<h2 id="Hexo-配置"><a href="#Hexo-配置" class="headerlink" title="Hexo 配置"></a>Hexo 配置</h2><p>Hexo 搭建使用可以去参看<a href="https://hexo.io/zh-cn/index.html">hexo 文档</a>。</p>
<p>Github Pages 支持两种模式</p>
<ul>
<li>User or organization site: 新建一个 username.github.io 的仓库，每个用户只能建立一个。</li>
<li>Project site: 在对应仓库 Setting =&gt; pages 进行配置，如果有多个需要配置独立域名。</li>
</ul>
<p>Github Pages 的配置可以<a href="https://pages.github.com/">参看这里</a></p>
<p>我这里是使用 Project site 的搭建 Hexo 站点的。修改 <strong>_config.yml</strong> 下的 deploy 推送仓库地址，将其推送到 MalBlog/gh-pages 分支上去。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repository:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:MaLuns/MalBlog.git，gh-pages</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>在本地执行 <strong>hexo generate</strong> 和 <strong>hexo deploy</strong> 确保能正常生成和发布。</p>
<h2 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions"></a>GitHub Actions</h2><p>我们希望当我们把博客源码推送到对应的仓库后，GitHub Actions 自动帮我们执行 <strong>hexo generate</strong>、<strong>hexo deploy</strong> 的生成和发布操作，完成博客的自动部署。首先在 项目根目录的 .github/workflows 下 新建一个 main.yml，每一个 .yml 文件就是一个 Action ， 一个 Action  相当于一个工作流 workflow，一个工作流可以有多个任务 job，每个任务可以分为几步 step。</p>
<p>第一步 我们配置工作流触发的时机</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 工作流名称</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作流触发配置</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># 当master分支有push事件时 触发工作流</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">main</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">main</span> ]</span><br></pre></td></tr></table></figure>
<p>第二步 配置工作流中的 job</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jons:</span></span><br><span class="line">    <span class="comment"># job1</span></span><br><span class="line">    <span class="attr">blog-cicd:</span></span><br><span class="line">        <span class="comment"># 任务名称</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">blog</span> <span class="string">build</span> <span class="string">&amp;</span> <span class="string">deploy</span></span><br><span class="line">        <span class="comment"># 设置任务执行环境</span></span><br><span class="line">        <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 使用最新的 Ubuntu 系统作为编译部署的环境</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># jon2 这里可以配置多个job</span></span><br><span class="line">    <span class="attr">job2:</span></span><br></pre></td></tr></table></figure>
<p>第三步 实现任务步骤， 实现自动部署大致需要如下步骤<br>拉取博客源码=&gt; 安装 Hexo 需要环境 =&gt; 安装源码依赖 =&gt; 构建博客源码 =&gt; 推送构建产物 </p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jons:</span></span><br><span class="line">    <span class="attr">blog-cicd:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">blog</span> <span class="string">build</span> <span class="string">&amp;</span> <span class="string">deploy</span></span><br><span class="line">        <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># 使用 checkout@2 插件拉取代码</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">codes</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span> </span><br><span class="line">      <span class="attr">with:</span> </span><br><span class="line">        <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 setup-node@v1 设置 node.js 环境</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">node</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装 Hexo 依赖</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">hexo</span> <span class="string">dependencies</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="comment">#设置环境变量 仓库私钥， 用来在构建完成后 推送到仓库</span></span><br><span class="line">        <span class="attr">ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_PRI</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="comment"># 设置 ssh 私钥， 下载 hexo-cli 脚手架及相关安装包， </span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">        echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">        chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">        git config --global user.email &quot;userEmail&quot;</span></span><br><span class="line"><span class="string">        git config --global user.name &quot;userName&quot;</span></span><br><span class="line"><span class="string">        npm install -g hexo-cli</span></span><br><span class="line"><span class="string">        npm install</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="comment"># 构建博客源码 并 推送推送构建产物</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">files</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        hexo clean</span></span><br><span class="line"><span class="string">        hexo generate</span></span><br><span class="line"><span class="string">        hexo deploy</span></span><br></pre></td></tr></table></figure>
<p>Github 每个仓库都是可以设置 <code>Deploy keys</code> 的， 用来可以操作单个仓库的。我们需要生成一个 <code>SSH Key</code> ，将公钥添加到 Setting =&gt; Deploy 里， 将私钥 Setting =&gt; Secrets =&gt; Actions 里。这样就可以在 工作流中 <strong></strong> 获取到 <code>Secrets</code> 配置变量。我这里使用名称是 <code>HEXO_DEPLOY_PRI</code> 。</p>
<h2 id="Git-submodule"><a href="#Git-submodule" class="headerlink" title="Git submodule"></a>Git submodule</h2><p>有时候使用了三方主题，需要更新时候，我们也希望能够自动更新上去，我们可以使用 <code>Git submodule</code> 来管理主题。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git submodule add &lt;主题仓库地址&gt; &lt;主题存放路径&gt;</span><br></pre></td></tr></table></figure>
<p>修改工作流配置，在构建前先拉取子模块中的主题</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最开始 git submodule update --recursive --remote 去拉取，发现一直更新不到最新的</span></span><br><span class="line"><span class="comment"># 然后使用 git pull 拉取发现有时候会出现冲突... 具体原因没找到， 所有就又用删除主题文件，重新 git clone 拉取方法</span></span><br><span class="line"><span class="comment"># 还是对子模块不够了解</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">files</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">         cd ./themes/</span></span><br><span class="line"><span class="string"></span>        <span class="string">rm</span> <span class="string">-r</span> <span class="string">hexo-theme-text</span></span><br><span class="line">        <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/MaLuns/hexo-theme-text.git</span></span><br><span class="line">        <span class="string">cd</span> <span class="string">../../</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 后来发现 git chekout 也可以直接用</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">files</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        cd ./themes/hexo-theme-text</span></span><br><span class="line"><span class="string">        git checkout -q main</span></span><br><span class="line"><span class="string">        cd ../../</span></span><br><span class="line"><span class="string">        hexo clean</span></span><br><span class="line"><span class="string">        hexo generate</span></span><br><span class="line"><span class="string">        hexo deploy</span></span><br></pre></td></tr></table></figure>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这样基本上就实现了 Hexo 的自动部署和主题自动更新了， 加上使用 <a href="https://github.dev/">github.dev</a> 就能实现只需要一个浏览器就能随时随地的写了， 不在需要本地配置搭建环境啦。</p>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>打造自己的Vue组件文档生成工具</title>
    <url>/generate_vue_docs/</url>
    <content><![CDATA[<p>程序员最讨厌的两件事情，第一种是写文档，另一种是别人没有写文档。有没有直接根据 vue 组件生成文档的呢？当然是有的的。但第三方使用起来不一定能和现有项目结合使用，往往需要额外的注释用来标记提取信息。<span id="more"></span><br>使用第三方的一些比较常见问题</p>
<ul>
<li>文档提取信息不全面，可能有些信息你需要提取但是它又不支持。这种情况下就只能修改三方的插件源码了。</li>
<li>需要额为的注释信息来标记，例如 <strong>vuese</strong> 需要给方法 打 <strong>@vuese</strong>、<strong>@arg</strong> 等标记来提供方法信息。</li>
</ul>
<p>俗话说自己动手丰衣足食，打造自己的 vue 文档生成工具与自己项目结合使用。一个组件文档大致需要提供 <strong>组件名称和描述(name)</strong>、<strong>组件属性(props)</strong>、<strong>组件方法(methods)</strong>、<strong>组件事件(event)</strong>、<strong>插槽(slot)</strong> 这几个部分，以及还需要这个几个部分的注释组成生成描述信息。接下来一步步实现对着几个部分的提取实现。</p>
<h2 id="解析-vue-文件"><a href="#解析-vue-文件" class="headerlink" title="解析.vue 文件"></a>解析.vue 文件</h2><p>一般一个 .vue 文件分三个部分 <strong>template</strong>、<strong>script</strong>、<strong>style</strong>、<strong>style</strong>部分的内容我们不需要，我们需要分别提取出 <strong>template</strong> 和 <strong>script</strong> 内容。Vue官方开发了 <strong>Vue-template-compiler</strong> 库专门用于 Vue 解析，我们可以直接使用它来解析提取 .vue 文件， <strong>Vue-template-compiler</strong>  提供了一个 <strong>parseComponent</strong> 方法可以对原始的 Vue 文件进行处理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> compiler = <span class="built_in">require</span>(<span class="string">&#x27;vue-template-compiler&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> result = compiler.<span class="title function_">parseComponent</span>(vueStr, [options])</span><br><span class="line"></span><br><span class="line"><span class="comment">// parseComponent 返回  template、script、style内容，</span></span><br><span class="line"><span class="keyword">export</span> interface <span class="title class_">SFCDescriptor</span> &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="title class_">SFCBlock</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="attr">script</span>: <span class="title class_">SFCBlock</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="attr">styles</span>: <span class="title class_">SFCBlock</span>[];</span><br><span class="line">  <span class="attr">customBlocks</span>: <span class="title class_">SFCBlock</span>[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拿到各个部分文本后，还需要将它转成 ast(抽象语法树)，<strong>template</strong> 部分内容可以直接使用 <strong>Vue-template-compiler</strong> 提供的 <strong>compile</strong> 方法直接生成ast， <strong>script</strong>部分需要借助其他的生成 ast了，这里使用 <strong>babel</strong> 的模块来处理 js 文本。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> compiler = <span class="built_in">require</span>(<span class="string">&#x27;vue-template-compiler&#x27;</span>)</span><br><span class="line"><span class="comment">//vueStr .vue 文件内容</span></span><br><span class="line"><span class="keyword">const</span> vue = compiler.<span class="title function_">parseComponent</span>(vueStr)</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成html部分的 ast </span></span><br><span class="line"><span class="keyword">let</span> template = compiler.<span class="title function_">compile</span>(vue.<span class="property">template</span>.<span class="property">content</span>, &#123;</span><br><span class="line">    <span class="attr">preserveWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">comments</span>: <span class="literal">true</span> <span class="comment">// 生成注释信息</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>使用 <strong>@babel/parser</strong>（Babel解析器,是Babel中使用的JavaScript解析器）来处理 js 文本内容。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> parse = <span class="built_in">require</span>(<span class="string">&#x27;@babel/parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成js部分的 ast</span></span><br><span class="line"><span class="keyword">let</span> jsAst = parse.<span class="title function_">parse</span>(vue.<span class="property">script</span>.<span class="property">content</span>, &#123;</span><br><span class="line">    <span class="attr">allowImportExportEverywhere</span>: <span class="literal">true</span> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="提取文档信息"><a href="#提取文档信息" class="headerlink" title="提取文档信息"></a>提取文档信息</h2><p>通过上一步的文件解析工作，我们成功获取到了 Vue 的模板 ast 和 script 中的 js 的 ast，下一步我们就可以从中获取我们想要的信息了。这里需要使用到 <strong>@babel/traverse</strong> 这个工具，用来遍历 js ast 的节点工具。可以在这里查看 <a href="https://astexplorer.net/">ast</a> 的生成内容，方便查看各种节点信息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&#x27;@babel/traverse&#x27;</span>);</span><br><span class="line">traverse.<span class="title function_">default</span>(jsAst, &#123;</span><br><span class="line">  <span class="title function_">enter</span>(<span class="params">path</span>)&#123; <span class="comment">// 开始</span></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 支持自定义节点 比如当节点类型 为 ExportDefaultDeclaration 时掉这个方法</span></span><br><span class="line">  <span class="title class_">ExportDefaultDeclaration</span>()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="提取组件名称、描述、props、methods、model"><a href="#提取组件名称、描述、props、methods、model" class="headerlink" title="提取组件名称、描述、props、methods、model"></a>提取组件名称、描述、props、methods、model</h3><p><strong>export default</strong> 生成的对应节点类型是 ExportDefaultDeclaration，<strong>declaration</strong> 属性就是对应的组件的 options 了，遍历 declaration 的属性可以获取到 <strong>name</strong>、<strong>props</strong>、<strong>methods</strong>、<strong>model</strong> 等节点信息。</p>
<p><img src="/images/posts/vue_docs/pic_1627612369570.png" alt="ast" loading="lazy"><em>AST</em></p>
<p>示例 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> componentInfo = &#123;&#125;</span><br><span class="line">traverse.<span class="title function_">default</span>(jsAst, &#123;</span><br><span class="line">  <span class="title class_">ExportDefaultDeclaration</span>(path)&#123;</span><br><span class="line">    path.<span class="property">node</span>.<span class="property">declaration</span>.<span class="property">properties</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (item.<span class="property">key</span>.<span class="property">name</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;props&#x27;</span>:</span><br><span class="line">                componentInfo.<span class="property">props</span> = <span class="title function_">extractProps</span>(item) <span class="comment">// 提取 props</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;methods&#x27;</span>:</span><br><span class="line">                componentInfo.<span class="property">methods</span> = <span class="title function_">extractMethods</span>(item)  <span class="comment">// 提取 methods</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;name&#x27;</span>:</span><br><span class="line">                componentInfo.<span class="property">name</span> = item.<span class="property">value</span>.<span class="property">value</span> <span class="comment">// 获取组件名称</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;model&#x27;</span>:</span><br><span class="line">                componentInfo.<span class="property">model</span> = <span class="title function_">extractModel</span>(item)  <span class="comment">// 提取 model</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="提取描述"><a href="#提取描述" class="headerlink" title="提取描述"></a>提取描述</h4><p>js 中注释分为单行和多行两种，生成 ast 也会生成不同类型的，可以看下面例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 多行备注</span></span><br><span class="line"><span class="comment"> * 用来上传文档信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 单行备注</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结尾注释</span></span><br></pre></td></tr></table></figure>

<p>可以看到会 CommentBlock、 CommentLine 两种类型的节点，还有头部的会放在 leadingComments 里，底部的注释在 trailingComments 里。</p>
<p><img src="/images/posts/vue_docs/pic_1627613208799.png" alt="ast" loading="lazy"><em>AST</em></p>
<p>一般会把组件描述注释放在 <strong>export default</strong>  上面，简单提取注释信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ExportDefaultDeclaration 插入如下代码 </span></span><br><span class="line"><span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">leadingComments</span>) &#123;</span><br><span class="line">    componentInfo.<span class="property">desc</span> = path.<span class="property">node</span>.<span class="property">leadingComments</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">type</span> === <span class="string">&#x27;CommentLine&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> item.<span class="property">value</span>.<span class="title function_">trim</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> item.<span class="property">value</span>.<span class="title function_">split</span>(<span class="string">&#x27;\n&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="title function_">replace</span>(<span class="regexp">/[\s\*]/g</span>, <span class="string">&#x27;&#x27;</span>)).<span class="title function_">filter</span>(<span class="title class_">Boolean</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">toString</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="提取-methods"><a href="#提取-methods" class="headerlink" title="提取 methods"></a>提取 methods</h4><p>因为 <strong>methods</strong> 中的注释需要额外描述 出参、入参等信息需要额外处理，jsdoc 注释规范使用还是比较大众的，这里根据需要自己定义提取规则，还需要提取 <strong>async</strong> 用来标识是否是异步函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Bool</span>&#125; type 参数描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 返回值描述</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h4 id="提取-props"><a href="#提取-props" class="headerlink" title="提取 props"></a>提取 props</h4><p>props 的提取需要区分下面几种情况，default 和 validator 还是提取还是有点麻烦的，validator 校验还可以通过注释简单描述来提取，但是 default 就不好处理了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">propA</span>: <span class="title class_">Number</span>, <span class="comment">// 只有类型</span></span><br><span class="line">    <span class="attr">propB</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>], <span class="comment">// 只有类型但是支持多种</span></span><br><span class="line">    <span class="attr">propC</span>: &#123; </span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">propD</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">100</span> <span class="comment">// 带有默认值 </span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">propE</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">      <span class="keyword">default</span> () &#123; <span class="comment">// 默认值 需要函数返回</span></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">propF</span>: &#123;</span><br><span class="line">      <span class="attr">default</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// 默认值 需要函数返回 和上面的 default 的 ast 节点类型是不同的</span></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="attr">validator</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123; <span class="comment">// 校验</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>].<span class="title function_">indexOf</span>(value) !== -<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我这里对 default 处理是借助 <strong>@babel/generator</strong> 将 default 转换代码， 通过 eval 转成函数调用返回会默认值。types 是 <strong>@babel/types</strong> 模块，用来判断节点类型的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取Props默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDefaultVal</span> (node) &#123;</span><br><span class="line">    <span class="keyword">if</span> (types.<span class="title function_">isRegExpLiteral</span>(node) || types.<span class="title function_">isBooleanLiteral</span>(node) || types.<span class="title function_">isNumericLiteral</span>(node) || types.<span class="title function_">isStringLiteral</span>(node)) &#123;</span><br><span class="line">        <span class="keyword">return</span> node.<span class="property">value</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (types.<span class="title function_">isFunctionExpression</span>(node) || types.<span class="title function_">isArrowFunctionExpression</span>(node) || types.<span class="title function_">isObjectMethod</span>(node)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> code = generate.<span class="title function_">default</span>(types.<span class="title function_">isObjectMethod</span>(node) ? node.<span class="property">body</span> : node).<span class="property">code</span></span><br><span class="line">            <span class="keyword">let</span> fun = <span class="built_in">eval</span>(**<span class="number">0</span>,$&#123;types.<span class="title function_">isObjectMethod</span>(node) ? <span class="string">&#x27;function ()&#x27;</span> : <span class="string">&#x27;&#x27;</span>&#125; $&#123;code&#125;**)</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title function_">fun</span>())</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="提取-model"><a href="#提取-model" class="headerlink" title="提取 model"></a>提取 model</h4><p>这个比较简单，直接获取就可以了。</p>
<h3 id="提取组件Events"><a href="#提取组件Events" class="headerlink" title="提取组件Events"></a>提取组件Events</h3><p>组件的事件没法直接获取到对应节点，只能通过 <strong>$emit()</strong> 方法来定位事件位置，在 <strong>traverse</strong> 中可以使用 <strong>MemberExpress</strong>(复杂类型节点)，然后通过节点上的属性名是否是 <strong>$emit</strong> 判断是否是事件。</p>
<p><img src="/images/posts/vue_docs/pic_1627615451450.png" alt="$emit" loading="lazy"><em>事件生成的AST</em></p>
<p>可以看到事件名称在 <strong>MemberExpress</strong> 父级上的 <strong>arguments</strong> 里，而备注则在更上一层的里。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">extractEvents</span> = (<span class="params">path</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 第一个元素是事件名称</span></span><br><span class="line">    <span class="keyword">const</span> eventName = path.<span class="property">parent</span>.<span class="property">arguments</span>[<span class="number">0</span>]; </span><br><span class="line">    <span class="keyword">let</span> comments = path.<span class="property">parentPath</span>.<span class="property">parent</span>.<span class="property">leadingComments</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">name</span>: eventName.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">desc</span>: comments ? comments.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">value</span>.<span class="title function_">trim</span>()).<span class="title function_">toString</span>() : <span class="string">&#x27;——&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MemberExpression</span> (path) &#123;</span><br><span class="line">    <span class="comment">// 判断是不是event</span></span><br><span class="line">    <span class="keyword">if</span> (path.<span class="property">node</span>.<span class="property">property</span>.<span class="property">name</span> === <span class="string">&#x27;$emit&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> event = <span class="title function_">extractEvents</span>(path)</span><br><span class="line">        !componentInfo.<span class="property">events</span> &amp;&amp; (componentInfo.<span class="property">events</span> = &#123;&#125;);</span><br><span class="line">        <span class="keyword">if</span> (componentInfo.<span class="property">events</span>[event.<span class="property">name</span>]) &#123;</span><br><span class="line">            componentInfo.<span class="property">events</span>[event.<span class="property">name</span>].<span class="property">desc</span> = event.<span class="property">desc</span> ? event.<span class="property">desc</span> : componentInfo.<span class="property">events</span>[event.<span class="property">name</span>].<span class="property">desc</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            componentInfo.<span class="property">events</span>[event.<span class="property">name</span>] = event</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在成功获取到 Events 后，那么结合 Events、Props、Model，就可以进一步的判断属性是否支持 <strong>.sync</strong> 和 <strong>v-model</strong>。</p>
<h3 id="提取组件Slots"><a href="#提取组件Slots" class="headerlink" title="提取组件Slots"></a>提取组件Slots</h3><p>首先需要写一个对 Vue 模板的 ast 遍历的函数，<strong>Vue-template-compiler</strong> 没有提供类似于 <strong>@babel/traverse</strong> 用来 遍历 ast 的。</p>
<p>简单实现个遍历模板抽象树函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">traverserTemplateAst</span> = (<span class="params">ast, visitor = &#123;&#125;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">traverseArray</span> (array, parent) &#123;</span><br><span class="line">        array.<span class="title function_">forEach</span>(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">traverseNode</span>(child, parent);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">traverseNode</span> (node, parent) &#123;</span><br><span class="line">        visitor.<span class="property">enter</span> &amp;&amp; visitor.<span class="title function_">enter</span>(node, parent);</span><br><span class="line">        visitor[node.<span class="property">tag</span>] &amp;&amp; visitor[node.<span class="property">tag</span>](node, parent);</span><br><span class="line">        node.<span class="property">children</span> &amp;&amp; <span class="title function_">traverseArray</span>(node.<span class="property">children</span>, node);</span><br><span class="line">        visitor.<span class="property">exit</span> &amp;&amp; visitor.<span class="title function_">exit</span>(node, parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">traverseNode</span>(ast, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Vue 模板的 ast 的结构还是比较清晰的，没有 js ast 那么多的类型，只需要区分不同 tag 就可以了。注释会单独一个节点，所以在查找 slot 节点时候，还需要去找它上一个相邻节点，判断是否是注释。</p>
<p><img src="/images/posts/vue_docs/pic_1627623837793.png" alt="slot" loading="lazy"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">traverserTemplateAst</span>(template.<span class="property">ast</span>, &#123;</span><br><span class="line">    slot (node, parent) &#123;</span><br><span class="line">        !componentInfo.<span class="property">slots</span> &amp;&amp; (componentInfo.<span class="property">slots</span> = &#123;&#125;)</span><br><span class="line">        <span class="comment">// 获取节点位置</span></span><br><span class="line">        <span class="keyword">let</span> index = parent.<span class="property">children</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span> =&gt;</span> item === node)</span><br><span class="line">        <span class="keyword">let</span> desc = <span class="string">&#x27;无描述&#x27;</span>, name = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> tag = parent.<span class="property">children</span>[index - <span class="number">1</span>]</span><br><span class="line">            <span class="comment">// isComment 判断是否是 注释</span></span><br><span class="line">            <span class="keyword">if</span> (tag.<span class="property">isComment</span>) &#123;</span><br><span class="line">                desc = tag.<span class="property">text</span>.<span class="title function_">trim</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">slotName</span>) name = node.<span class="property">attrsMap</span>.<span class="property">name</span></span><br><span class="line">        componentInfo.<span class="property">slots</span>[name] = &#123;</span><br><span class="line">            name,</span><br><span class="line">            desc</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到这里简单的实现了自动化生成 Vue 组件信息了，当然还有几种情况还没有考虑进去，例如事件 <strong>$emit</strong> 在 <strong>template</strong> 中，<strong>slot</strong> 在 <strong>render</strong> 函数中时候的情，不过提取这部分实现也是大同小异的了。可以在 <a href="//github.com/MaLuns/generate-vue-docs">这里查看</a> 本文源码。</p>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中的 [[prototype]]、prototype、__proto__ 关系</title>
    <url>/js_prototype/</url>
    <content><![CDATA[<p>说到 prototype、__proto__ 首先就得去理解 JavaScript 语言的继承机制。在典型的面向对象的语言中，如 C#，都存在类（class）的概念， 类就是对象的模板，对象就是类的实例。C# 中的 继承允许我们根据一个类来定义另一个类，这使得创建和维护应用程序变得更容易。同时也有利于重用代码和节省开发时间。在 JavaScript 是不存在 类 和 子类 概念的，全靠原型链的模式来实现继承 (后面出 class 在这基础上的语法糖)。</p>
<span id="more"></span>

<p>这里举一个简单 C# 类和继承例子，一类 People，其中包含一个 Say 方法。另外两个类 Man 和 Woman 都继承 People 这个类，这样这两个子类都拥有了父类的 Say 方法，这是一个典型的继承。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C# Code</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Man man = <span class="keyword">new</span> Man();</span><br><span class="line">            man.Work();</span><br><span class="line">            man.Say(<span class="string">&quot;累死爷了&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Woman woman = <span class="keyword">new</span> Woman();</span><br><span class="line">            woman.Shop();</span><br><span class="line">            woman.Say(<span class="string">&quot;花钱真爽&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">People</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">People</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>(<span class="params"><span class="built_in">string</span> text</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Man</span> : <span class="title">People</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Work</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;工作工作.....赚钱赚钱...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Woman</span> : <span class="title">People</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Shop</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;买买买.....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="prototype-的由来"><a href="#prototype-的由来" class="headerlink" title="prototype 的由来"></a>prototype 的由来</h1><p>当初 JavaScript 之父在开发 JavaScript 的时候，觉得没有必要做的很复杂，只需要做些简单操作就可以了，所以没有引入类的概念。<br>在 JavaScript 中也是通过 new 生成一个对象实例的，例如在 C# 中生成一个对象实例会这样写 new People()，会调用类的构造函数。在 JavaScript 简化了这个操作，new 后面跟的不是类，而是构造函数。<br>用 JavaScript 来实现上面 C# 例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> people = &#123;</span><br><span class="line">  <span class="title class_">Say</span>: <span class="keyword">function</span> (<span class="params">text</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(text)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">Work</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;工作工作.....赚钱赚钱...&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">Say</span> = people.<span class="property">Say</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Woman</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">Shop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;买买买.....&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">Say</span> = people.<span class="property">Say</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> <span class="title class_">Man</span>()</span><br><span class="line">man.<span class="title class_">Work</span>()</span><br><span class="line">man.<span class="title class_">Say</span>(<span class="string">&#x27;累死爷了&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> woman = <span class="keyword">new</span> <span class="title class_">Woman</span>()</span><br><span class="line">woman.<span class="title class_">Shop</span>()</span><br><span class="line">woman.<span class="title class_">Say</span>(<span class="string">&#x27;花钱真爽&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>但是用构造函数生成实例对象，有一个缺点，那就是无法共享属性和方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">people.<span class="property">Say</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;...&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">man.<span class="title class_">Say</span>(<span class="string">&#x27;累死爷了&#x27;</span>) <span class="comment">//累死爷了</span></span><br><span class="line">woman.<span class="title class_">Say</span>(<span class="string">&#x27;花钱真爽&#x27;</span>) <span class="comment">//花钱真爽</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> man2 = <span class="keyword">new</span> <span class="title class_">Man</span>()</span><br><span class="line">man2.<span class="title class_">Say</span>() <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">man.<span class="property">Say</span> = <span class="literal">null</span></span><br><span class="line">woman.<span class="title class_">Say</span>(<span class="string">&#x27;花钱真爽&#x27;</span>) <span class="comment">//花钱真爽</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里即使修改了 people.Say 也不会对以生成实例有影响,修改一个也不会对另一个有影响,每个实例都是相互独立的</span></span><br></pre></td></tr></table></figure>

<p>每一个实例对象，都有自己的属性和方法的副本。这不仅无法做到数据共享，也是极大的资源浪费。于是 JavaScript 之父 为了解决这个问题就在构造函数加入了个 prototype 属性。这个属性是一个对象(常称 原型对象)，把一些公用的属性和方法都放在这个对象里，一些是私有的就放在构造函数里。</p>
<p>实例对象被创建时候，会自动引用原型对象的属性和方法，这样实例对象属性就分为两种了，一种是构造函数里私有自己的，另一种则是来着引用 原型对象。一旦原型对象属性和方法修改后，实例的对象也会跟着变化。原型对象 不仅共享了数据，也减少了对资源的占用。</p>
<p>那么用 JS 来实现上面 C# 例子就可以这样写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> people = &#123;</span><br><span class="line">  <span class="title class_">Say</span>: <span class="keyword">function</span> (<span class="params">text</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(text)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">Work</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;工作工作.....赚钱赚钱...&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = people</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Woman</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">Shop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;买买买.....&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span> = people</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> <span class="title class_">Man</span>()</span><br><span class="line">man.<span class="title class_">Work</span>()</span><br><span class="line">man.<span class="title class_">Say</span>(<span class="string">&#x27;累死爷了&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> woman = <span class="keyword">new</span> <span class="title class_">Woman</span>()</span><br><span class="line">woman.<span class="title class_">Shop</span>()</span><br><span class="line">woman.<span class="title class_">Say</span>(<span class="string">&#x27;花钱真爽&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个时候加入个 people 在加入个 eat 方法, man 和 woman 实例对象也是可以使用的</span></span><br><span class="line">people.<span class="property">Eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;吃吃吃.....&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">man.<span class="title class_">Eat</span>()</span><br><span class="line">woman.<span class="title class_">Eat</span>()</span><br></pre></td></tr></table></figure>

<h1 id="prototype-和-proto-和-prototype-关系"><a href="#prototype-和-proto-和-prototype-关系" class="headerlink" title="prototype 和 __proto__ 和 [[prototype]] 关系"></a>prototype 和 __proto__ 和 [[prototype]] 关系</h1><p>JavaScript 中任意对象都有一个内置属性[[prototype]]，在 ES5 之前没有标准的方法访问这个内置属性，但是大多数浏览器都支持通过 __proto__ 来访问,</p>
<p>prototype 和 __proto__ 关系</p>
<p><img src="e83bca5f1d1e6bf359d1f75727968c11_720w.jpg" alt="" loading="lazy"></p>
<blockquote>
<p>JavaScript 只有一种结构：对象。每个实例对象（ object ）都有一个私有属性（称之为 __proto__ ）指向它的构造函数的原型对象（ prototype ）。该原型对象也有一个自己的原型对象( __proto__ ) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。</p>
</blockquote>
<p>看文字可能会有点蒙,用上面例子来举例说明下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> people = &#123;</span><br><span class="line">  <span class="title class_">Say</span>: <span class="keyword">function</span> (<span class="params">text</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(text)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = people</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> <span class="title class_">Man</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/* man 是构造函数的原型对象是  Man.prototyp</span></span><br><span class="line"><span class="comment">   所以 man.__proto__ === Man.prototype */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(man.<span class="property">__proto__</span> === <span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> &amp;&amp; man.<span class="property">__proto__</span> === people) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Man 构造函数也是对象,也有自己的 __proto__ 属性</span></span><br><span class="line"><span class="comment">  而函数 Man 是由 Function 构造的 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Man</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Function 对象也有自己的 __proto__ 属性</span></span><br><span class="line"><span class="comment">   Function 是由 Function自己实例来的 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Object 和  Function 同理*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property">__proto__</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Function 的 原型对象 也有自己的 __proto__</span></span><br><span class="line"><span class="comment">   Function 的 原型对象 是由 Object 来的*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Object 的 原型对象 在最顶层 所以他的 __proto__ 为 null */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="literal">null</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端原生</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.x 响应式部分源码阅读记录</title>
    <url>/js_vue/</url>
    <content><![CDATA[<p>之前也用了一段时间 Vue，对其用法也较为熟练了，但是对各种用法和各种 api 使用都是只知其然而不知其所以然。最近利用空闲时间尝试的去看看 Vue 的源码，以便更了解其具体原理实现，跟着学习学习。</p>
<span id="more"></span>

<!-- 之前一直对 Vue又几个困惑

- 传的 data 进去的 怎么就 变得 this.xxx 可以访问到了
- 如何实现数据劫持，监听数据的读写操作 ？
- 如何实现依赖缓存 ？ -->

<h2 id="Proxy-对-data-代理"><a href="#Proxy-对-data-代理" class="headerlink" title="Proxy 对 data 代理"></a>Proxy 对 data 代理</h2><p>传的 data 进去的为什么可以用 this.xxx 访问，而不需要 this.data.xxx 呢?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue\src\core\instance\state.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sharedPropertyDefinition = &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">get</span>: noop,</span><br><span class="line">  <span class="attr">set</span>: noop</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">proxy</span> (<span class="attr">target</span>: <span class="title class_">Object</span>, <span class="attr">sourceKey</span>: string, <span class="attr">key</span>: string) &#123;</span><br><span class="line">  sharedPropertyDefinition.<span class="property">get</span> = <span class="keyword">function</span> <span class="title function_">proxyGetter</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>[sourceKey][key]</span><br><span class="line">  &#125;</span><br><span class="line">  sharedPropertyDefinition.<span class="property">set</span> = <span class="keyword">function</span> <span class="title function_">proxySetter</span> (val) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[sourceKey][key] = val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, key, sharedPropertyDefinition)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initData</span> (<span class="attr">vm</span>: <span class="title class_">Component</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> data = vm.<span class="property">$options</span>.<span class="property">data</span></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(data)</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="keyword">let</span> i = keys.<span class="property">length</span></span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">     <span class="title function_">proxy</span>(vm, <span class="string">`_data`</span>, key)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">observe</span>(data, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这段代码看起来还是很简单的，将 data 中得 key 遍历一遍，然后全部新增到实例上去，当我们访问修改 this.xxx 得时候，都是在访问修改 this._data.xxx</p>
<h2 id="observer-模块"><a href="#observer-模块" class="headerlink" title="observer 模块"></a>observer 模块</h2><blockquote>
<p>模块源码路径 vue\src\core\observer</p>
</blockquote>
<p>observer 模块可以说是 Vue 响应式得核心了，observer 模块主要是 Observer、Dep、Watcher这三个部分了</p>
<ul>
<li><strong>Observer</strong> 观察者，对数据进行观察和依赖收集等</li>
<li><strong>Dep</strong> 是 Observer 和 Watcher 得一个桥梁，Observer 对数据进行响应式处理时候，会给每个属性生成一个 Dep 对象，然后通过调用 dep.depend() ，如果当前存在 Watcher 将当前 Dep 加入到 Watcher 中,然后在将 Watcher 添加到当前 Dep 中</li>
<li><strong>Watcher</strong> 订阅者，数据变化会收到通知，然后进行相关操作，例如视图更新等</li>
</ul>
<p>关系如下 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">      -------get 收集依赖--------   ----------- 订阅 -------------</span><br><span class="line">      |                         |  |                            |</span><br><span class="line">      |                         V  |                            |</span><br><span class="line">------------                ------------                  -------------</span><br><span class="line">| Obserser | ----  set ----&gt;|    Dep   |------- 通知 ----&gt;|  Watcher  |</span><br><span class="line">------------                ------------                  -------------</span><br><span class="line">                                                                |</span><br><span class="line">                                                              update</span><br><span class="line">                                                                |</span><br><span class="line">                                                          -------------</span><br><span class="line">                                                          |   View    |</span><br><span class="line">                                                          -------------</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-Observer"><a href="#1-Observer" class="headerlink" title="1.Observer"></a>1.Observer</h3><p>initData() 方法调用了  observe(data, true /* asRootData */) 先来看下这个方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对 value 进行观察处理</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">observe</span> (<span class="attr">value</span>: any, <span class="attr">asRootData</span>: ?boolean): <span class="title class_">Observer</span> | <span class="keyword">void</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断处理 value 必须是对象 并且不能是 VNode</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(value) || value <span class="keyword">instanceof</span> <span class="title class_">VNode</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">ob</span>: <span class="title class_">Observer</span> | <span class="keyword">void</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">hasOwn</span>(value, <span class="string">&#x27;__ob__&#x27;</span>) &amp;&amp; value.<span class="property">__ob__</span> <span class="keyword">instanceof</span> <span class="title class_">Observer</span>) &#123;</span><br><span class="line">    ob = value.<span class="property">__ob__</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">    shouldObserve &amp;&amp;</span><br><span class="line">    !<span class="title function_">isServerRendering</span>() &amp;&amp;</span><br><span class="line">    (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value) || <span class="title function_">isPlainObject</span>(value)) &amp;&amp;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(value) &amp;&amp;</span><br><span class="line">    !value.<span class="property">_isVue</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    ob = <span class="keyword">new</span> <span class="title class_">Observer</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (asRootData &amp;&amp; ob) &#123;</span><br><span class="line">    ob.<span class="property">vmCount</span>++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ob</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果 data.__ob__ 已经存在直接返回，否则 new 一个新的 Observer 实例，下面是 Observer 类代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: any;</span><br><span class="line">  <span class="attr">dep</span>: <span class="title class_">Dep</span>;</span><br><span class="line">  <span class="attr">vmCount</span>: number; <span class="comment">// number of vms that have this object as root $data</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span> (<span class="attr">value</span>: any) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">    <span class="comment">// 这个dep 在 value 的属性新增 删除时候会用到</span></span><br><span class="line">    <span class="comment">//value 如果是数组 也是通过 这里的进行 依赖收集更新的</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dep</span> = <span class="keyword">new</span> <span class="title class_">Dep</span>() </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vmCount</span> = <span class="number">0</span></span><br><span class="line">    <span class="title function_">def</span>(value, <span class="string">&#x27;__ob__&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//这里是对数组原型对象 拦截 处理</span></span><br><span class="line">      <span class="keyword">if</span> (hasProto) &#123;</span><br><span class="line">        <span class="title function_">protoAugment</span>(value, arrayMethods)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">copyAugment</span>(value, arrayMethods, arrayKeys)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">observeArray</span>(value)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">walk</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  walk (<span class="attr">obj</span>: <span class="title class_">Object</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="title function_">defineReactive</span>(obj, keys[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  observeArray (<span class="attr">items</span>: <span class="title class_">Array</span>&lt;any&gt;) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = items.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">      <span class="title function_">observe</span>(items[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在构造函数中，会给 value（data）增加 __ob__  (当前 Observer实例 ) 属性。如果 value 是数组，会调用 observeArray 对数组进行遍历，在调用 observe 方法对每个元素进行观察。如果是对象，调用 walk 遍历 value 去调用 defineReactive 去修改属性的 get/set。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//defineReactive 函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">defineReactive</span> (</span><br><span class="line">  <span class="attr">obj</span>: <span class="title class_">Object</span>,</span><br><span class="line">  <span class="attr">key</span>: string, <span class="comment">//遍历的key</span></span><br><span class="line">  <span class="attr">val</span>: any,</span><br><span class="line">  customSetter?: ?<span class="title class_">Function</span>,</span><br><span class="line">  shallow?: boolean</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> property = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, key)</span><br><span class="line">  <span class="keyword">if</span> (property &amp;&amp; property.<span class="property">configurable</span> === <span class="literal">false</span>)  <span class="keyword">return</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// cater for pre-defined getter/setters</span></span><br><span class="line">  <span class="keyword">const</span> getter = property &amp;&amp; property.<span class="property">get</span></span><br><span class="line">  <span class="keyword">const</span> setter = property &amp;&amp; property.<span class="property">set</span></span><br><span class="line">  <span class="keyword">if</span> ((!getter || setter) &amp;&amp; <span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">2</span>) &#123;</span><br><span class="line">    val = obj[key]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果 key 的值是 对象 的话，对其 value 也会进行响应处理</span></span><br><span class="line">  <span class="keyword">let</span> childOb = !shallow &amp;&amp; <span class="title function_">observe</span>(val)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//为当前 key 添加get/set</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> <span class="title function_">reactiveGetter</span> () &#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.<span class="title function_">call</span>(obj) : val</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line"></span><br><span class="line">        dep.<span class="title function_">depend</span>() <span class="comment">//对当前属性 进行依赖收集</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">          <span class="comment">//如果属性值是 对象 ，则对属性值本身进行依赖收集</span></span><br><span class="line">          childOb.<span class="property">dep</span>.<span class="title function_">depend</span>()</span><br><span class="line">          <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">            <span class="comment">//如果值是数组 对数组的每个元素进行依赖收集</span></span><br><span class="line">            <span class="title function_">dependArray</span>(value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> <span class="title function_">reactiveSetter</span> (newVal) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.<span class="title function_">call</span>(obj) : val</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (getter &amp;&amp; !setter) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">        setter.<span class="title function_">call</span>(obj, newVal)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val = newVal</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//对新值 进行观察处理</span></span><br><span class="line">      childOb = !shallow &amp;&amp; <span class="title function_">observe</span>(newVal)</span><br><span class="line">      <span class="comment">//通知 Watcher</span></span><br><span class="line">      dep.<span class="title function_">notify</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dependArray</span> (<span class="attr">value</span>: <span class="title class_">Array</span>&lt;any&gt;) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> e, i = <span class="number">0</span>, l = value.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">    e = value[i]</span><br><span class="line">    e &amp;&amp; e.<span class="property">__ob__</span> &amp;&amp; e.<span class="property">__ob__</span>.<span class="property">dep</span>.<span class="title function_">depend</span>()</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(e)) &#123;</span><br><span class="line">      <span class="title function_">dependArray</span>(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面有两个地方有存在 Dep</p>
<ul>
<li>一个是Observer 类 属性上有个 Dep ,这里主要是对数组（数组没有 get/set 不能像对象属性那样）和对象本身进行依赖收集和通知<br><img src="20200312225611.png" alt="" loading="lazy"><br><img src="20200312225648.png" alt="" loading="lazy"></li>
<li>一个是对属性 get/set 处理时候的 Dep ,这个主要是对象的属性进行依赖收集和通知</li>
</ul>
<h3 id="2-Dep"><a href="#2-Dep" class="headerlink" title="2.Dep"></a>2.Dep</h3><p>Dep 是 Observer 与 Watcher 桥梁，也可以认为 Dep 是服务于 Observer 的订阅系统。Watcher 订阅某个 Observer 的 Dep，当 Observer 观察的数据发生变化时，通过 Dep 通知各个已经订阅的 Watcher。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="attr">target</span>: ?<span class="title class_">Watcher</span>;</span><br><span class="line">  <span class="attr">id</span>: number;</span><br><span class="line">  <span class="attr">subs</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Watcher</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span> () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = uid++</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span> = [] <span class="comment">//Watcher实例</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//接收的参数为Watcher实例，并把Watcher实例存入记录依赖的数组中</span></span><br><span class="line">  addSub (<span class="attr">sub</span>: <span class="title class_">Watcher</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//与addSub对应，作用是将Watcher实例从记录依赖的数组中移除</span></span><br><span class="line">  removeSub (<span class="attr">sub</span>: <span class="title class_">Watcher</span>) &#123;</span><br><span class="line">    <span class="title function_">remove</span>(<span class="variable language_">this</span>.<span class="property">subs</span>, sub)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//依赖收集</span></span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123; <span class="comment">//存放当前Wather实例</span></span><br><span class="line">      <span class="comment">//将当前 Dep 存放到 Watcher（观察者） 中的依赖中</span></span><br><span class="line">      <span class="title class_">Dep</span>.<span class="property">target</span>.<span class="title function_">addDep</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//通知依赖数组中所有的watcher进行更新操作</span></span><br><span class="line">  notify () &#123;</span><br><span class="line">    <span class="keyword">const</span> subs = <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">slice</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = subs.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">      subs[i].<span class="title function_">update</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">const</span> targetStack = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">pushTarget</span> (<span class="attr">target</span>: ?<span class="title class_">Watcher</span>) &#123;</span><br><span class="line">  targetStack.<span class="title function_">push</span>(target)</span><br><span class="line">  <span class="title class_">Dep</span>.<span class="property">target</span> = target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">popTarget</span> () &#123;</span><br><span class="line">  targetStack.<span class="title function_">pop</span>()</span><br><span class="line">  <span class="title class_">Dep</span>.<span class="property">target</span> = targetStack[targetStack.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-Watcher"><a href="#3-Watcher" class="headerlink" title="3.Watcher"></a>3.Watcher</h3><p>先看 Watcher 的构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"> </span></span><br><span class="line"><span class="params">    vm: Component,</span></span><br><span class="line"><span class="params">    expOrFn: string | <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="params">    cb: <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="params">    options?: ?<span class="built_in">Object</span>,</span></span><br><span class="line"><span class="params">    isRenderWatcher?: boolean</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> expOrFn === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">getter</span> = expOrFn</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">getter</span> = <span class="title function_">parsePath</span>(expOrFn)</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">getter</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">getter</span> = noop</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">lazy</span></span><br><span class="line">      ? <span class="literal">undefined</span></span><br><span class="line">      : <span class="variable language_">this</span>.<span class="title function_">get</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>expOrFn，对于初始化用来渲染视图的 watcher 来说，就是 render 方法，对于 computed 来说就是表达式，对于 watch 才是 key，而 getter 方法是用来取 value 的。最后调用了 get()方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">get () &#123;</span><br><span class="line">    <span class="comment">//将Dep.target设置为当前watcher实例</span></span><br><span class="line">    <span class="title function_">pushTarget</span>(<span class="variable language_">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> value</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="variable language_">this</span>.<span class="property">vm</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 执行一次get 收集依赖</span></span><br><span class="line">      value = <span class="variable language_">this</span>.<span class="property">getter</span>.<span class="title function_">call</span>(vm, vm) </span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">user</span>) &#123;</span><br><span class="line">        <span class="title function_">handleError</span>(e, vm, <span class="string">`getter for watcher &quot;<span class="subst">$&#123;<span class="variable language_">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> e</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">deep</span>) &#123;</span><br><span class="line">        <span class="title function_">traverse</span>(value)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">popTarget</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">cleanupDeps</span>() <span class="comment">//清楚依赖</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>假如当前 Watcher 实例中 getter 是 render，当 render 遇到模板中的  表达式的时候，就是去读取 data.xxx，这个时候就触发 data.xxx 的 get 方法，这个时候 get 中会执行 Dep.depend(),而此时 Dep.target 就是当前 watcher ，然后调用 watcher.addDep()。也就将 data.xxx 与 当前 watcher 关联起来了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//watcher 的其他方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//接收参数dep(Dep实例)，让当前watcher订阅dep</span></span><br><span class="line">addDep (<span class="attr">dep</span>: <span class="title class_">Dep</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> id = dep.<span class="property">id</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">newDepIds</span>.<span class="title function_">has</span>(id)) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">newDepIds</span>.<span class="title function_">add</span>(id)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">newDeps</span>.<span class="title function_">push</span>(dep)</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">depIds</span>.<span class="title function_">has</span>(id)) &#123;</span><br><span class="line">      <span class="comment">//将watcher实例 也添加到 Dep实例中</span></span><br><span class="line">      dep.<span class="title function_">addSub</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清楚对dep的订阅信息</span></span><br><span class="line">cleanupDeps () &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//立刻运行watcher或者将watcher加入队列中</span></span><br><span class="line">update () &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">lazy</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dirty</span> = <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sync</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">run</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">queueWatcher</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行watcher，调用this.get()求值，然后触发回调</span></span><br><span class="line">run () &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">active</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="title function_">get</span>()</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      value !== <span class="variable language_">this</span>.<span class="property">value</span> || <span class="title function_">isObject</span>(value) || <span class="variable language_">this</span>.<span class="property">deep</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">const</span> oldValue = <span class="variable language_">this</span>.<span class="property">value</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">user</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">cb</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, value, oldValue)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="title function_">handleError</span>(e, <span class="variable language_">this</span>.<span class="property">vm</span>, <span class="string">`callback for watcher &quot;<span class="subst">$&#123;<span class="variable language_">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cb</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, value, oldValue)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用this.get()求值</span></span><br><span class="line">evaluate () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="title function_">get</span>()</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dirty</span> = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历this.deps，让当前watcher实例订阅所有dep</span></span><br><span class="line">depend () &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">deps</span>.<span class="property">length</span></span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">deps</span>[i].<span class="title function_">depend</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除当前watcher实例所有的订阅</span></span><br><span class="line">teardown () &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">active</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">vm</span>.<span class="property">_isBeingDestroyed</span>) &#123;</span><br><span class="line">      <span class="title function_">remove</span>(<span class="variable language_">this</span>.<span class="property">vm</span>.<span class="property">_watchers</span>, <span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">deps</span>.<span class="property">length</span></span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">deps</span>[i].<span class="title function_">removeSub</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">active</span> = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>多媒体工具</title>
    <url>/media/</url>
    <content><![CDATA[<p>当年做运营推广时候，使用过的一些工具集。</p>
<h2 id="图文排版编辑器"><a href="#图文排版编辑器" class="headerlink" title="图文排版编辑器"></a>图文排版编辑器</h2><p>i 排版：<a href="http://www.ipaiban.com/">http://www.ipaiban.com/</a><br>新榜编辑器：<a href="http://edit.newrank.cn/">http://edit.newrank.cn/</a><br>秀米：<a href="http://xiumi.us/">http://xiumi.us/</a><br>96 微信编辑器：<a href="http://bj.96weixin.com/">http://bj.96weixin.com/</a><br>96 微信标题表情： <a href="http://bj.96weixin.com/emoji/">http://bj.96weixin.com/emoji/</a><br>135 编辑器：<a href="http://www.135editor.com/">http://www.135editor.com/</a><br>小蚂蚁微信编辑器：<a href="http://www.xmyeditor.com/">http://www.xmyeditor.com/</a><br>易点编辑器：<a href="http://wxedit.yead.net/">http://wxedit.yead.net/</a><br>易企微微信编辑器：<a href="http://www.e7wei.cn/">http://www.e7wei.cn/</a><br>91 微信编辑器：<a href="http://www.91join.com/edit/">http://www.91join.com/edit/</a><br>微信编辑器：<a href="http://www.wxbj.cn/">http://www.wxbj.cn/</a><br>微助点微信编辑器：<a href="http://www.videaba.com/">http://www.videaba.com/</a><br>懒人模板：<a href="http://bj.lanrenmb.com/">http://bj.lanrenmb.com/</a><br>果优微信编辑器：<a href="http://guoyoo.99vu.com/">http://guoyoo.99vu.com/</a><br>做最好用的微信编辑器：<a href="http://editor.fzn.cc/">http://editor.fzn.cc/</a><br>微信在线编辑：<a href="http://wx.bzrw.net/">http://wx.bzrw.net/</a><br>微兔兔编辑器：<a href="http://www.weitutu.com/">http://www.weitutu.com/</a><br>有图微信编辑器：<a href="http://bj.360youtu.com/">http://bj.360youtu.com/</a><br>排版 365：<a href="http://paiban.lizhi.in/">http://paiban.lizhi.in/</a><br>乐排：<a href="http://pb.ishangtong.com/">http://pb.ishangtong.com/</a><br>秀多多：<a href="http://xiudodo.com/?m=graphic#/for/new">http://xiudodo.com/?m=graphic#/for/new</a></p>
<h2 id="微场景编辑器"><a href="#微场景编辑器" class="headerlink" title="微场景编辑器"></a>微场景编辑器</h2><p>易企秀：<a href="http://www.eqxiu.com/main">http://www.eqxiu.com/main</a><br>易企微：<a href="http://www.e7wei.com/">http://www.e7wei.com/</a><br>兔展：<a href="http://www.rabbitpre.com/">http://www.rabbitpre.com/</a><br>麦片 BlueMP：<a href="http://www.bluemp.cn">http://www.bluemp.cn</a><br>初页：<a href="http://www.ichuye.cn/">http://www.ichuye.cn/</a><br>MAKA: <a href="http://maka.im/">http://maka.im/</a><br>翼码旺财：<a href="http://cp.wangcaio2o.com/">http://cp.wangcaio2o.com/</a><br>微页：<a href="http://www.zhichiwangluo.com/">http://www.zhichiwangluo.com/</a><br>点点客海报：<a href="http://www.dodoca.com/">http://www.dodoca.com/</a><br>秀米秀制作：<a href="http://xiumi.us/">http://xiumi.us/</a><br>易传单：<a href="http://echuandan.com/">http://echuandan.com/</a><br>Epub360 易派：<a href="http://www.epub360.com/">http://www.epub360.com/</a><br>LiveApp 场景应用：<a href="http://www.liveapp.cn/">http://www.liveapp.cn/</a><br>Vxplo ：<a href="http://www.vxplo.cn/">http://www.vxplo.cn/</a><br>最酷网：<a href="http://www.zuiku.com/">http://www.zuiku.com/</a><br>起飞页：<a href="http://www.qifeiye.com/#bit_elmpz">http://www.qifeiye.com/#bit_elmpz</a><br>WIX: <a href="http://www.wix.com/">http://www.wix.com/</a><br>有图：<a href="http://www.360youtu.cn/">http://www.360youtu.cn/</a></p>
<h2 id="图片素材来源"><a href="#图片素材来源" class="headerlink" title="图片素材来源"></a>图片素材来源</h2><p>千图网：<a href="http://www.58pic.com/">http://www.58pic.com/</a><br>优美图：<a href="http://www.topit.me/">http://www.topit.me/</a><br>花瓣：<a href="http://huaban.com/">http://huaban.com/</a><br>图虫：<a href="https://tuchong.com/">https://tuchong.com/</a><br>图片 114：<a href="http://www.tupian114.com/">http://www.tupian114.com/</a><br>Picjumbo： <a href="https://picjumbo.com/">https://picjumbo.com/</a><br>Pexels： <a href="https://www.pexels.com/">https://www.pexels.com/</a><br>Gifs Categories：<a href="http://giphy.com/categories">http://giphy.com/categories</a><br>SOOGIF 动图搜索：<a href="http://soogif.com/">http://soogif.com/</a><br>素材公社：<a href="http://www.tooopen.com/">http://www.tooopen.com/</a><br>插画家园：<a href="http://www.13cg.com/">http://www.13cg.com/</a><br>Pixabay 免费高清图片：<a href="https://pixabay.com/">https://pixabay.com/</a><br>Wallpaper：<a href="http://cn.forwallpaper.com/">http://cn.forwallpaper.com/</a></p>
<h2 id="图片处理网站"><a href="#图片处理网站" class="headerlink" title="图片处理网站"></a>图片处理网站</h2><p>trikingly 建站工具：<a href="https://www.strikingly.com">https://www.strikingly.com</a><br>canva 海报设计：<a href="https://www.canva.com">https://www.canva.com</a><br>暴走漫画制作器：<a href="http://baozoumanhua.com">http://baozoumanhua.com</a><br>tuyitu 动图制作：<a href="http://www.tuyitu.com">http://www.tuyitu.com</a><br>tagul 在线文字云制作：<a href="https://tagul.com">https://tagul.com</a><br>smallpdf pdf 转换网站：<a href="https://smallpdf.com/cn">https://smallpdf.com/cn</a><br>Gif 录制编辑工具：GifCam<br>图片批量处理工具：美图秀秀批处理<br>创客贴：<a href="https://www.chuangkit.com/dc.html">https://www.chuangkit.com/dc.html</a><br>Magic Mockups：<a href="http://magicmockups.com/mockup/2/">http://magicmockups.com/mockup/2/</a></p>
<h2 id="各大媒体平台"><a href="#各大媒体平台" class="headerlink" title="各大媒体平台"></a>各大媒体平台</h2><p>微信公众平台： <a href="https://mp.weixin.qq.com">https://mp.weixin.qq.com</a><br>企鹅媒体平台： <a href="http://om.qq.com/userAuth/index">http://om.qq.com/userAuth/index</a><br>头条号： <a href="http://mp.toutiao.com/">http://mp.toutiao.com/</a><br>搜狐公众平台： <a href="http://mp.sohu.com">http://mp.sohu.com</a><br>网易媒体号： <a href="http://dy.163.com/wemedia/login.html">http://dy.163.com/wemedia/login.html</a><br>UC 订阅平台： <a href="http://mp.uc.cn">http://mp.uc.cn</a><br>百家号： <a href="http://publish.baidu.com">http://publish.baidu.com</a></p>
<h2 id="数据查询网站"><a href="#数据查询网站" class="headerlink" title="数据查询网站"></a>数据查询网站</h2><p>搜狗微信搜索： <a href="http://weixin.sogou.com/">http://weixin.sogou.com/</a><br>新榜：<a href="http://www.newrank.cn/">http://www.newrank.cn/</a><br>站长工具：<a href="http://tool.chinaz.com">http://tool.chinaz.com</a><br>百度搜索风云榜：<a href="http://top.baidu.com">http://top.baidu.com</a><br>百度指数：<a href="http://index.baidu.com">http://index.baidu.com</a><br>微指数： <a href="http://data.weibo.com/index">http://data.weibo.com/index</a><br>微博数据中心： <a href="http://data.weibo.com/datacenter/recommendapp">http://data.weibo.com/datacenter/recommendapp</a></p>
<h2 id="行业数据来源"><a href="#行业数据来源" class="headerlink" title="行业数据来源"></a>行业数据来源</h2><p>媒体微博排行榜：<a href="http://v6.bang.weibo.com/xmt">http://v6.bang.weibo.com/xmt</a><br>友盟：<a href="http://www.umeng.com/">http://www.umeng.com/</a><br>中国新闻地图：<a href="http://vis.360.cn/open/cnnews/">http://vis.360.cn/open/cnnews/</a><br>中国票房榜：<a href="http://www.cbooo.cn/">http://www.cbooo.cn/</a><br>收视率排行：<a href="http://www.tvtv.hk/archives/category/tv">http://www.tvtv.hk/archives/category/tv</a><br>农业大数据云平台：<a href="http://www.dataagri.com/agriculture/gis.action">http://www.dataagri.com/agriculture/gis.action</a><br>房价指数：<a href="http://data.eastmoney.com/cjsj/newhouse.html">http://data.eastmoney.com/cjsj/newhouse.html</a><br>中国统计局：<a href="http://data.stats.gov.cn/">http://data.stats.gov.cn/</a><br>主要城市拥堵实时排名：<a href="http://report.amap.com/traffic/">http://report.amap.com/traffic/</a><br>中国综合社会调查：<a href="http://www.chinagss.org/">http://www.chinagss.org/</a><br>P2P 网贷指数：<a href="http://www.p2p001.com/wdzs/wdzs_p2pline.html">http://www.p2p001.com/wdzs/wdzs_p2pline.html</a><br>Alexa：<a href="http://www.alexa.com/">http://www.alexa.com/</a><br>易车汽车指数：<a href="http://index.bitauto.com/">http://index.bitauto.com/</a><br>旅游预测：<a href="http://trends.baidu.com/tour/">http://trends.baidu.com/tour/</a></p>
<h2 id="网盘搜索网站"><a href="#网盘搜索网站" class="headerlink" title="网盘搜索网站"></a>网盘搜索网站</h2><p>盘多多：<a href="http://www.panduoduo.net">http://www.panduoduo.net</a><br>网盘屋：<a href="http://www.wangpanwu.com/">http://www.wangpanwu.com/</a><br>呆木瓜：<a href="http://www.daimugua.com">http://www.daimugua.com</a><br>西林街：<a href="http://www.xilinjie.com">http://www.xilinjie.com</a><br>胖次网盘搜索引擎： <a href="http://www.panc.cc">http://www.panc.cc</a><br>百度网盘分享之家： <a href="http://wowenda.com/">http://wowenda.com/</a><br>网盘 007：<a href="http://wangpan007.com/">http://wangpan007.com/</a><br>去转盘网：<a href="http://www.quzhuanpan.com/">http://www.quzhuanpan.com/</a><br>鸵鸟搜索：<a href="http://www.tuoniao.me/">http://www.tuoniao.me/</a></p>
<h2 id="在线问卷调查"><a href="#在线问卷调查" class="headerlink" title="在线问卷调查"></a>在线问卷调查</h2><p>腾讯问卷调查：<a href="http://wj.qq.com/">http://wj.qq.com/</a><br>麦客：<a href="http://www.mikecrm.com/">http://www.mikecrm.com/</a><br>ICTR：<a href="http://cn2.ictr.cn/">http://cn2.ictr.cn/</a><br>问道网：<a href="http://www.askform.cn/">http://www.askform.cn/</a><br>问卷星：<a href="http://www.sojump.com/">http://www.sojump.com/</a><br>调查派：<a href="http://www.diaochapai.com/">http://www.diaochapai.com/</a><br>问卷网：<a href="http://www.wenjuan.com/">http://www.wenjuan.com/</a><br>SurveyMonkey：<a href="https://zh.surveymonkey.com/">https://zh.surveymonkey.com/</a></p>
<h2 id="二维码生成器-解码器"><a href="#二维码生成器-解码器" class="headerlink" title="二维码生成器/解码器"></a>二维码生成器/解码器</h2><p>草料二维码：<a href="http://cli.im">http://cli.im</a><br>联图网：<a href="http://www.liantu.com">http://www.liantu.com</a><br>二维工坊：<a href="http://www.2weima.com">http://www.2weima.com</a><br>wwei 创意二维码：<a href="http://www.wwei.cn">http://www.wwei.cn</a><br>二维码解码器：<a href="http://jiema.wwei.cn/">http://jiema.wwei.cn/</a><br>半色调二维码生成器：<a href="https://spacekid.me/halftone-qr-code-generator/">https://spacekid.me/halftone-qr-code-generator/</a></p>
<h2 id="其他实用工具"><a href="#其他实用工具" class="headerlink" title="其他实用工具"></a>其他实用工具</h2><p>多媒体格式转换工具：格式工厂<br>微信文章视频地址采集工具：<a href="http://www.hengha.tv/caiji.html">http://www.hengha.tv/caiji.html</a><br>第一字体转换器：<a href="http://www.diyiziti.com/List">http://www.diyiziti.com/List</a><br>上传图片找字体：<a href="http://www.qiuziti.com/">http://www.qiuziti.com/</a><br>GIF 压缩/水印/裁剪/制作/视频转 GIF：<a href="http://www.piggif.com/tools/compress">http://www.piggif.com/tools/compress</a><br>在线文件转换器：<a href="http://cn.office-converter.com/">http://cn.office-converter.com/</a><br>PDF 转 DOC：<a href="http://pdf2doc.com/zh/">http://pdf2doc.com/zh/</a></p>
]]></content>
      <categories>
        <category>分享类</category>
      </categories>
      <tags>
        <tag>media</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB基础篇（一）</title>
    <url>/mongodb_sql/</url>
    <content><![CDATA[<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品。面向文档的 NoSQL 的数据库，存储结构也非常自由，是类似 json 的 bson 格式，因此可以存储比较复杂的数据类型。其强大的查询语言几乎支持绝大部分关系数据的的查询的功能。</p>
<span id="more"></span>

<h2 id="基本组成"><a href="#基本组成" class="headerlink" title="基本组成"></a>基本组成</h2><p>在 MongoDB 中基本的概念是文档、集合、数据库，没有关系型数据库中表、行等这些概念的</p>
<table>
<thead>
<tr>
<th>MongoDB</th>
<th>SQL</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>database</td>
<td>database</td>
<td>数据库</td>
</tr>
<tr>
<td>collection</td>
<td>table</td>
<td>集合/表</td>
</tr>
<tr>
<td>document</td>
<td>row</td>
<td>文档/行</td>
</tr>
<tr>
<td>field</td>
<td>column</td>
<td>域/字段</td>
</tr>
<tr>
<td>index</td>
<td>index</td>
<td>索引</td>
</tr>
<tr>
<td>不支持</td>
<td>table joins</td>
<td>连表</td>
</tr>
</tbody></table>
<p>MongoDB 曾经是不支持连表的，在 3.2 以后版本增加了 $lookup 可以实现左连接 </p>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看集合</span></span><br><span class="line">show collections</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 集合名称，配置选项（可选）</span></span><br><span class="line">db.<span class="title function_">createCollection</span>(<span class="string">&#x27;table_name&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">//(可选）指定是否创建固定大小集合，如果是true 在达到最大值的时候会覆盖最早的文档</span></span><br><span class="line">    <span class="attr">capped</span>: <span class="literal">true</span> ,</span><br><span class="line">    <span class="comment">//(可选）为固定集合指定一个最大大小</span></span><br><span class="line">    <span class="attr">size</span>:<span class="number">1000000</span>, </span><br><span class="line">    <span class="comment">//(可选）指定固定集合中包含文档的最大数量</span></span><br><span class="line">    <span class="attr">max</span>:<span class="number">100</span> </span><br><span class="line">    <span class="comment">// 指定创建固定集合后,里面的文档不可以删除了,除非删除整个集合重新创建</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除集合</span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">drop</span>()</span><br></pre></td></tr></table></figure>

<h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><p>MongoDB 提供了三个方法</p>
<ul>
<li>insert 插入单个或者多个</li>
<li>insertOne 插入单个文档</li>
<li>insertMany 插入多个文档</li>
</ul>
<p>如果插入文档没有提供 _id,MongoDB 会默认生成一个 ObjectId 的 _id,</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="property">table_name</span>.<span class="title function_">insert</span>(</span><br><span class="line">    [</span><br><span class="line">        &#123; <span class="attr">title</span>:<span class="string">&#x27;插入多个1&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">_id</span>:<span class="string">&#x27;12312312&#x27;</span>, <span class="attr">title</span>:<span class="string">&#x27;插入多个2&#x27;</span>&#125;</span><br><span class="line">    ],</span><br><span class="line">    &#123; <span class="comment">// insertOne,insertMany也可以设置</span></span><br><span class="line">        <span class="attr">writeConcern</span>: &#123; <span class="comment">// 写入策略</span></span><br><span class="line">            <span class="attr">w</span>: <span class="number">1</span>,  <span class="comment">// 0 不要求进行写入确认  1 要求进行写入确认  majority 要求已写入到副本集中的大多数服务器中 , 默认为1 </span></span><br><span class="line">            <span class="attr">j</span>: <span class="literal">false</span>, <span class="comment">// 如果为true，写入请求将等到日志同步完成后再返回,默认false</span></span><br><span class="line">            <span class="attr">wtimeout</span>: <span class="number">5000</span> <span class="comment">// 超时时间</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">ordered</span>: <span class="literal">false</span> <span class="comment">// 指定是否有序插入默认为true</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// insertOne 配置没有 ordered</span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">insertOne</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>:<span class="string">&#x27;插入单个&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">insertMany</span>([</span><br><span class="line">    &#123; <span class="attr">title</span>:<span class="string">&#x27;插入多个1&#x27;</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">_id</span>:<span class="string">&#x27;12312312&#x27;</span>, <span class="attr">title</span>:<span class="string">&#x27;插入多个2&#x27;</span>&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除也内部提供了三个方法</p>
<ul>
<li>remove  删除单个或者多个文档</li>
<li>deleteOne 删除单个文档,3.2+ 提供的</li>
<li>deleteMany 删除多个文档,3.2+ 提供的</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">db.<span class="property">table_name</span>.<span class="title function_">remove</span>(</span><br><span class="line">    &#123; <span class="comment">// 指定过滤条件</span></span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;插入多个1&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;<span class="comment">// 配置,可忽略</span></span><br><span class="line">        <span class="attr">justOne</span>: <span class="literal">true</span>,<span class="comment">// 指定是否仅删除一个</span></span><br><span class="line">        <span class="attr">writeConcern</span>:&#123;&#125;,<span class="comment">// 写入策略</span></span><br><span class="line">        <span class="attr">collation</span>:&#123;&#125; <span class="comment">// Collation允许根据语言指定自定义排序规则,低版本里默认是按字节对比的</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 不指定条件,默认删除所有</span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">remove</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// deleteOne,deleteMany与remove 类似,去掉了justOne配置,增加了hint 指定索引</span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">deleteOne</span>(&#123;&#125;,&#123;&#125;)</span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">deleteMany</span>(&#123;&#125;,&#123;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>查询也提供了单个和多个文档查询等</p>
<ul>
<li>find 查找集合中符合条件的所有记录</li>
<li>findOne 查询单条</li>
</ul>
<h3 id="常用条件使用方式"><a href="#常用条件使用方式" class="headerlink" title="常用条件使用方式"></a>常用条件使用方式</h3><p>find 传入两个参数，一个指定查询条件文档，一个指定字段</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="comment">// projection 可选，不指定projection默认查所有</span></span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">find</span>(query, projection)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加几条示例数据</span></span><br><span class="line">[</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;插入多个1&quot;</span>, <span class="attr">status</span>: <span class="string">&quot;A&quot;</span>, <span class="attr">obj</span>: &#123; <span class="attr">statue</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">&#x27;A&#x27;</span> &#125;, <span class="attr">arr</span>: [ &#123; <span class="attr">statue</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">&#x27;A&#x27;</span> &#125; ] &#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;插入多个2&quot;</span>, <span class="attr">status</span>: <span class="string">&quot;A&quot;</span>, <span class="attr">obj</span>: &#123; <span class="attr">statue</span>:<span class="number">9</span>,<span class="attr">title</span>:<span class="string">&#x27;A&#x27;</span> &#125;, <span class="attr">arr</span>: [ &#123; <span class="attr">statue</span>:<span class="number">9</span>,<span class="attr">title</span>:<span class="string">&#x27;A&#x27;</span> &#125;,&#123; <span class="attr">statue</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">&#x27;A&#x27;</span> &#125; ] &#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;插入多个3&quot;</span>, <span class="attr">status</span>: <span class="string">&quot;A&quot;</span>, <span class="attr">obj</span>: &#123; <span class="attr">statue</span>:<span class="number">9</span>,<span class="attr">title</span>:<span class="string">&#x27;C&#x27;</span> &#125;, <span class="attr">arr</span>: [ &#123; <span class="attr">statue</span>:<span class="number">9</span>,<span class="attr">title</span>:<span class="string">&#x27;C&#x27;</span> &#125;,&#123; <span class="attr">statue</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">&#x27;A&#x27;</span> &#125; ] &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通查询</span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">find</span>(&#123; <span class="attr">title</span>:<span class="string">&quot;插入多个1&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>
<p>查询数组中嵌套文档</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询 arr 数组, 查询条件里的结构顺序必须和存储的保持一直， 如果是 arr:&#123; title:&#x27;A&#x27;，statue:1 &#125; 则查询不出来</span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">find</span>(&#123; </span><br><span class="line">    <span class="attr">arr</span>:&#123; </span><br><span class="line">        <span class="attr">statue</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&#x27;A&#x27;</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// arr 数组中对象字段作为条件</span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">find</span>(&#123; </span><br><span class="line">    <span class="string">&#x27;arr.statue&#x27;</span>: <span class="number">9</span> </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 使用多个字段作为条件的时候，看的上面的可能会联想到这写。 实际上这样会把第2，3条都查询出来，这样实际是查询 statue为9和title为A的，但是并不需要是同一个文档里</span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">find</span>(&#123; </span><br><span class="line">    <span class="string">&#x27;arr.statue&#x27;</span>: <span class="number">9</span> ,</span><br><span class="line">    <span class="string">&#x27;arr.title&#x27;</span>: <span class="string">&#x27;A&#x27;</span> </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 想要使用一个文档中多个字段 需要使用 运算符 $elemMatch</span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">arr</span>:&#123;</span><br><span class="line">    <span class="attr">$elemMatch</span>:&#123;</span><br><span class="line">      <span class="attr">title</span>:<span class="string">&quot;A&quot;</span>,</span><br><span class="line">      <span class="attr">statue</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>查询嵌套的文档</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这样写 和数组一样，都是完全匹配一致</span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">obj</span>:&#123;</span><br><span class="line">    <span class="attr">statue</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">title</span>:<span class="string">&#x27;A&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 指定文档字段</span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line"> <span class="string">&#x27;obj.statue&#x27;</span>:<span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="指定返回字段"><a href="#指定返回字段" class="headerlink" title="指定返回字段"></a>指定返回字段</h3><p>默认情况下，MongoDB 中的查询返回匹配文档中的所有字段,可以配置一个 projection 文档以指定或限制要返回的字段。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例数据结构</span></span><br><span class="line">&#123; <span class="attr">title</span>: <span class="string">&quot;插入多个1&quot;</span>, <span class="attr">status</span>: <span class="string">&quot;A&quot;</span>, <span class="attr">obj</span>: &#123; <span class="attr">statue</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">&#x27;A&#x27;</span> &#125;, <span class="attr">arr</span>: [ &#123; <span class="attr">statue</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">&#x27;A&#x27;</span> &#125; ] &#125;</span><br><span class="line"></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">find</span>(&#123; <span class="attr">title</span>:<span class="string">&#x27;插入多个1&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">// 类似sql的</span></span><br><span class="line">select * <span class="keyword">from</span> table_name where title=<span class="string">&#x27;插入多个1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定返回字段</span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">find</span>(&#123; <span class="attr">title</span>:<span class="string">&#x27;插入多个1&#x27;</span> &#125;,&#123; <span class="attr">title</span>: <span class="number">1</span>,<span class="attr">staus</span>:<span class="number">1</span>  &#125;)  <span class="comment">// 1 代表返回字段, 0 代表过滤的字段</span></span><br><span class="line"><span class="comment">// 类似sql的</span></span><br><span class="line">select _id,title,staus <span class="keyword">from</span> table_name where title=<span class="string">&#x27;插入多个1&#x27;</span></span><br><span class="line"><span class="comment">// _id MongoDB是默认指定返回的,如果想要不返回 可以指定 &#123; _id:0 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定嵌套文档返回字段  4.4以后版本,还可以直接嵌套使用 &#123; title: 1,obj:&#123; statue:1  &#125; &#125;</span></span><br><span class="line"><span class="comment">// 嵌套的数组和嵌套文档操作一致</span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">find</span>(&#123; <span class="attr">title</span>:<span class="string">&#x27;插入多个1&#x27;</span> &#125;,&#123; <span class="attr">title</span>: <span class="number">1</span>,<span class="string">&#x27;obj.statue&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;arr.title&#x27;</span>: <span class="number">1</span> &#125;) </span><br><span class="line"><span class="comment">// 返回结果</span></span><br><span class="line">&#123;  <span class="attr">title</span>: <span class="string">&quot;插入多个1&quot;</span>, <span class="attr">obj</span>: &#123; <span class="attr">statue</span>:<span class="number">1</span> &#125;, <span class="attr">arr</span>: [&#123; <span class="attr">title</span>:<span class="number">1</span> &#125;]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用运算符 数组指定数据 $slice 返回数组最后一个</span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">find</span>(&#123; <span class="attr">title</span>:<span class="string">&#x27;插入多个1&#x27;</span> &#125;,&#123; <span class="attr">title</span>: <span class="number">1</span>,<span class="string">&#x27;obj.statue&#x27;</span>: <span class="number">1</span>, <span class="attr">arr</span>: &#123; <span class="attr">$slice</span>: -<span class="number">1</span> &#125; &#125;) </span><br></pre></td></tr></table></figure>
<p>使用查询运算符和映射运算符，还能实现更为复杂的条件过滤和字段匹配</p>
<h3 id="查询常用的运算符"><a href="#查询常用的运算符" class="headerlink" title="查询常用的运算符"></a>查询常用的运算符</h3><ul>
<li>$eq,$gt 等这类比较大小的。</li>
<li>$in,$nin 类似 sql 中的 in 和 not in 。</li>
<li>$regex 使用正则匹配。</li>
<li>$exists 判断是否有指定字段。</li>
<li>$and 类似 sql 的 and。</li>
<li>$or 类似 sql 的 or。</li>
<li>$not 查询指定条件以外的数据。</li>
<li>$nor 和 $or 结果是相反的。</li>
<li>$all 匹配包含查询中指定的所有元素的数组。</li>
<li>$elemMatch 如果 array 字段中的元素符合所有指定 $elemMatch 条件，则选择文档。</li>
<li>$size 如果数组字段为指定大小，则选择文档。<h3 id="查询中的映射"><a href="#查询中的映射" class="headerlink" title="查询中的映射"></a>查询中的映射</h3></li>
<li>$ 数组中匹配查询条件的第一个元素。</li>
<li>$elemMatch 符合指定 $elemMatch 条件的数组中的第一个元素。</li>
<li>$meta 项目在 $text 操作期间分配的文档分数。</li>
<li>$slice 限制从数组中投影的元素数量。支持 limit 和 skip。</li>
</ul>
<h3 id="查询修饰符"><a href="#查询修饰符" class="headerlink" title="查询修饰符"></a>查询修饰符</h3><ul>
<li>$comment 向查询添加注释，以标识数据库探查器输出中的查询。</li>
<li>$explain 强制 MongoDB 报告查询执行计划。请参阅 explain()。</li>
<li>$hint 仅强制 MongoDB 使用特定索引。请看 hint()</li>
<li>$max 指定要在查询中使用的索引的排他上限。请参阅 max()。</li>
<li>$maxTimeMS 指定对游标进行处理操作的累积时间限制（以毫秒为单位）。请参阅 maxTimeMS()。</li>
<li>$min 指定一个包容性的下限为索引在查询中使用。请参阅 min()。</li>
<li>$orderby 返回带有根据排序规范排序的文档的游标。请参阅 sort()。</li>
<li>$query 包装查询文档。</li>
<li>$returnKey 强制游标仅返回索引中包含的字段。</li>
<li>$showDiskLoc 修改返回的文档以包括对每个文档在磁盘上位置的引用。</li>
</ul>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>MongoDB中更新文档，需要与更新运算符结合使用来修改字段值。<br>提供的更新方法</p>
<ul>
<li>update 更新或替换单个或者多个文档</li>
<li>updateOne 更新单个文档</li>
<li>updateMany 更新多个文档</li>
<li>replaceOne 替换单个文档<br>基本使用方式<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加几条示例数据</span></span><br><span class="line">[</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;插入多个1&quot;</span>, <span class="attr">status</span>: <span class="string">&quot;A&quot;</span>, <span class="attr">obj</span>: &#123; <span class="attr">statue</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">&#x27;A&#x27;</span> &#125;, <span class="attr">arr</span>: [ &#123; <span class="attr">statue</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">&#x27;A&#x27;</span> &#125; ] &#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;插入多个2&quot;</span>, <span class="attr">status</span>: <span class="string">&quot;B&quot;</span>, <span class="attr">obj</span>: &#123; <span class="attr">statue</span>:<span class="number">9</span>,<span class="attr">title</span>:<span class="string">&#x27;A&#x27;</span> &#125;, <span class="attr">arr</span>: [ &#123; <span class="attr">statue</span>:<span class="number">9</span>,<span class="attr">title</span>:<span class="string">&#x27;A&#x27;</span> &#125;,&#123; <span class="attr">statue</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">&#x27;A&#x27;</span> &#125; ] &#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">&quot;插入多个3&quot;</span>, <span class="attr">status</span>: <span class="string">&quot;C&quot;</span>, <span class="attr">obj</span>: &#123; <span class="attr">statue</span>:<span class="number">9</span>,<span class="attr">title</span>:<span class="string">&#x27;C&#x27;</span> &#125;, <span class="attr">arr</span>: [ &#123; <span class="attr">statue</span>:<span class="number">9</span>,<span class="attr">title</span>:<span class="string">&#x27;C&#x27;</span> &#125;,&#123; <span class="attr">statue</span>:<span class="number">1</span>,<span class="attr">title</span>:<span class="string">&#x27;A&#x27;</span> &#125; ] &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法 </span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">update</span>(<span class="string">&#x27;查询条件&#x27;</span>,<span class="string">&#x27;更新管道&#x27;</span>,<span class="string">&#x27;设置&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换查询的整个文档</span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">update</span>(&#123; <span class="attr">title</span>:<span class="string">&#x27;插入多个1&#x27;</span> &#125;,&#123; <span class="attr">status</span>:<span class="string">&#x27;D&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">// 更新指定字段</span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">update</span>(</span><br><span class="line">  &#123; <span class="attr">title</span>:<span class="string">&#x27;插入多个1&#x27;</span> &#125;,</span><br><span class="line">  &#123; </span><br><span class="line">    <span class="attr">$set</span>:&#123;</span><br><span class="line">      <span class="attr">status</span>:<span class="string">&#x27;D&#x27;</span> </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">multi</span>: <span class="literal">true</span> ,<span class="comment">// 默认false, 是否更新多条</span></span><br><span class="line">    <span class="attr">upsert</span>: <span class="literal">true</span>,<span class="comment">// 默认fals, 如果不存在文档这新增一条</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改嵌套数组字段</span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">update</span>(</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">&quot;插入多个1&quot;</span>, <span class="string">&quot;arr.statue&quot;</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;$set&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">//&quot;arr.0.statue&quot;: 3 // 修改第1条</span></span><br><span class="line">        <span class="string">&quot;arr.$.statue&quot;</span>: <span class="number">3</span> <span class="comment">// 单个修改需要指定数组条件</span></span><br><span class="line">        <span class="comment">//&quot;arr.$[].statue&quot;: 3 //修改多个</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除字段</span></span><br><span class="line">db.<span class="property">table_name</span>.<span class="title function_">update</span>(</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">&quot;插入多个1&quot;</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;$unset&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">status</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.2后的版本还可以将聚合管道用来更新</span></span><br><span class="line"><span class="comment">// 将合计值更新到 total 上</span></span><br><span class="line">db.<span class="property">collection</span>.<span class="title function_">update</span>(&#123;&#125;,</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;$set&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">total</span>: &#123;</span><br><span class="line">        <span class="string">&quot;$sum&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;$arr.statue&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">multi</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="字段更新运算符"><a href="#字段更新运算符" class="headerlink" title="字段更新运算符"></a>字段更新运算符</h3><ul>
<li>$currentDate 将字段的值设置为当前日期，即日期或时间戳。</li>
<li>$inc 将字段的值增加指定的数量。</li>
<li>$min 仅当指定值小于现有字段值时才更新该字段。</li>
<li>$max 仅当指定值大于现有字段值时才更新该字段。</li>
<li>$mul 将字段的值乘以指定的数量。</li>
<li>$rename 重命名字段。</li>
<li>$set 设置文档中字段的值。</li>
<li>$setOnInsert 如果更新导致插入文档，则设置字段的值。对修改现有文档的更新操作没有影响。</li>
<li>$unset 从文档中删除指定的字段。</li>
</ul>
<h3 id="数组更新运算符"><a href="#数组更新运算符" class="headerlink" title="数组更新运算符"></a>数组更新运算符</h3><ul>
<li>$[] 充当占位符，以更新匹配查询条件的文档的数组中的所有元素。</li>
<li>$ 充当占位符，以更新与查询条件匹配的第一个元素。</li>
<li>$[<identifier>] 充当占位符，以更新 arrayFilters 与查询条件匹配的文档中所有与条件匹配的元素。</li>
<li>$addToSet 仅当元素不存在于集合中时才将它们添加到数组中。</li>
<li>$pop 删除数组的第一项或最后一项。</li>
<li>$pull 删除与指定查询匹配的所有数组元素。</li>
<li>$push 将项目添加到数组。</li>
<li>$pullAll 从数组中删除所有匹配的值。</li>
</ul>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>node 实现简单 http 转发</title>
    <url>/node_proxy/</url>
    <content><![CDATA[<p>由于同源策略的限制，前端想要随便调用别人的数据没有那么容易，利用 jsonp 去调用虽然可以，但是也得别人支持，而且还只能是 get 请求。想要随便调用别人数据，最简单就是弄一个代理服务，实现数据的转发。</p>
<span id="more"></span>

<h2 id="node-实现透明转发"><a href="#node-实现透明转发" class="headerlink" title="node 实现透明转发"></a>node 实现透明转发</h2><p>主要就是使用 stream.pipe()，将请求得流写入自己写得请求中，再将请求到的数据写入响应流中。<br>简单实现例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;https://www.imalun.com/&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">7000</span>,</span><br><span class="line">  <span class="attr">ip</span>: <span class="title function_">getIpv4</span>(),</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;http&#x27;</span>,</span><br><span class="line">  http,</span><br><span class="line">  https,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> argv = process.<span class="property">argv</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argv.<span class="property">length</span> &lt; <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="string">&#x27;\t\n\x1B[41m\x1B[1m%s\x1B[22m\x1B[49m  %s\t\n&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27; error &#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;请指定 proxy url \t\n demo :  node proxy www.imalun.com &#x27;</span></span><br><span class="line">  )</span><br><span class="line">  process.<span class="title function_">exit</span>(<span class="number">1</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> [, , ...par] = argv</span><br><span class="line">  config.<span class="property">url</span> = par[<span class="number">0</span>]</span><br><span class="line">  config.<span class="property">port</span> = par[<span class="number">1</span>] || config.<span class="property">port</span></span><br><span class="line">  <span class="keyword">if</span> (par[<span class="number">0</span>].<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">5</span>) === <span class="string">&#x27;https&#x27;</span>) &#123;</span><br><span class="line">    config.<span class="property">type</span> = <span class="string">&#x27;https&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (par[<span class="number">0</span>].<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">4</span>) === <span class="string">&#x27;http&#x27;</span>) &#123;</span><br><span class="line">    config.<span class="property">type</span> = <span class="string">&#x27;http&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;content-type&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;DELETE,PUT,POST,GET,OPTIONS&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span>.<span class="title function_">toLowerCase</span>() == <span class="string">&#x27;options&#x27;</span>) res.<span class="title function_">end</span>()</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      req.<span class="title function_">pipe</span>(</span><br><span class="line">        config[config.<span class="property">type</span>].<span class="title function_">request</span>(config.<span class="property">url</span> + req.<span class="property">url</span>, <span class="function">(<span class="params">respo</span>) =&gt;</span></span><br><span class="line">          respo.<span class="title function_">pipe</span>(res)</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">listen</span>(config.<span class="property">port</span>, <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\x1B[42m\x1B[1m%s\x1B[22m\x1B[49m&#x27;</span>, <span class="string">&#x27; success \t\n&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">&#x27;\x1B[44m\x1B[1m%s\x1B[22m\x1B[49m %s\t\n&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27; prot &#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;http://&#x27;</span> + config.<span class="property">ip</span> + <span class="string">&#x27;:&#x27;</span> + config.<span class="property">port</span></span><br><span class="line">    )</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">&#x27;\x1B[44m\x1B[1m%s\x1B[22m\x1B[49m  %s\t\n&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27; proxy url &#x27;</span>,</span><br><span class="line">      config.<span class="property">url</span></span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getIpv4</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> net = os.<span class="title function_">networkInterfaces</span>()</span><br><span class="line">  <span class="keyword">let</span> ipv4</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> net) &#123;</span><br><span class="line">    net[key].<span class="title function_">forEach</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        element.<span class="property">address</span> !== <span class="string">&#x27;127.0.0.1&#x27;</span> &amp;&amp;</span><br><span class="line">        element.<span class="property">family</span>.<span class="title function_">toLocaleLowerCase</span>() === <span class="string">&#x27;ipv4&#x27;</span></span><br><span class="line">      )</span><br><span class="line">        ipv4 = element.<span class="property">address</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ipv4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<p><img src="/images/posts/node_proxy/20200629201153.png" alt="" loading="lazy"></p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 【Koa】</title>
    <url>/koa/</url>
    <content><![CDATA[<p>Koa 是 Node.js 的框架之一，使用洋葱模型，是一个轻量级的服务端应用。</p>
<h2 id="KOA-一些-API-的使用"><a href="#KOA-一些-API-的使用" class="headerlink" title="KOA 一些 API 的使用"></a>KOA 一些 API 的使用</h2><h3 id="设置响应头"><a href="#设置响应头" class="headerlink" title="设置响应头"></a>设置响应头</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.<span class="title function_">set</span>(<span class="string">&#x27;Allow&#x27;</span>, <span class="string">&#x27;GET,POST&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="批量注册路由-routes"><a href="#批量注册路由-routes" class="headerlink" title="批量注册路由 routes"></a>批量注册路由 routes</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建一个 app 目录，下建 routes 目录 下建index.js</span></span><br><span class="line"><span class="comment">// 路由批量处理脚本</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">// 批量化读取目录</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 同步读取目录</span></span><br><span class="line">  fs.<span class="title function_">readdirSync</span>(__dirname).<span class="title function_">forEach</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 过滤掉目录下的index.js</span></span><br><span class="line">    <span class="keyword">if</span> (file === <span class="string">&#x27;index.js&#x27;</span>) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="comment">// 绕过 index.js 就开始注册路由</span></span><br><span class="line">    <span class="keyword">const</span> route = <span class="built_in">require</span>(<span class="string">`./<span class="subst">$&#123;file&#125;</span>`</span>)</span><br><span class="line">    app.<span class="title function_">use</span>(route.<span class="title function_">routes</span>()).<span class="title function_">use</span>(route.<span class="title function_">allowedMethods</span>())</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">----------- 分割线  ------------</span><br><span class="line"><span class="comment">// 在app目录下的 index.js中</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>) <span class="comment">// 引入 Koa 依赖</span></span><br><span class="line"><span class="keyword">const</span> body = <span class="built_in">require</span>(<span class="string">&#x27;koa-body&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()  <span class="comment">// 实例化 Koa</span></span><br><span class="line"><span class="keyword">const</span> routing = <span class="built_in">require</span>(<span class="string">&#x27;./routes&#x27;</span>) <span class="comment">// 导入路由批量注册</span></span><br><span class="line"><span class="title function_">routing</span>(app) <span class="comment">// 调用这个函数</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">body</span>(&#123;</span><br><span class="line">  <span class="attr">multipart</span>: <span class="literal">true</span>,  <span class="comment">// 启用文件</span></span><br><span class="line">  <span class="attr">formidable</span>: &#123;</span><br><span class="line">    <span class="attr">uploadDir</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/public/uploads&#x27;</span>), <span class="comment">// 上传目录</span></span><br><span class="line">    <span class="attr">keepExtensions</span>: <span class="literal">true</span>  <span class="comment">// 保证拓展名</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)) <span class="comment">// 使用body中间件</span></span><br><span class="line"><span class="comment">// 开启端口服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;程序启动成功在3000端口&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="控制器的处理封装-controllers"><a href="#控制器的处理封装-controllers" class="headerlink" title="控制器的处理封装 controllers"></a>控制器的处理封装 controllers</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 app目录下新建 controllers 目录</span></span><br><span class="line"><span class="comment">// 目录中的文件名对应的是路由中的文件名</span></span><br><span class="line"><span class="comment">// 控制器的本质是中间件 中间件的本质就是函数, 用类+类方法的方式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HaomeCtl</span> &#123;</span><br><span class="line">  <span class="title function_">index</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;这是首页&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">new</span> <span class="title class_">HaomeCtl</span>()</span><br><span class="line"><span class="comment">// 然后在 route 目录中的 home.js 中如下使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>()</span><br><span class="line"><span class="comment">// 使用控制器</span></span><br><span class="line"><span class="keyword">const</span> &#123; index &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../controllers/home&#x27;</span>)</span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, index)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure>

<h3 id="错误处理中间件-koa-json-error"><a href="#错误处理中间件-koa-json-error" class="headerlink" title="错误处理中间件 koa-json-error"></a>错误处理中间件 koa-json-error</h3><p><code>npm install koa-json-error --save</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用</span></span><br><span class="line"><span class="keyword">const</span> error = <span class="built_in">require</span>(<span class="string">&#x27;koa-json-error&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">error</span>(&#123;</span><br><span class="line">    <span class="comment">// 定制返回格式  process.env.NODE_ENV 获取环境变量</span></span><br><span class="line">    <span class="attr">postFormat</span>: <span class="function">(<span class="params">e, &#123; stack, ...rest &#125;</span>) =&gt;</span></span><br><span class="line">      process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? rest : &#123; stack, ...rest &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="windows-系统跨平台设置环境变量"><a href="#windows-系统跨平台设置环境变量" class="headerlink" title="windows 系统跨平台设置环境变量"></a>windows 系统跨平台设置环境变量</h3><p><code>npm install cross-env --save-dev</code> 开发环境使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json 就可以这么设置</span></span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">      <span class="comment">// 注意 NODE_ENV=production  =号左右不能有间隙</span></span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production node app&quot;</span>, <span class="comment">// 生产</span></span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;nodemon app&quot;</span> <span class="comment">// 开发环境</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="koa-jwt-中间件"><a href="#koa-jwt-中间件" class="headerlink" title="koa-jwt 中间件"></a>koa-jwt 中间件</h3><p><code>npm i koa-jwt --save</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;koa-jwt&#x27;</span>)</span><br><span class="line"><span class="comment">// 使用 koa-jwt 认证 secret 是自己设置的密码</span></span><br><span class="line"><span class="keyword">const</span> auth = <span class="title function_">jwt</span>(&#123; secret &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="上传文件-使用-koa-body"><a href="#上传文件-使用-koa-body" class="headerlink" title="上传文件 使用 koa-body"></a>上传文件 使用 koa-body</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">body</span>(&#123;</span><br><span class="line">    <span class="attr">multipart</span>: <span class="literal">true</span>, <span class="comment">// 启用文件</span></span><br><span class="line">    <span class="attr">formidable</span>: &#123;</span><br><span class="line">      <span class="attr">uploadDir</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/public/uploads&#x27;</span>), <span class="comment">// 上传目录</span></span><br><span class="line">      <span class="attr">keepExtensions</span>: <span class="literal">true</span>, <span class="comment">// 保证拓展名</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 使用body中间件</span></span><br><span class="line"><span class="comment">// 控制器中</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HaomeCtl</span> &#123;</span><br><span class="line">  <span class="title function_">index</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;这是首页&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">upload</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="comment">// 注意这里</span></span><br><span class="line">    <span class="keyword">const</span> file = ctx.<span class="property">request</span>.<span class="property">files</span>.<span class="property">file</span></span><br><span class="line">    ctx.<span class="property">body</span> = &#123; <span class="attr">path</span>: file.<span class="property">path</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">new</span> <span class="title class_">HaomeCtl</span>()</span><br><span class="line"><span class="comment">// 在路由中使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>()</span><br><span class="line"><span class="comment">// 使用控制器</span></span><br><span class="line"><span class="keyword">const</span> &#123; index, upload &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../controllers/home&#x27;</span>)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, index).<span class="title function_">get</span>(<span class="string">&#x27;/upload&#x27;</span>, upload)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure>

<h3 id="使用-koa-static-中间件生成图片链接"><a href="#使用-koa-static-中间件生成图片链接" class="headerlink" title="使用 koa-static 中间件生成图片链接"></a>使用 koa-static 中间件生成图片链接</h3><p><code>npm i koa-static --save</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koaStatic = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">koaStatic</span>(</span><br><span class="line">    <span class="comment">// 放最前面，静态文件 use 都写在前面</span></span><br><span class="line">    path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"><span class="comment">// ----&gt;</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HaomeCtl</span> &#123;</span><br><span class="line">  <span class="title function_">index</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;这是首页&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">upload</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> file = ctx.<span class="property">request</span>.<span class="property">files</span>.<span class="property">file</span></span><br><span class="line">    <span class="keyword">const</span> basename = path.<span class="title function_">basename</span>(file.<span class="property">path</span>)</span><br><span class="line">    ctx.<span class="property">body</span> = &#123; <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;ctx.origin&#125;</span>/uploads<span class="subst">$&#123;basename&#125;</span>`</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">new</span> <span class="title class_">HaomeCtl</span>()</span><br></pre></td></tr></table></figure>

<h2 id="Koa-的使用"><a href="#Koa-的使用" class="headerlink" title="Koa 的使用"></a>Koa 的使用</h2><h3 id="初用-koa"><a href="#初用-koa" class="headerlink" title="初用 koa"></a>初用 koa</h3><p><code>npm install koa --save</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 koa 模块</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 koa 实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;哈哈 你好 koa2 我来学习你了&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3001</span>)</span><br></pre></td></tr></table></figure>

<h3 id="koa-router"><a href="#koa-router" class="headerlink" title="koa-router"></a>koa-router</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">prefix</span>(prefix) =&gt; <span class="title class_">Router</span> <span class="comment">// 加前缀</span></span><br><span class="line"><span class="keyword">const</span> usersRouter = <span class="keyword">new</span> <span class="title class_">Router</span>().<span class="title function_">prefix</span>(<span class="string">&#x27;/users&#x27;</span>) <span class="comment">// 配置前缀</span></span><br></pre></td></tr></table></figure>

<p><code>npm install koa-router --save</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)</span><br><span class="line"><span class="comment">// 也可以引入并实例化</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)()</span><br><span class="line">===&gt; 上面更精简</span><br><span class="line">或者 <span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)</span><br><span class="line">     <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>()</span><br><span class="line"><span class="comment">// 启动路由</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>()) <span class="comment">// 记得引入koa 并创建实例后使用这个中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="property">allowedMethods</span>) <span class="comment">// 响应options方法，告知所支付的方法</span></span><br><span class="line"><span class="comment">// 而且会返回405 及 501状态码 请求的方法还没写及不支持该方法</span></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">ctx,next</span>)=&gt;</span>&#123;  <span class="comment">// next 是下一个中间件</span></span><br><span class="line">    cty.<span class="property">body</span> = <span class="string">&#x27;hello koa&#x27;</span></span><br><span class="line">&#125;) <span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 koa 模块</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="comment">// 引入 koa 路由模块</span></span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 koa 实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"><span class="comment">// 创建一个 router 实例</span></span><br><span class="line"><span class="comment">// const router = new Router()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用路由</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>()).<span class="title function_">use</span>(router.<span class="property">allowedMethods</span>) <span class="comment">// 帮你自动添加响应头</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置路由</span></span><br><span class="line">router</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;首页&#x27;</span> <span class="comment">// 返回数据 原生里面res.end/write</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/news&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;新闻页面&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/newscontent&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;新闻详情&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3001</span>)</span><br></pre></td></tr></table></figure>

<h3 id="koa-中间件"><a href="#koa-中间件" class="headerlink" title="koa 中间件"></a>koa 中间件</h3><ul>
<li>应用级中间件，比如 <code>app.use()</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 中间件 通过 next () 实现</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>路由级中间件：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/newscontent&#x27;</span>, <span class="keyword">async</span> (ctx,next) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;新闻详情&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/newscontent&#x27;</span>,<span class="title function_">async</span>(ctx, next)=&gt;&#123;</span><br><span class="line">     ctx.<span class="property">body</span> = <span class="string">&#x27;新闻详情&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>错误处理中间件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意要写在上面 执行顺序 上下文</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个中间件&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">  <span class="keyword">if</span> (ctx.<span class="property">status</span> == <span class="number">404</span>) &#123;</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">404</span></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;这是一个404页面&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">url</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>第三方中间件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">比如静态服务中间件</span><br><span class="line">post 中间件等等</span><br></pre></td></tr></table></figure>

<ul>
<li>中间件配置公共信息</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.<span class="property">state</span> = &#123;</span><br><span class="line">    <span class="comment">// 配置公共信息</span></span><br><span class="line">&#125;</span><br><span class="line">----- 实例 -----</span><br><span class="line"> <span class="comment">// 写一个中间件来配置公共的信息</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 这样配置了 任何一个路由都可以使用这个数据</span></span><br><span class="line">  ctx.<span class="property">state</span>.<span class="property">useinfo</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">  <span class="title function_">next</span>()  <span class="comment">// 继续向下匹配路由</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="koa-中的-ejs-模板引擎"><a href="#koa-中的-ejs-模板引擎" class="headerlink" title="koa 中的 ejs 模板引擎"></a>koa 中的 ejs 模板引擎</h3><p><code>npm install koa-views --save &amp;&amp; npm install ejs --save</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">const</span> views = <span class="built_in">require</span>(<span class="string">&#x27;koa-views&#x27;</span>)</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="comment">// 这样配置后缀是 html</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">views</span>(<span class="string">&#x27;views&#x27;</span>, &#123; <span class="attr">map</span>: &#123; <span class="attr">html</span>: <span class="string">&#x27;ejs&#x27;</span> &#125; &#125;))</span><br><span class="line"><span class="comment">// 这样配置后缀是 ejs</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">views</span>(<span class="string">&#x27;views&#x27;</span>, &#123; <span class="attr">extension</span>: <span class="string">&#x27;ejs&#x27;</span> &#125;))</span><br><span class="line"><span class="comment">// 通过 await ctx.render() 渲染 ejs 模板引擎</span></span><br><span class="line"><span class="keyword">await</span> ctx.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> title = <span class="string">&#x27;我是要传入 ejs 文件中的数据&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>]</span><br><span class="line">    <span class="keyword">await</span> ctx.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;   <span class="comment">// 绑定数据 真实数据要从数据库拿</span></span><br><span class="line">      title,</span><br><span class="line">      arr</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// ejs 文件中</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是一个 ejs 的模板引擎<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&lt;%=title%&gt;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &lt;%for (var i = 0; i&lt;arr.length; i++)&#123;%&gt;  // 循环 ejs 数据</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>&lt;%=arr[i]%&gt;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &lt;%&#125;%&gt;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入某个 ejs 模块的内容</span></span><br><span class="line">&lt;% include public/header.<span class="property">ejs</span>%&gt; <span class="comment">// 在index.ejs 引入 public/header.ejs</span></span><br><span class="line"><span class="comment">// 解析 html 标签</span></span><br><span class="line"> &lt;%-content%&gt;</span><br></pre></td></tr></table></figure>

<h3 id="koa-中-处理-post-的-koa-bodyparser-中间件"><a href="#koa-中-处理-post-的-koa-bodyparser-中间件" class="headerlink" title="koa 中 处理 post 的 koa-bodyparser 中间件"></a>koa 中 处理 post 的 koa-bodyparser 中间件</h3><p><code>npm install koa-bodyparser --save</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入配置中间件</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>)</span><br><span class="line"><span class="comment">// 使用中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>())</span><br><span class="line"><span class="comment">// 获取表单提交的 post 数据</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/doAdd&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 获取表单提交的数据</span></span><br><span class="line">  ctx.<span class="property">body</span> = ctx.<span class="property">request</span>.<span class="property">body</span> <span class="comment">// 获取</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="koa-static-静态资源中间件"><a href="#koa-static-静态资源中间件" class="headerlink" title="koa-static 静态资源中间件"></a>koa-static 静态资源中间件</h3><p><strong>npm install koa-static –save</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>)</span><br><span class="line"><span class="comment">// 使用 配置静态 web 服务的中间件</span></span><br><span class="line"><span class="comment">// 去static目录找 找到返回 找不到继续next</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">static</span>(__dirname+<span class="string">&#x27;/public&#x27;</span>))</span><br><span class="line"><span class="comment">// 静态资源中间件可以配置多个</span></span><br><span class="line">------------ 分割线 ------------</span><br><span class="line"><span class="comment">// 配置中间件 获取url的地址</span></span><br><span class="line">router.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 模板引擎配置全局变量</span></span><br><span class="line">  ctx.<span class="property">state</span>.<span class="property">__HOST__</span> = <span class="string">&#x27;http://&#x27;</span> + ctx.<span class="property">request</span>.<span class="property">header</span>.<span class="property">host</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 使用配置的HOST变量</span></span><br><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;&#123;&#123;__HOST__&#125;&#125;/admin/css/font-aw.min.css&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="art-template-模板引擎"><a href="#art-template-模板引擎" class="headerlink" title="art-template 模板引擎"></a>art-template 模板引擎</h3><p><code>npm install art-template --save &amp;&amp; npm install koa-art-template --save</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">const</span> render = <span class="built_in">require</span>(<span class="string">&#x27;koa-art-template&#x27;</span>)</span><br><span class="line"><span class="comment">// 配置 koa-art-template 模板引擎</span></span><br><span class="line"><span class="title function_">render</span>(app, &#123;</span><br><span class="line">  <span class="attr">root</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>), <span class="comment">// 视图的位置</span></span><br><span class="line">  <span class="attr">extname</span>: <span class="string">&#x27;.html&#x27;</span>, <span class="comment">// 后缀名</span></span><br><span class="line">  <span class="attr">debug</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>, <span class="comment">// 是否开启调试</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">await</span> ctx.<span class="title function_">render</span>(<span class="string">&#x27;user&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;include <span class="string">&#x27;public/footer.html&#x27;</span>&#125;&#125; <span class="comment">// 引入公共文件</span></span><br><span class="line">&#123;&#123;obj.<span class="property">name</span>&#125;&#125; <span class="comment">// 获取值</span></span><br><span class="line">&#123;&#123;@obj.<span class="property">h</span>&#125;&#125; <span class="comment">// 获取标签元素</span></span><br><span class="line">&#123;&#123;<span class="keyword">if</span> num &gt;<span class="number">20</span>&#125;&#125; 大于 <span class="number">20</span> &#123;&#123;<span class="keyword">else</span>&#125;&#125; 小于等于 <span class="number">20</span> &#123;&#123;<span class="regexp">/if&#125;&#125; /</span><span class="regexp">/ 条件判断</span></span><br><span class="line"><span class="regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ each 循环</span></span><br><span class="line"><span class="regexp">  &#123;&#123;each obj.arr&#125;&#125;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;&#123;&#123;$index&#125;&#125; ----  &#123;&#123;$value&#125;&#125;&lt;/</span>li&gt;</span><br><span class="line">  &#123;&#123;/each&#125;&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="comment">// NODE JS 文件中</span></span><br><span class="line">router</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;   <span class="comment">// 这些数据真实的应该从数据库拿 这里模拟</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">      <span class="attr">h</span>: <span class="string">&#x27;&lt;h1&gt;我是一个h1&lt;/h1&gt;&#x27;</span>,</span><br><span class="line">      <span class="attr">num</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">arr</span>: [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> ctx.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;</span><br><span class="line">      obj</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="koa-中-cookie-的使用"><a href="#koa-中-cookie-的使用" class="headerlink" title="koa 中 cookie 的使用"></a>koa 中 cookie 的使用</h3><ul>
<li>保存用户信息</li>
<li>浏览器历史记录</li>
<li>猜你喜欢的功能</li>
<li>10 天免登陆</li>
<li>多个页面之间的数据传递</li>
</ul>
<p><strong>cookie 参数：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">maxAage <span class="comment">// 设置过期时间</span></span><br><span class="line">expires <span class="comment">// cookie 过期的 Date  这里设置具体的时间</span></span><br><span class="line">path <span class="comment">// coolie 路径 默认是&#x27;/&#x27;  配置可以拿到cookie的路由</span></span><br><span class="line">domain <span class="comment">// cookie 域名</span></span><br><span class="line">secure <span class="comment">// 安全 cookie 默认 false 设置成 true 只能 https 访问</span></span><br><span class="line">httpOnly <span class="comment">// 是否只有服务器可以访问 cookie 默认是 true</span></span><br><span class="line">overwrite <span class="comment">// 默认 false 如果是 true 会覆盖过滤</span></span><br></pre></td></tr></table></figure>

<p><strong>koa 中设置 和获取 cookie 的值:</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置 cookie 的值</span></span><br><span class="line">ctx.<span class="property">cookies</span>.<span class="title function_">set</span>(name.<span class="property">value</span>,[options])</span><br><span class="line"><span class="comment">// 获取 cookie 的值</span></span><br><span class="line">ctx.<span class="property">cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="comment">// 中文问题</span></span><br><span class="line">设置的时候先把先将它转成 ‘ base64 ’ 编码来存储　　</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Buffer</span>(value).<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">使用的时候再转换回来</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Buffer</span>(value,<span class="string">&#x27;base64&#x27;</span>).<span class="title function_">toString</span>()</span><br></pre></td></tr></table></figure>

<h3 id="koa-中的-session"><a href="#koa-中的-session" class="headerlink" title="koa 中的 session"></a>koa 中的 session</h3><p><strong>session 的工作流程：</strong></p>
<p>当浏览器访问服务器并发送第一个请求时，服务器会创建一个 session 对象，生成一个类似于 key,value 的键值对，然后将 key(cookie)返回到浏览器(客户端)，浏览器下次再访问时，携带 key(cookie)，找到对应的 session(value),客户的信息保存在 session 中。</p>
<p><strong>koa-session 的使用：</strong></p>
<p><code>npm install koa-session --sava</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;koa-session&#x27;</span>)</span><br><span class="line"><span class="comment">// 配置 session 中间件</span></span><br><span class="line">app.<span class="property">keys</span> = [<span class="string">&#x27;some secret hurr&#x27;</span>] <span class="comment">// 这个是配合signed属性的签名ke</span></span><br><span class="line"><span class="comment">// 配置信息</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CONFIG</span> = &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;koa:sess&#x27;</span>, <span class="comment">//cookie key (default is koa:sess)</span></span><br><span class="line">  <span class="attr">maxAge</span>: <span class="number">86400000</span>, <span class="comment">// cookie 的过期时间 maxAge in ms (default is 1 days)</span></span><br><span class="line">  <span class="attr">overwrite</span>: <span class="literal">true</span>, <span class="comment">//是否可以 overwrite (默认 default true)</span></span><br><span class="line">  <span class="attr">httpOnly</span>: <span class="literal">true</span>, <span class="comment">//cookie 是否只有服务器端可以访问 httpOnly or not (default true)</span></span><br><span class="line">  <span class="attr">signed</span>: <span class="literal">true</span>, <span class="comment">//签名默认 true</span></span><br><span class="line">  <span class="attr">rolling</span>: <span class="literal">false</span>, <span class="comment">//在每次请求时强行设置 cookie，这将重置 cookie 过期时间（默认：false）</span></span><br><span class="line">  <span class="attr">renew</span>: <span class="literal">false</span>, <span class="comment">//(boolean) renew session when session is nearly expired,</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(<span class="variable constant_">CONFIG</span>, app))</span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line">ctx.<span class="property">session</span>.<span class="property">username</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">session</span>.<span class="property">userinfo</span>)</span><br></pre></td></tr></table></figure>

<p>栗：</p>
<p>🔔 注意：使用路由一定把启动路由放在下面 否则拿不到 <code>session</code> 的数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置路由</span></span><br><span class="line">router</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">session</span>.<span class="property">userinfo</span>) <span class="comment">// 获取 session</span></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;首页&#x27;</span> + ctx.<span class="property">session</span>.<span class="property">userinfo</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/news&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">session</span>.<span class="property">userinfo</span>) <span class="comment">// 获取 session</span></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">`登录成功`</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">session</span>.<span class="property">userinfo</span> = <span class="string">&#x27;张三&#x27;</span> <span class="comment">// 设置 session</span></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">`登录成功`</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收 post 提交的数据</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/doAdd&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 获取表单提交的数据</span></span><br><span class="line">  ctx.<span class="property">body</span> = ctx.<span class="property">request</span>.<span class="property">body</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用路由 要放在下面位置 不然巨坑 拿不到session的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>()).<span class="title function_">use</span>(router.<span class="property">allowedMethods</span>)</span><br></pre></td></tr></table></figure>

<h3 id="MongoDB-的封装及使用"><a href="#MongoDB-的封装及使用" class="headerlink" title="MongoDB 的封装及使用"></a>MongoDB 的封装及使用</h3><p>ES6 的简单封装单例模式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Db</span> &#123;</span><br><span class="line">  <span class="comment">// 静态方法实现单例</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Db</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">      <span class="title class_">Db</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">Db</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Db</span>.<span class="property">instance</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;实例化触发构造函数&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">connect</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;链接数据库&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">find</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查询数据库&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDb = <span class="title class_">Db</span>.<span class="title function_">getInstance</span>()</span><br></pre></td></tr></table></figure>

<p>安装以及简单使用：</p>
<p><code>npm install mongodb --save-dev</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MongoClient</span> = <span class="built_in">require</span>(<span class="string">&#x27;mongodb&#x27;</span>).<span class="property">MongoClient</span></span><br><span class="line"><span class="comment">// 定义地址</span></span><br><span class="line"><span class="keyword">const</span> dbUrl = <span class="string">&#x27;mongodb://localhost:27017/&#x27;</span></span><br><span class="line"><span class="keyword">const</span> dbName = <span class="string">&#x27;demo&#x27;</span> <span class="comment">// 要链接的数据库名字</span></span><br><span class="line"><span class="comment">// 链接数据库</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;start&#x27;</span>) <span class="comment">// 测试事件</span></span><br><span class="line"><span class="title class_">MongoClient</span>.<span class="title function_">connect</span>(dbUrl, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> &#125;, <span class="function">(<span class="params">err, client</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 链接上 db 数据库</span></span><br><span class="line">  <span class="keyword">let</span> db = client.<span class="title function_">db</span>(dbName)</span><br><span class="line">  <span class="comment">// 增加数据</span></span><br><span class="line">  db.<span class="title function_">collection</span>(<span class="string">&#x27;user&#x27;</span>).<span class="title function_">insertOne</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;王武&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">32</span>,</span><br><span class="line">      <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;增加数据成功&#x27;</span>)</span><br><span class="line">        <span class="comment">// 关闭数据库</span></span><br><span class="line">        client.<span class="title function_">close</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;start&#x27;</span>) <span class="comment">// 测试事件</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 查询数据</span></span><br><span class="line"><span class="comment">// 拿到所有该数据库下某个集合的所有数据</span></span><br><span class="line"><span class="keyword">let</span> result = db.<span class="title function_">collection</span>(<span class="string">&#x27;user&#x27;</span>).<span class="title function_">find</span>(&#123;&#125;)</span><br><span class="line">result.<span class="title function_">toArray</span>(<span class="function">(<span class="params">err, docs</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(docs)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>提高性能，单例封装:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config.js</span></span><br><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">  <span class="comment">// 数据库的 url</span></span><br><span class="line">  <span class="attr">dbUrl</span>: <span class="string">&#x27;mongodb://localhost:27017&#x27;</span>,</span><br><span class="line">  <span class="comment">// 链接的数据库名称</span></span><br><span class="line">  <span class="attr">dbName</span>: <span class="string">&#x27;demo&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露配置信息出去</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app;</span><br><span class="line">------------ 分割 ---------</span><br><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MongoClient</span> = <span class="built_in">require</span>(<span class="string">&#x27;mongodb&#x27;</span>).<span class="property">MongoClient</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ObjectID</span> = <span class="built_in">require</span>(<span class="string">&#x27;mongodb&#x27;</span>).<span class="property">ObjectID</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Config</span> = <span class="built_in">require</span>(<span class="string">&#x27;./config.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装类库</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Db</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 单例模式</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Db</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">      <span class="title class_">Db</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">Db</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Db</span>.<span class="property">instance</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dbClient</span> = <span class="string">&#x27;&#x27;</span>;  <span class="comment">// 属性 放db对象 为了只链接一次</span></span><br><span class="line">    <span class="comment">// 初始化的时候链接数据库</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">connect</span>()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 链接数据库</span></span><br><span class="line">  <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">dbClient</span>) &#123;</span><br><span class="line">        <span class="title class_">MongoClient</span>.<span class="title function_">connect</span>(<span class="title class_">Config</span>.<span class="property">dbUrl</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> &#125;, <span class="function">(<span class="params">err, client</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;链接数据库失败&#x27;</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> db = client.<span class="title function_">db</span>(<span class="title class_">Config</span>.<span class="property">dbName</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dbClient</span> = db;</span><br><span class="line">            <span class="title function_">resolve</span>(db);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">dbClient</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 查询数据</span></span><br><span class="line">  <span class="title function_">find</span>(<span class="params">collectionName, json</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">connect</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">db</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = db.<span class="title function_">collection</span>(collectionName).<span class="title function_">find</span>(json);</span><br><span class="line">        result.<span class="title function_">toArray</span>(<span class="function">(<span class="params">err, docs</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;数据找不到对应的集合（表）,请检查&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="title function_">resolve</span>(docs)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 更新数据</span></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">collectionName, json1, json2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">connect</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">db</span>) =&gt;</span> &#123;</span><br><span class="line">        db.<span class="title function_">collection</span>(collectionName).<span class="title function_">updateOne</span>(json1, &#123;</span><br><span class="line">          <span class="attr">$set</span>: json2</span><br><span class="line">        &#125;, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;更新数据失败&#x27;</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(result)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 增加数据</span></span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">collectionName, json</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">connect</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">db</span>) =&gt;</span> &#123;</span><br><span class="line">        db.<span class="title function_">collection</span>(collectionName).<span class="title function_">insertOne</span>(json, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;添加数据失败&#x27;</span>)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(result)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">collectionName, json</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">connect</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">db</span>) =&gt;</span> &#123;</span><br><span class="line">        db.<span class="title function_">collection</span>(collectionName).<span class="title function_">removeOne</span>(json, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;删除数据失败&#x27;</span>)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(result)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 封装获取id</span></span><br><span class="line">  <span class="comment">// mongodb 里面查询_id 吧字符串转换成对象</span></span><br><span class="line">  <span class="title function_">getObjectId</span>(<span class="params">id</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectID</span>(id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let myDb = Db.getInstance()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// myDb.find(&#x27;user&#x27;, &#123;&#125;).then((data) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(data);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Db</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"><span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.time(&#x27;start1&#x27;);</span></span><br><span class="line"><span class="comment">//   myDb.find(&#x27;user&#x27;, &#123;&#125;).then((data) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     // console.log(data);</span></span><br><span class="line"><span class="comment">//     console.timeEnd(&#x27;start1&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// &#125;, 1000);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.time(&#x27;start2&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   myDb.find(&#x27;user&#x27;, &#123;&#125;).then((data) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     // console.log(data);</span></span><br><span class="line"><span class="comment">//     console.timeEnd(&#x27;start2&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// &#125;, 3000);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.time(&#x27;start3&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   myDb.find(&#x27;user&#x27;, &#123;&#125;).then((data) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     // console.log(data);</span></span><br><span class="line"><span class="comment">//     console.timeEnd(&#x27;start3&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// &#125;, 5000);</span></span><br></pre></td></tr></table></figure>

<p>简单的使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">get</span>(<span class="string">&#x27;/add&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">   <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="variable constant_">DB</span>.<span class="title function_">insert</span>(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">     <span class="attr">username</span>: <span class="string">&#x27;赵六&#x27;</span>,</span><br><span class="line">     <span class="attr">age</span>: <span class="number">26</span>,</span><br><span class="line">     <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span>,</span><br><span class="line">     <span class="attr">status</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">result</span>);</span><br><span class="line"> &#125;)</span><br><span class="line"> .<span class="title function_">get</span>(<span class="string">&#x27;/edit&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">   <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="variable constant_">DB</span>.<span class="title function_">update</span>(<span class="string">&#x27;user&#x27;</span>,&#123;</span><br><span class="line">     <span class="attr">username</span>: <span class="string">&#x27;张三的小弟&#x27;</span></span><br><span class="line">   &#125;,&#123;</span><br><span class="line">     <span class="attr">username</span>: <span class="string">&#x27;我是祁连山,不是张三他小弟&#x27;</span></span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">result</span>);</span><br><span class="line"> &#125;)</span><br><span class="line"> .<span class="title function_">get</span>(<span class="string">&#x27;/delete&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">   <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="variable constant_">DB</span>.<span class="title function_">remove</span>(<span class="string">&#x27;user&#x27;</span>,&#123;</span><br><span class="line">     <span class="attr">username</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">result</span>);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<p>小技巧：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重定向 执行完某些操作让跳转到哪里</span></span><br><span class="line">ctx.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"><span class="comment">// 跳转的时候绑定唯一的 id，下面用的 art-template 模板引擎语法</span></span><br><span class="line">&lt;td&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/edit?id=&#123;&#123;@$value._id&#125;&#125;&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 查询 id</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ObjectID</span> = <span class="built_in">require</span>(<span class="string">&#x27;mongodb&#x27;</span>).<span class="property">ObjectID</span>;</span><br></pre></td></tr></table></figure>

<h3 id="验证码模块-svgCaptcha"><a href="#验证码模块-svgCaptcha" class="headerlink" title="验证码模块 svgCaptcha"></a>验证码模块 svgCaptcha</h3><p><code>npm install --save svg-captcha</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> svgCaptcha = <span class="built_in">require</span>(<span class="string">&#x27;svg-captcha&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> captcha = svgCaptcha.<span class="title function_">create</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">size</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">fontSize</span>: <span class="number">50</span>,</span><br><span class="line">      <span class="attr">width</span>: <span class="number">120</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="number">34</span>,</span><br><span class="line">      <span class="attr">background</span>: <span class="string">&quot;#cc9966&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="comment">// captcha.text 是4位数的验证码</span></span><br><span class="line">  <span class="comment">//console.log(captcha.text);</span></span><br><span class="line"></span><br><span class="line">  ctx.<span class="property">session</span>.<span class="property">code</span> = captcha.<span class="property">text</span>;</span><br><span class="line">  <span class="comment">// 设置它的响应头</span></span><br><span class="line">  ctx.<span class="property">response</span>.<span class="property">type</span> = <span class="string">&#x27;image/svg+xml&#x27;</span>;</span><br><span class="line">  ctx.<span class="property">body</span> = captcha.<span class="property">data</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// mate 五秒跳转</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;5; url=&#x27;http://www.qq.com/&#x27;&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="利用-koa-jsonp-写-api-接口"><a href="#利用-koa-jsonp-写-api-接口" class="headerlink" title="利用 koa-jsonp 写 api 接口"></a>利用 koa-jsonp 写 api 接口</h3><p><code>npm install koa-jsonp --save</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">const</span> jsonp = <span class="built_in">require</span>(<span class="string">&#x27;koa-jsonp&#x27;</span>)</span><br><span class="line"><span class="comment">// 配置</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">jsonp</span>())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解 JavaScript 事件（ 第1章 ）</title>
    <url>/jsasync/</url>
    <content><![CDATA[<p>事件！事件到底是怎么工作的？JavaScrip t出现了多久，对 JavaScript 异步事件模型就迷惘了多久。迷惘导致 bug，bug 导致愤怒，然后尤达大师就会教我们如何如何……不过本质上，从概念上看，JavaScript事件模型既优雅又实用。一旦大家接受了这种语言的单线程设计，就会觉得 JavaScript 事件模型更像是一种功能，而不是一种局限。它意味着我们的代码是不可中断的，也意味着调度的事件会整整齐齐排好队，有条不紊地运行。本章将介绍JavaScript的异步机制，并破除一些常见的误解。我们会看到setTimeout 真正做了些什么。接着会讨论回调中抛出错误的处理。最后会奠定本书的主旨：为了清晰和可维护性，努力组织异步代码。<br> <span id="more"></span></p>
<h2 id="事件的调度"><a href="#事件的调度" class="headerlink" title="事件的调度"></a>事件的调度</h2><p>如果想让 JavaScript 中的某段代码将来再运行，可以将它放在回调中。回调就是一种普通函数，只不过它是传给像 setTimeout 这样的函数，或者绑定为像 document.onready 这样的属性。运行回调时，我们称已触发某事件（譬如延时结束或页面加载完毕）。当然，可怕的总是那些细节，哪怕是像 setTimeout 这样看起来很简单的东西。对 setTimeout 的描述通常像这样：</p>
<blockquote>
<p>给定一个回调及n毫秒的延迟，setTimeout就会在n毫秒后运行该回调。</p>
</blockquote>
<p>但是，正如我们将在这一节乃至这一章里看到的，以上描述存在严重缺陷。大多数情况下，该描述只能算接近正确，而在其他情况下则完全是谬误。要想真正理解 setTimeout，必须先大体理解 JavaScript 事件模型。</p>
<h3 id="现在还是将来运行"><a href="#现在还是将来运行" class="headerlink" title="现在还是将来运行"></a>现在还是将来运行</h3><p>在探究setTimeout之前，先来看一个简单的例子。该情形常常会迷惑JavaScript新手，特别是那些刚刚从Java和Ruby等多线程语言迁移过来的新手</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;   </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i); </span><br><span class="line">    &#125;, <span class="number">0</span>); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>4 4 4 </p>
<p>大多数刚接触JavaScript语言的人都会认为以上循环会输出1，2，3，或者重复输出这3个数字，因为这里的3次延时都抢着要第一个触发（每次暂停都调度为0毫秒后到时）。</p>
<p>要理解为什么输出是4，4，4，需要知道以下3件事。</p>
<blockquote>
<p>1: 这里只有一个名为i的变量，其作用域由声明语句var i定义（该声明语句在不经意间让i的作用域不是循环内部，而是扩散至蕴含循环的那个最内侧函数）。<br>2: 循环结束后，i===4一直递增，直到不再满足条件i&lt;=3为止。<br>3: JavaScript事件处理器在线程空闲之前不会运行。</p>
</blockquote>
<p>前两条还属于JavaScript 101的范畴，但第三个更像是一个“惊喜”。一开始使用JavaScript的时候，我也不太相信会这样。Java令我担心自己的代码随时会被中断。上百万种潜在的边界情况让我焦虑万分，我一直在想：“要是在这两行代码之间发生了什么稀奇古怪的事，会怎么样呢？”然后，终于有一天，我再也没有这样的担心了……</p>
<h3 id="线程的阻塞"><a href="#线程的阻塞" class="headerlink" title="线程的阻塞"></a>线程的阻塞</h3><p>下面这段代码打破了我对JavaScript事件的成见。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EventModel/loopBlockingTimeout.js </span></span><br><span class="line"><span class="keyword">var</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>; </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; </span><br><span class="line">     <span class="keyword">var</span> end = <span class="keyword">new</span> <span class="title class_">Date</span>;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Time elapsed:&#x27;</span>, end - start, <span class="string">&#x27;ms&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">new</span> <span class="title class_">Date</span> - start &lt; <span class="number">1000</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>按照多线程的思维定势，我会预计500毫秒后计时函数就会运行。不过这要求中断欲持续整整一秒钟的循环。如果运行代码，会得到类似这样的结果：</p>
<p>Time elapsed: 1002ms</p>
<p>大家得到的数字可能会稍有不同，这是因为setTimeout和setIn- terval一样，  其计时精度要比我们的期望值差很多（请参阅1.2.2节）。不过，这个数字肯定至少是1000，因为setTimeout回调在while循环结束运行之前不可能被触发。</p>
<p>那么，如果setTimeout没有使用另一个线程，那它到底在做什么呢？</p>
<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>调用setTimeout的时候，会有一个延时事件排入队列。然后setTimeout调用之后的那行代码运行，接着是再下一行代码，直到再也没有任何代码。这时JavaScript虚拟机才会问：“队列里都有谁啊？”</p>
<p>如果队列中至少有一个事件适合于“触发”（就像1000毫秒之前设定好的那个为期500毫秒的延时事件），则虚拟机会挑选一个事件，并调用此事件的处理器（譬如传给setTimeout的那个函数）。事件处理器返回后，我们又回到队列处。</p>
<p>输入事件的工作方式完全一样：用户单击一个已附加有单击事件处理器的DOM（Document Object Model，文档对象模型）元素时，会有一个单击事件排入队列。但是，该单击事件处理器要等到当前所有正在运行的代码均已结束后（可能还要等其他此前已排队的事件也依次结束）才会执行。因此，使用JavaScript的那些网页一不小心就会变得毫无反应。你可能听过事件循环这个术语，它是用于描述队列工作方式的。所谓事件循环，就像代码从一个循环中不断取出而运行一样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">runYourScript</span>();</span><br><span class="line"><span class="keyword">while</span> (atLeastOneEventIsQueued) &#123; </span><br><span class="line">       <span class="title function_">fireNextQueuedEvent</span>(); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这隐含着一个意思，即触发的每个事件都会位于堆栈轨迹的底部。关于这一点，1.4节会进一步阐述。</p>
<p>事件的易调度性是JavaScript语言最大的特色之一。像setTimeout这样的异步函数只是简单地做延迟执行，而不是孵化新的线程。JavaScript代码永远不会被中断，这是因为代码在运行期间只需要排队事件即可，而这些事件在代码运行结束之前不会被触发。</p>
<p>下一节将更细致地考查异步JavaScript代码的构造块。</p>
<h2 id="异步函数的类型"><a href="#异步函数的类型" class="headerlink" title="异步函数的类型"></a>异步函数的类型</h2><p>每一种JavaScript环境都有自己的异步函数集。有些函数，如setTimeout和setInterval，是各种JavaScript环境普遍都有的。另一些函数则专属于某些浏览器或某几种服务器端框架。JavaScript环境提供的异步函数通常可以分为两大类：I/O函数和计时函数。如果想在应用中定义复杂的异步行为，就要使用这两类异步函数作为基本的构造块。</p>
<h3 id="异步的I-O函数"><a href="#异步的I-O函数" class="headerlink" title="异步的I/O函数"></a>异步的I/O函数</h3><p>创造Node.js，并不是为了人们能在服务器上运行JavaScript，仅仅是因为Ryan Dahl想要一个建立在某高级语言之上的事件驱动型服务器框架。JavaScript碰巧就是适合干这个的语言。为什么？因为JavaScript语言可以完美地实现非阻塞式I/O。</p>
<p>在其他语言中，一不小心就会“阻塞”应用（通常是运行循环）直到完成I/O请求为止。而在JavaScript中，这种阻塞方式几乎沦为无稽之谈。类似如下的循环将永远运行下去，不可能停下来。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ajaxRequest = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>; </span><br><span class="line">ajaxRequest.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url); </span><br><span class="line">ajaxRequest.<span class="title function_">send</span>(<span class="literal">null</span>); </span><br><span class="line"><span class="keyword">while</span> (ajaxRequest.<span class="property">readyState</span> === <span class="title class_">XMLHttpRequest</span>.<span class="property">UNSENT</span>) &#123;  </span><br><span class="line">     <span class="comment">// readyState在循环返回之前不会有更改。</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>

<p>相反，我们需要附加一个事件处理器，随即返回事件队列。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ajaxRequest = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>; </span><br><span class="line">ajaxRequest.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line">ajaxRequest.<span class="title function_">send</span>(<span class="literal">null</span>); </span><br><span class="line">ajaxRequest.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>就是这么回事。不论是在等待用户的按键行为，还是在等待远程服务器的批量数据，所需要做的就是定义一个回调，除非JavaScript环境提供的某个同步I/O函数已经替我们完成了阻塞。</p>
<p>在浏览器端，Ajax方法有一个可设置为false的async选项（但永远、永远别这么做），这会挂起整个浏览器窗格直到收到应答为止。在Node.js中，同步的API方法在名称上会有明确的标示，譬如fs.readFileSync。编写短小的脚本时，这些同步方法会很方便。但是，如果所编写的应用需要处理并行的多个请求或多项操作，则应该避免使用它们。可在今天，还有哪个应用不是这样的呢？</p>
<p>有些I/O函数既有同步效应，也有异步效应。举例来说，在现代浏览器中操纵DOM对象时，从脚本角度看，更改是即时生效的，但从视效角度看，在返回事件队列之前不会渲染这些DOM对象更改。这可以防止DOM对象被渲染成不一致的状态。</p>
<blockquote>
<p>console.log是异步的吗？</p>
</blockquote>
<p>WebKit的console.log由于表现出异步行为而让很多开发者惊诧不已。在Chrome或Safari中，以下这段代码会在控制台记录{foo:bar}。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;    </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);    </span><br><span class="line">obj.<span class="property">foo</span> = <span class="string">&#x27;bar&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>怎么会这样？We b K i t的console.log并没有立即拍摄对象快照，相反，它只存储了一个指向对象的引用，然后在代码返回事件队列时才去拍摄快照。Node的console.log是另一回事，它是严格同步的，因此同样的代码输出的却为{}。</p>
<p>JavaScript采用了非阻塞式I/O，这对新手来说是最大的一个障碍，但这同样也是该语言的核心优势之一。有了非阻塞式I/O，就能自然而然地写出高效的基于事件的代码。</p>
<h3 id="异步的计时函数"><a href="#异步的计时函数" class="headerlink" title="异步的计时函数"></a>异步的计时函数</h3><p>我们已经看到，异步函数非常适合用于I/O操作，但有些时候，我们仅仅是因为需要异步而想要异步性。换句话说，我们想让一个函数在将来某个时刻再运行——这样的函数可能是为了作动画或模拟。基于时间的事件涉及两个著名的函数，即setTimeout与setInterval。遗憾的是，这两个著名的计时器函数都有自己的一些缺陷。正如我们在1.1.2节中看到的，其中有个缺陷是无法弥补的：当同一个JavaScript进程正运行着代码时，任何JavaScript计时函数都无法使其他代码运行起来。但是，即便容忍了这一局限性，setTimeout及setInterval的不确定性也会令人犯怵。下面是一个示例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fireCount = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">var</span> start = <span class="keyword">new</span> <span class="title class_">Date</span>; </span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Date</span>-start &gt; <span class="number">1000</span>) &#123; </span><br><span class="line">            <span class="built_in">clearInterval</span>(timer);     </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(fireCount);   </span><br><span class="line">            <span class="keyword">return</span>;   </span><br><span class="line">    &#125;   </span><br><span class="line">    fireCount++; </span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>如果使用setInterval调度事件且延迟设定为0毫秒，则会尽可能频繁地运行此事件，对吗？那么，在运行于高速英特尔i7处理器之上的现代浏览器中，此事件的触发频率到底如何呢？</p>
<p>大约为200次/秒。这是Chrome、Safari和Firefox等浏览器的平均值。在Node环境下，此事件的触发频率大约能达到1000次/秒。（若使用setTimeout来调度事件，重复这些实验也会得到类似的结果。）作为对比，如果将setInterval替换成简单的while循环，则在Chrome中此事件的触发频率将达到400万次/秒，而在Node中会达到500万次/秒</p>
<p>这是怎么回事？最后我们发现，setTimeout和setInterval就是想设计成慢吞吞的！事实上，HTML规范（这是所有主要浏览器都遵守的规范）推行的延时/时隔的最小值就是4毫秒！</p>
<p>那么，如果需要更细粒度的计时，该怎么办呢？有些运行时环境提供了备选方案。</p>
<blockquote>
<p>1: 在Node中，process.nextTick允许将事件调度成尽可能快地触发。对于笔者的系统，process.nextTick事件的触发频率可以超过10万次/秒。<br>2: 一些现代浏览器（含IE9+）带有一个requestAnimationFrame函数。此函数有两个目标：一方面，它允许以60+帧/秒的速度运行JavaScript动画；另一方面，它又避免后台选项卡运行这些动画，从而节约CPU周期。在最新版的Chrome浏览器中，甚至能实现亚毫秒级的精度</p>
</blockquote>
<p>尽管这些计时函数是异步JavaScript混饭吃的家伙什儿，但永远不要忘记，setTimeout和setInterval就是些不精确的计时工具。在Node中，如果只是想产生一个短时延迟，请使用process.nextTick。在浏览器端，请尝试使用垫片技术（shim）③：在支持requestAnimationFrame的浏览器中，推荐使用requestAnimationFrame；在不支持requestAnimationFrame的浏览器中，则退而使用setTimeout。</p>
<p>到这里，关于JavaScript基本异步函数的简要概览就结束了。但怎样才能知道一个函数到底何时异步呢？下一节中，我们在亲自编写异步函数的同时再思考这个问题</p>
<h2 id="异步函数的编写"><a href="#异步函数的编写" class="headerlink" title="异步函数的编写"></a>异步函数的编写</h2><p>JavaScript中的每个异步函数都构建在其他某个或某些异步函数之上。凡是异步函数，从上到下（一直到原生代码）都是异步的！</p>
<p>反之亦然：任何函数只要使用了异步的函数，就必须以异步的方式给出其操作结果。正如我们在1.1.2节学到的，JavaScript并没有提供一种机制以阻止函数在其异步操作结束之前返回。事实上，除非函数返回，否则不会触发任何异步事件。</p>
<p>本节将考察异步函数设计的一些常见模式。我们将看到有些函数如反复无常的小人，非得等到特定时候才下决心成为异步的。不过，我们先来精确地定义异步函数。</p>
<h3 id="何时称函数为异步的"><a href="#何时称函数为异步的" class="headerlink" title="何时称函数为异步的"></a>何时称函数为异步的</h3><p>异步函数这个术语有点名不副实：调用一个函数时，程序只在该函数返回之后才能继续。JavaScript写手如果称一个函数为“异步的”，其意思是这个函数会导致将来再运行另一个函数，后者取自于事件队列（若后面这个函数是作为参数传递给前者的，则称其为回调函数，简称为回调）  。于是，一个取用回调的异步函数永远都能通过以下测试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> functionHasReturned = <span class="literal">false</span>; </span><br><span class="line"><span class="title function_">asyncFunction</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">assert</span>(functionHasReturned); </span><br><span class="line">&#125;); </span><br><span class="line">functionHasReturned = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>异步函数还涉及另一个术语，即非阻塞。非阻塞这个词强调了异步函数的高速度：异步MySQL数据库驱动程序做一个查询可能要花上一小时，但负责发送查询请求的那个函数却能以微秒级速度返回。这对于那些需要快速处理海量请求的网站服务器来说，绝对是个福音。</p>
<p>通常，那些取用回调的函数都会将其作为自己的最后一个参数。（可惜的是，老资格的setTimeout和setInterval都是这一约定的特例。）不过，有些异步函数也会间接取用回调，它们会返回Promise对象或使用PubSub模式。本书稍后就会介绍这些异步设计模式。</p>
<p>遗憾的是，要想确认某个函数异步与否，唯一的方法就是审查其源代码。有些同步函数却拥有看起来像是异步的API，这或者是因为它们将来可能会变成异步的，又或者是因为回调这种形式能方便地返回多个参数。一旦存疑，请别指望函数就是异步的。</p>
<h3 id="间或异步的函数"><a href="#间或异步的函数" class="headerlink" title="间或异步的函数"></a>间或异步的函数</h3><p>有些函数某些时候是异步的，但其他时候却不然。举个例子，jQuery的同名函数（通常记作$）可用于延迟函数直至DOM已经结束加载。但是，若DOM早已结束了加载，则不存在任何延迟，$的回调将会立即触发。</p>
<p>不注意的话，这种行为的不可预知性会带来很多麻烦。我曾经看到也犯过这样一个错误，即假定$会在已加载本页面其他脚本之后再运行一个函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// application.js </span></span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    utils.<span class="title function_">log</span>(<span class="string">&#x27;Ready&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// utils.js </span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">utils</span> = &#123;</span><br><span class="line">    <span class="attr">log</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">console</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="property">log</span>.<span class="title function_">apply</span>(<span class="variable language_">console</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&lt;script src ＝&quot;application.js&quot; &gt;&lt;/script &gt;</span><br><span class="line">&lt;script src ＝&quot;util.js&quot; &gt;&lt;/script &gt;</span><br></pre></td></tr></table></figure>
<p>这段代码运行得很好，但前提是浏览器并未从缓存中加载页面（这会导致DOM早在脚本运行之前就已加载就绪）。如果出现这种情况，传递给$的回调就会在设置utils.log之前运行，从而导致一个错误。（为了避免这种情况，应该采用一种更现代的管理客户端依赖性的方法。请参阅第6章。）</p>
<p>下面来看另一个例子。</p>
<h3 id="缓存型异步函数"><a href="#缓存型异步函数" class="headerlink" title="缓存型异步函数"></a>缓存型异步函数</h3><p>间或异步的函数有一个常见变种是可缓存结果的异步请求类函数。举例来说，假设正在编写一个基于浏览器的计算器，它使用了网页Wo r k e r对象以单独开一个线程来进行计算。（第5章将介绍网页Worker对象的API。）主脚本看起来像这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> calculationCache = &#123;&#125;,</span><br><span class="line">    calculationCallbacks = &#123;&#125;,</span><br><span class="line">    mathWorker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;calculator.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line">mathWorker.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123; </span><br><span class="line">    <span class="keyword">var</span> message = e.<span class="property">data</span>;   </span><br><span class="line">    calculationCache[message.<span class="property">formula</span>] = message.<span class="property">result</span>;   </span><br><span class="line">    calculationCallbacks[message.<span class="property">formula</span>](message.<span class="property">result</span>); </span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runCalculation</span>(<span class="params">formula, callback</span>) &#123; </span><br><span class="line">    <span class="keyword">if</span> (formula <span class="keyword">in</span> calculationCache) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">callback</span>(calculationCache[formula]);   </span><br><span class="line">    &#125;;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (formula <span class="keyword">in</span> calculationCallbacks) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;       </span><br><span class="line">            <span class="title function_">runCalculation</span>(formula, callback);    </span><br><span class="line">        &#125;, <span class="number">0</span>);   </span><br><span class="line">    &#125;;   </span><br><span class="line"></span><br><span class="line">    mathWorker.<span class="title function_">postMessage</span>(formula);   </span><br><span class="line">    calculationCallbacks[formula] = callback; </span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在这里，当结果已经缓存时，runCalculation函数是同步的，否则就是异步的。<br>存在3种可能的情景。</p>
<p>1: 公式已经计算完成，于是结果位于calculationCache中。这种情况下，runCalculation是同步的。<br>2: 公式已经发送给Worker对象，但尚未收到结果。这种情况下，runCalculation设定了一个延时以便再次调用自身；重复这一过程直到结果位于calculationCache中为止。<br>3: 公式尚未发送给Worker对象。这种情况下，将会从Worker对象的’message’事件监听器激活回调。</p>
<p>请注意，在第2种和第3种情景中，我们按照两种不同的方式来等待任务的完成。这个例子写成这样，就是为了演示依据哪几种常见方式来等待某些东西发生改变（如缓存型计算公式的值）。是不是应该倾向于其中某种方式呢？我们接着往下看。</p>
<h3 id="异步递归与回调存储"><a href="#异步递归与回调存储" class="headerlink" title="异步递归与回调存储"></a>异步递归与回调存储</h3><p>在runCalculation函数中，为了等待Worker对象完成自己的工作，或者通过延时而重复相同的函数调用（即异步递归），或者简单地存储回调结果。</p>
<p>哪种方式更好呢？乍一看，只使用异步递归是最简单的，因为这里不再需要calculationCallbacks对象。出于这个目的，JavaScript新手常常会使用setTimeout，因为它很像线程型语言的风格。此程序的Java版本可能会有这样一个循环：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (!calculationCache.<span class="title function_">get</span>(formula)) &#123;</span><br><span class="line">     <span class="title class_">Thread</span>.<span class="title function_">sleep</span>(<span class="number">0</span>); </span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>

<p>但是，延时并不是免费的午餐。大量延时的话，会造成巨大的计算荷载。异步递归有一点很可怕，即在等待任务完成期间，可触发之延时的次数是不受限的！此外，异步递归还毫无必要地复杂化了应用程序的事件结构。基于这些原因，应将异步递归视作一种“反模式”的方式。</p>
<p>在这个计算器例子中，为了避免异步递归，可以为每个公式存储一个回调数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> calculationCache = &#123;&#125;,     </span><br><span class="line">    calculationCallbacks = &#123;&#125;,     </span><br><span class="line">    mathWorker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;calculator.js&#x27;</span>); </span><br><span class="line"></span><br><span class="line">mathWorker.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123; </span><br><span class="line">    <span class="keyword">var</span> message = e.<span class="property">data</span>;   </span><br><span class="line">    calculationCache[message.<span class="property">formula</span>] = message.<span class="property">result</span>;   </span><br><span class="line">    calculationCallbacks[message.<span class="property">formula</span>].<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">callback</span>) &#123;     </span><br><span class="line">        <span class="title function_">callback</span>(message.<span class="property">result</span>);   </span><br><span class="line">    &#125;); </span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runCalculation</span>(<span class="params">formula, callback</span>) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (formula <span class="keyword">in</span> calculationCache) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="title function_">callback</span>(calculationCache[formula]);   </span><br><span class="line">    &#125;; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (formula <span class="keyword">in</span> calculationCallbacks) &#123; </span><br><span class="line">        <span class="keyword">return</span> calculationCallbacks[formula].<span class="title function_">push</span>(callback);   </span><br><span class="line">    &#125;;   </span><br><span class="line"></span><br><span class="line">    mathWorker.<span class="title function_">postMessage</span>(formula);   </span><br><span class="line">    calculationCallbacks[formula] = [callback]; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>没有了延时，我们的代码要直观得多，也高效得多。</p>
<p>总的来说，请避免异步递归。仅当所采用的库提供了异步功能但没有提供任何形式的回调机制时，异步递归才有必要。如果真的遇到这种情况，要做的第一件事应该是为该库写一个补丁。或者，干脆找一个更好的库。</p>
<h3 id="返值与回调的混搭"><a href="#返值与回调的混搭" class="headerlink" title="返值与回调的混搭"></a>返值与回调的混搭</h3><p>在以上两种runCalculation实现中，有时会用到返值技术。这是出于简洁的目的而随意作出的选择。下面这行代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_">callback</span>(calculationCache[formula]);  </span><br></pre></td></tr></table></figure>

<p>很容易即可改写成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">callback</span>(calculationCache[formula]); </span><br><span class="line"><span class="keyword">return</span>; </span><br></pre></td></tr></table></figure>

<p>这是因为并没有打算使用这个返值。这是JavaScript的一种普遍做法，而且通常无害。</p>
<p>不过，有些函数既返回有用的值，又要取用回调。这类情况下，切记回调有可能被同步调用（返值之前），也有可能被异步调用（返值之后）。永远不要定义一个潜在同步而返值却有可能用于回调的函数。举个例子，下面这个负责打开WebSocket连接以连至给定服务器的函数（使用缓存技术以确保每个服务器只有一个连接）就违反了上述规则。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webSocketCache = &#123;&#125;; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">openWebSocket</span>(<span class="params">serverAddress, callback</span>) &#123; </span><br><span class="line">    <span class="keyword">var</span> socket; </span><br><span class="line">    <span class="keyword">if</span> (serverAddress <span class="keyword">in</span> webSocketCache) &#123;     </span><br><span class="line">        socket = webSocketCache[serverAddress]; </span><br><span class="line">        <span class="keyword">if</span> (socket.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;       </span><br><span class="line">            <span class="title function_">callback</span>();     </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;       </span><br><span class="line">            socket.<span class="property">onopen</span> = _.<span class="title function_">compose</span>(callback, socket.<span class="property">onopen</span>);    </span><br><span class="line">        &#125;;   </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;     </span><br><span class="line">        socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(serverAddress);     </span><br><span class="line">        webSocketCache[serverAddress] = socket;</span><br><span class="line">        socket.<span class="property">onopen</span> = callback;   </span><br><span class="line">    &#125;;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> socket; </span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>

<p>（这段代码依赖于Underscore.js库。_.compose定义的这个新函数既运行了callback，又运行了初始的socket.onopen回调。）这段代码的问题在于，如果套接字已经缓存且打开，则会在函数返值之前就运行回调，这会使以下代码崩溃。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="title function_">openWebSocket</span>(url, <span class="keyword">function</span>(<span class="params"></span>) &#123;   </span><br><span class="line">    socket.<span class="title function_">send</span>(<span class="string">&#x27;Hello, server!&#x27;</span>); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>怎么解决呢？将回调封装在setTimeout中即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (socket.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;   </span><br><span class="line">    <span class="built_in">setTimeout</span>(callback, <span class="number">0</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">     <span class="comment">// ... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里使用延时会让人感觉是在东拼西凑，但这总比API自相矛盾要好得多。</p>
<p>在本节中，我们看到了一些编写异步函数的最佳实践。请勿依赖那些看似始终异步的函数，除非已经阅读其源代码。请避免使用计时器方法来等待某个会变化的东西。如果同一个函数既返值又运行回调，则请确保回调在返值之后才运行。</p>
<p>一次消化这些信息确实太多了一点，不过，编写好的异步函数确实是写出优秀JavaScript代码的关键所在。</p>
<h2 id="异步错误的处理"><a href="#异步错误的处理" class="headerlink" title="异步错误的处理"></a>异步错误的处理</h2><p>像很多时髦的语言一样，JavaScript也允许抛出异常，随后再用一个try/catch语句块捕获。如果抛出的异常未被捕获，大多数JavaScript环境都会提供一个有用的堆栈轨迹。举个例子，下面这段代码由于’{‘为无效JSON对象而抛出异常。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EventModel/stackTrace.js </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">JSONToObject</span>(<span class="params">jsonStr</span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">JSON</span>ToObject(<span class="string">&#x27;&#123;&#x27;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="title class_">SyntaxError</span>: <span class="title class_">Unexpected</span> end <span class="keyword">of</span> input     </span><br><span class="line">    at <span class="title class_">Object</span>.<span class="property">parse</span> (native)     </span><br><span class="line">    at <span class="title class_">JSON</span>ToObject (<span class="regexp">/AsyncJS/</span>stackTrace.<span class="property">js</span>:<span class="number">2</span>:<span class="number">15</span>)     </span><br><span class="line">    at <span class="title class_">Object</span>.&lt;anonymous&gt; (<span class="regexp">/AsyncJS/</span>stackTrace.<span class="property">js</span>:<span class="number">4</span>:<span class="number">11</span>) </span><br></pre></td></tr></table></figure>

<p>堆栈轨迹不仅告诉我们哪里抛出了错误，而且说明了最初出错的地方：第4行代码。遗憾的是，自顶向下地跟踪异步错误起源并不都这么直截了当。在本节中，我们会看到为什么throw很少用作回调内错误处理的正确工具，还会了解如何设计异步API以绕开这一局限。</p>
<h3 id="回调内抛出的错误"><a href="#回调内抛出的错误" class="headerlink" title="回调内抛出的错误"></a>回调内抛出的错误</h3><p>如果从异步回调中抛出错误，会发生什么事？让我们先来做个测试。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EventModel/nestedErrors.js </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;   </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>) &#123; </span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>) &#123; </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Something terrible has happened!&#x27;</span>);     </span><br><span class="line">        &#125;, <span class="number">0</span>);   </span><br><span class="line">    &#125;, <span class="number">0</span>); </span><br><span class="line">&#125;, <span class="number">0</span>); </span><br></pre></td></tr></table></figure>

<p>上述应用的结果是一条极其简短的堆栈轨迹。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: Something terrible has happened!     </span><br><span class="line">    at Timer.C (/AsyncJS/nestedErrors.js:4:13) </span><br></pre></td></tr></table></figure>

<p>等等，A和B发生了什么事？为什么它们没有出现在堆栈轨迹中？这是因为运行C的时候，A和B并不在内存堆栈里。这3个函数都是从事件队列直接运行的。</p>
<p>基于同样的理由，利用try/catch语句块并不能捕获从异步回调中抛出的错误。下面进行演示。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;   </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Catch me if you can!&#x27;</span>);   </span><br><span class="line">    &#125;, <span class="number">0</span>); </span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(e);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>看到这里的问题了吗？这里的try/catch语句块只捕获setTimeout函数自身内部发生的那些错误。因为setTimeout异步地运行其回调，所以即使延时设置为0，回调抛出的错误也会直接流向应用程序的未捕获异常处理器（请参阅1.4.2节）</p>
<p>总的来说，取用异步回调的函数即使包装上try/catch语句块，也只是无用之举。（特例是，该异步函数确实是在同步地做某些事且容易出错。例如，Node的fs.watch(file,callback)就是这样一个函数，它在目标文件不存在时会抛出一个错误。）正因为此，Node.js中的回调几乎总是接受一个错误作为其首个参数，这样就允许回调自己来决定如何处理这个错误。举个例子，下面这个Node应用尝试异步地读取一个文件，还负责记录下任何错误（如“文件不存在”）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EventModel/readFile.js </span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>); </span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;fhgwgdz.txt&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123; </span><br><span class="line">    <span class="keyword">if</span> (err) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err);   </span><br><span class="line">    &#125;;   </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>(<span class="string">&#x27;utf8&#x27;</span>)); </span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>

<p>客户端JavaScript库的一致性要稍微差些，不过最常见的模式是，针对成败这两种情形各规定一个单独的回调。jQuery的Ajax方法就遵循了这个模式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;/data&#x27;</span>, &#123;  </span><br><span class="line">     <span class="attr">success</span>: successHandler,   </span><br><span class="line">     <span class="attr">failure</span>: failureHandler &#125;); </span><br></pre></td></tr></table></figure>
<p>不管API形态像什么，始终要记住的是，只能在回调内部处理源于回调的异步错误。异步尤达大师会说：“做，或者不做，没有试试看一说。”</p>
<h3 id="未捕获异常的处理"><a href="#未捕获异常的处理" class="headerlink" title="未捕获异常的处理"></a>未捕获异常的处理</h3><p>如果是从回调中抛出异常的，则由那个调用了回调的人负责捕获该异常。但如果异常从未被捕获，又会怎么样？这时，不同的JavaScript图环境有着不同的游戏规则……</p>
<p>1.在浏览器环境中现代浏览器会在开发人员控制台显示那些未捕获的异常，接着返回事件队列。要想修改这种行为，可以给window.onerror附加一个处理器。如果windows.onerror处理器返回true，则能阻止浏览器的默认错误处理行为。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">err</span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    <span class="comment">//彻底忽略所有错误</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>

<p>在成品应用中，会考虑某种JavaScript错误处理服务，譬如Errorception①。Errorception提供了一个现成的windows.onerror处理器，它向应用服务器报告所有未捕获的异常，接着应用服务器发送消息通知我们。</p>
<p>2.在Node.js环境中在Node环境中，window.onerror的类似物就是process对象的uncaughtException事件。正常情况下，Node应用会因未捕获的异常而立即退出。但只要至少还有一个uncaughtException事件处理器，Node应用就会直接返回事件队列。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;uncaughtException&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;   </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);  </span><br><span class="line">    <span class="comment">//避免了关停的命运！</span></span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>

<p>但是，自Node  0.8.4起，uncaughtException事件就被废弃了。据其文档所言，对异常处理而言，uncaughtException是一种非常粗暴的机制，它在将来可能会被放弃……</p>
<blockquote>
<p>请勿使用uncaughtException，而应使用Domain对象。Domain对象又是什么？你可能会这样问。</p>
</blockquote>
<p>Domain对象是事件化对象（第2章会详细讨论），它将throw转化为’error’事件。下面是一个例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EventModel/domainThrow.js </span></span><br><span class="line"><span class="keyword">var</span> myDomain = <span class="built_in">require</span>(<span class="string">&#x27;domain&#x27;</span>).<span class="title function_">create</span>();</span><br><span class="line">myDomain.<span class="title function_">run</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Listen to me!&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">50</span>);</span><br><span class="line">&#125;);</span><br><span class="line">myDomain.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error ignored!&#x27;</span>);</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>

<p>源于延时事件的throw只是简单地触发了Domain对象的错误处理器。<br>Error ignored!<br>很奇妙，是不是？Domain对象让throw语句生动了很多。遗憾的是，仅在Node  0.8+环境中才能使用Domain对象；在我写作本书时，Domain对象仍被视作试验性的特性。更多信息请参阅Node文档。②不管在浏览器端还是服务器端，全局的异常处理器都应被视作最后一根救命稻草。请仅在调试时才使用它。</p>
<h3 id="抛出还是不抛出"><a href="#抛出还是不抛出" class="headerlink" title="抛出还是不抛出"></a>抛出还是不抛出</h3><p>遇到错误时，最简单的解决方法就是抛出这个错误。在Node代码中，大家会经常看到类似这样的回调：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;   <span class="comment">// ... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在第4章中，我们会经常沿用这一做法。但是，在成品应用中，允许例行的异常及致命的错误像踢皮球一样踢给全局处理器，这是不可接受的。回调中的throw相当于JavaScript写手在说“现在我还不想考虑这个”。</p>
<p>如果抛出那些自己知道肯定会被捕获的异常呢？这种做法同样凶险万分。2011年，Isaac Schlueter（npm的开发者，在任的Node开发负责人）就主张try/catch是一种“反模式”的方式。</p>
<blockquote>
<p>try/catch只是包装着漂亮花括弧的goto语句。一旦跑去处理错误，就无法回到中断之处继续向下执行。更糟糕的是，通过throw语句的代码，完全不知道自己会跳到什么地方。返回错误码的时候，就相当于正在履行合约。抛出错误的时候，就好像在说，“我知道我正在和你说话，但我现在不想搭理你，我要先找你老板谈谈”，这太粗俗无礼了。如果不是什么紧急情况，请别这么做；如果确实是紧急情况，则应该直接崩溃掉。</p>
</blockquote>
<p>Schlueter提倡完全将throw用作断言似的构造结构，作为一种挂起应用的方式——当应用在做完全没预料到的事时，即挂起应用。Node社区主要遵循这一建议，尽管这种情况可能会随着Domain对象的出现而改变。</p>
<p>那么，关于异步错误的处理，目前的最佳实践是什么呢？我认为应该听从Schlueter的建议：如果想让整个应用停止工作，请勇往直前地大胆使用throw。否则，请认真考虑一下应该如何处理错误。是想给用户显示一条出错消息吗？是想重试请求吗？还是想唱一曲“雏菊铃之歌”？那就这么处理吧，只是请尽可能地靠近错误源头。</p>
<h2 id="嵌套式回调的解嵌套"><a href="#嵌套式回调的解嵌套" class="headerlink" title="嵌套式回调的解嵌套"></a>嵌套式回调的解嵌套</h2><p>JavaScript中最常见的反模式做法是，回调内部再嵌套回调。还记得前言里提到的金字塔厄运吗？我们先来看一个具体的例子，你也可能在Node服务器上看到过类似的代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkPassword</span>(<span class="params">username, passwordGuess, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> queryStr = <span class="string">&#x27;SELECT * FROM user WHERE username = ?&#x27;</span>;</span><br><span class="line">    db.<span class="title function_">query</span>(queryStr, username,</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">err, result</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">throw</span> err; </span><br><span class="line">            <span class="title function_">hash</span>(passwordGuess,<span class="keyword">function</span> (<span class="params">passwordGuessHash</span>) &#123;</span><br><span class="line">                    <span class="title function_">callback</span>(passwordGuessHash === result[<span class="string">&#x27;password_hash&#x27;</span>]);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>这里定义了一个异步函数checkPassword，它触发了另一个异步函数db.query，而后者又可能触发另外一个异步函数hash。（在之前，无法确认这些函数是否真的异步，但这里的几个函数理应如此。）</p>
<p>这段代码有什么问题呢？目前为止，没有任何问题。它能用，而且简洁明了。但是，如果试图向其添加新特性，它就会变得毛里毛躁、险象环生，比如去处理那个数据库错误，而不是抛出错误（请参阅1.4.3节）、记录尝试访问数据库的次数、阻塞访问数据库，等等。</p>
<p>嵌套式回调诱惑我们通过添加更多代码来添加更多特性，而不是将这些特性实现为可管理、可重用的代码片段。checkPassword有一种可以避免出现上述苗头的等价实现方式，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkPassword</span>(<span class="params">username, passwordGuess, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> passwordHash; <span class="keyword">var</span> queryStr = <span class="string">&#x27;SELECT * FROM user WHERE username = ?&#x27;</span>;</span><br><span class="line">    db.<span class="title function_">query</span>(qyeryStr, username, queryCallback);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">queryCallback</span>(<span class="params">err, result</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err; passwordHash = result[<span class="string">&#x27;password_hash&#x27;</span>];</span><br><span class="line">        <span class="title function_">hash</span>(passwordGuess, hashCallback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">hashCallback</span>(<span class="params">passwordGuessHash</span>) &#123;</span><br><span class="line">        <span class="title function_">callback</span>(passwordHash === passwordGuessHash);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种写法更啰嗦一些，但读起来更清晰，也更容易扩展。由于这里赋予了异步结果（即passwordHash）更宽广的作用域，所以获得了更大的灵活性。<br>按照惯例，请避免两层以上的函数嵌套。关键是找到一种在激活异步调用之函数的外部存储异步结果的方式，这样回调本身就没有必要再嵌套了。</p>
<p>如果这样听起来有点诘聱难懂，请别担心。我们在后续几章中会看到大量的异步事件例子，那里的异步事件顺序运行且没有嵌套式事件处理器。</p>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端原生【对象】Object</title>
    <url>/object/</url>
    <content><![CDATA[<blockquote>
<p>练武不练功，到头一场空，JavaScript 原生对象，被业务应用层的研发容易忽略的一些底层细节。</p>
</blockquote>
<h2 id="对象的属性类型"><a href="#对象的属性类型" class="headerlink" title="对象的属性类型"></a>对象的属性类型</h2><p>属性有两种类型：数据类型和访问器类型。</p>
<ul>
<li>数据属性包含一个值，比如自己定义的 name,sex,age 等，而对象里有一个内置的 [[Put]] 方法，它的默认行为是创建数据属性；</li>
<li>访问器属性不包含值而是定义了一个当属性被读取时调用的函数(称为 getter)和一个当属性被写入时调用的函数(称为 setter)。</li>
</ul>
<p>访问器属性仅需要 <code>getter</code>和 <code>setter</code> 两者中的任意一个，当然也可以两者都有。</p>
<p>在对象字面形式中定义访问器属性有特殊的语法：<br>例：访问器类型 ：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">_name</span>: <span class="string">&#x27;YangYangYang&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我在get,设定访问器读取属性name&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我在set,设定访问器设置属性name：&#x27;</span>, value)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = value</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>)</span><br><span class="line">person1.<span class="property">name</span> = <span class="string">&#x27;Greg&#x27;</span> <span class="comment">// 这里设置属性name 触发了内置的set 直接</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>)</span><br></pre></td></tr></table></figure>

<p>使用场景：当你希望对象的赋值操作会触发一些行为或读取的值需要通过计算所需的返回值得到时，访问器属性会非常有用！</p>
<p><strong>补充：利用访问器属性 实现表单双向数据绑定</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;txt&#x27;</span>),</span><br><span class="line">  sp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;sp&#x27;</span>),</span><br><span class="line">  obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给对象obj添加msg属性，并设置setter访问器</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;msg&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 设置 obj.msg  当obj.msg反生改变时set方法将会被调用</span></span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newVal</span>) &#123;</span><br><span class="line">    <span class="comment">// 当obj.msg被赋值时 同时设置给 input/span</span></span><br><span class="line">    txt.<span class="property">value</span> = newVal</span><br><span class="line">    sp.<span class="property">innerText</span> = newVal</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听文本框的改变 当文本框输入内容时 改变obj.msg</span></span><br><span class="line">txt.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  obj.<span class="property">msg</span> = event.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="属性特征：（数据属性）"><a href="#属性特征：（数据属性）" class="headerlink" title="属性特征：（数据属性）"></a>属性特征：（数据属性）</h2><p>数据属性和访问器属性的特征</p>
<h3 id="通用特征"><a href="#通用特征" class="headerlink" title="通用特征"></a>通用特征</h3><hr>
<p>有两个属性特征是数据和访问属性都具有的。</p>
<ol>
<li>[[Enumerable]] (可枚举的)：决定了你是否可以遍历该属性；</li>
<li>[[Configurable]] (可配置的)：决定了该属性是否可配置；<br>配置的意思就是：你可以用 <code>delete</code> 删除一个可配置的属性，或者随时更改它，开放的！所有自己申明的对象属性默认都是可枚举、配置的！</li>
</ol>
<hr>
<p><strong>改变属性特征：Object.defineProperty() ===&gt; 译(定义属性的意思)</strong></p>
<p>使用 <code>Object.defineProperty</code> 方法如果不指定，除了 <code>value</code> 其他都时 <code>false</code></p>
<ol>
<li>拥有该属性的对象（属性所在的对象）；</li>
<li>属性名；</li>
<li>包含需要设置的特征的属性描述对象；<br>🔔 注意：参数三：3) 是一个对象{} 这个对象里面有四个属性:<br>第一个属性：<code>value</code> 指定的第二个参数的值 (可选)<br>第二个属性：<code>enumerable</code> 是否可枚举<br>第三个属性：<code>configurable</code> 是否可配置 (配置是指 可否删除? 可否重新定义) 类似于总开关<br>第四个属性：<code>wriable</code> 是否可写入 就是是否可以更改属性值等</li>
</ol>
<p>🔔 注意：configurable 修改为 false 以后 除了 <code>wriable</code> 其他都是不可逆的，不可重新配置的</p>
<p>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;YangYangYang&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制定义让该对象的name属性不可被枚举：</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person1, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>, <span class="comment">// 这句话代表不可枚举;  严格来说是:person1这个对象当中</span></span><br><span class="line">  <span class="comment">// 的name属性 不可被枚举;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> person1) <span class="comment">// true  判断对象当中 有没有这个属性可以用in,但是in不能过滤继承来的原型属性和方法;严格的话用hasOwnProperty()方法;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;name&#x27;</span>)) <span class="comment">// false 注意：propertyIsEnumerable是用来判断这个属性是否可以被枚举的内置方法，返回布尔值;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 把当前对象person1的所有键值对的键，也就是属性，放入一个数组当中！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> properties = <span class="title class_">Object</span>.<span class="title function_">keys</span>(person1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(properties) <span class="comment">// [] 因为上面的属性 只有一个name,而且name被限制为不可枚举，所以得到的会是一个空数组;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(properties.<span class="property">length</span>) <span class="comment">// 所以长度自然为0 ;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------  分割线</span></span><br><span class="line"><span class="comment">// 强制定义让该对象的name属性为不可设置(配置),也就是不可被修改</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person1, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>, <span class="comment">// 这句话的意思是 可写的 就是可以修改属性的值 默认是true可以修改 但是为false 值就不可被修改</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试修改值</span></span><br><span class="line">person1.<span class="property">name</span> = <span class="string">&#x27;你大爷&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试删除person1对象当中的name属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person1.<span class="property">name</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> person1) <span class="comment">// 结果没被删除掉 结果不是undefined 而是true 代表属性在当前对象中存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：下面我尝试将配置开放，使其可以删除</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person1, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果是抛出了一个 error错误！说明无法将一个不可配置的属性变成可配置，同样，在不可配置的情况下试图将数据属性编为访问器属性或反向变更也会抛出错误！</span></span><br></pre></td></tr></table></figure>

<p><strong>总结：可配置属性的这个 <code>Object.defineProperty()</code> 这个方法 是一次性的！在定义对象的时候，只起一次效果！不存在覆盖情况！🔔 最后注意 如果使用了属性类型的 <code>get</code> 和 <code>set</code> 方法就不能使用 <code>writable</code> 和 <code>value</code> 的任意一个 否则报错！</strong></p>
<h3 id="数据属性的特征"><a href="#数据属性的特征" class="headerlink" title="数据属性的特征"></a>数据属性的特征</h3><hr>
<p>数据属性额外拥有两个访问器属性不具备的特征</p>
<ol>
<li>[[Value]] : 包含属性的值，当你在对象上创建属性时该特征被自动赋值，匹配属性的值，键值对的值，对象中所有的属性的值都保存在 [[Value]] 中，哪怕该值是一个函数。</li>
<li>[[Wriable]]：该特征是一个布尔值，指示该属性是否可以写入。所以属性默认是可写的，除非另外指定<br>通过这两个额外特征，数据属性相当于拥有完整的四个属性特征；就是 <code>Object.defineProperty()</code> 方法的第三个参数里面的四个完整的参数！</li>
</ol>
<hr>
<p>所以常规的一个对象创建，并给这个对象添加属性以及属性值（就是添加键值对的过程）</p>
<p><strong>显式的是这样子：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;YangYangYang&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个很简单 就是创建了一个对象 给它添加了一个属性以及属性值，但是实际隐式机制创建是下面这样子</span></span><br></pre></td></tr></table></figure>

<p><strong>隐式的是这样子：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;&#125; <span class="comment">// 这里还有var person1 = new Object();</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person1, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;YangYangYang&#x27;</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">// 可枚举</span></span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">// 可配置</span></span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>, <span class="comment">// 可写入</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>注意一点：当 <code>Object.defineProperty()</code>被调用时，它首先先检查属性是否存在，如果不存在，将根据属性描述对象指定的特征创建！如果使用 <code>Object.defineProperty()</code>方法给对象添加属性以及值，如果不针对参数进行设置，那么它们将默认都为 <code>false</code> 不可枚举、不可配置、不可修改！</strong></p>
<h3 id="访问器属性特征"><a href="#访问器属性特征" class="headerlink" title="访问器属性特征"></a>访问器属性特征</h3><hr>
<p>访问器属性也有两个额外特征。访问器属性不需要存储值，因为也就不需要(没有) [[Value]] 和 [[Wriable]]。取而代之的是[[Get]] 和 [[Set]],内含 <code>getter</code> 和 <code>setter</code> 函数。和对象字面形式的 <code>getter</code> 和 <code>setter</code> 一样，仅需要定义其中一个特征就可以创建一个访问器属性 。<br>🔔 注意：如果试图创建一个同时具有数据特征和访问器特征的属性，将会得到一个错误！</p>
<hr>
<p>在属性类型笔记里面的例子 可以改写为如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">_name</span>: <span class="string">&#x27;YangYangYang&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person1, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我在get设定访问器的读取属性name&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我在set设定访问器设置属性name:&#x27;</span>, value)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 同样使使这个访问器 可枚举、可配置</span></span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>🔔 注意：这里传给 <code>Object.defineProperty()</code> 的属性描述对象中的 <code>get,set</code> 关键字属性，它们是包含函数的数据属性，在这里不能使用属性类型笔记中的那种对象字面形式的特殊设置方法 <code>set()&#123;&#125;</code>,<code>get()&#123;&#125;</code>。<br>🔔 注意：这里访问器属性如果不在 <code>Object.defineProperty()</code>方法中设置枚举以及配置为 <code>true</code> 默认任何调用 <code>Object.defineProperty()</code>方法的对象，里面指定的第二个参数属性，都是不可枚举，不可配置的！</p>
<p>和对象字面字面形式定义的访问器属性一样，在严格模式下试图写入没有 <code>setter</code> 的访问器属性会抛出错误，在非严格模式下会失效(什么也不弹出)，试图读取一个没有 <code>getter</code> 的访问器属性则总是返回 <code>undefined。</code></p>
<h3 id="获取（读取）属性特征"><a href="#获取（读取）属性特征" class="headerlink" title="获取（读取）属性特征"></a>获取（读取）属性特征</h3><p><code>Object.getOwnPropertyDescriptor()</code> 方法<br>此方法只可用于自有属性，接收两个参数：</p>
<ol>
<li>对象；</li>
<li>属性名；<br>如果属性存在，则返回一个属性描述对象，内含 4 个属性：<code>configurable</code> 和 <code>enumerable</code>;另外两个属性则根据属性类型决定，看是数据属性还是访问器属性！</li>
</ol>
<p>🔔 注意：如果是访问器属性，这个对象属性有 <code>configurable</code>、<code>enumerable</code>、<code>get</code>、<code>set</code>；<br>如果是数据属性，这个个对象属性有 <code>configurable</code>、<code>enumerable</code>、<code>writable</code> 和 <code>value</code>。</p>
<p>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;YangYangYang&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person1, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor.<span class="property">enumerable</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor.<span class="property">configurable</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor.<span class="property">writable</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor.<span class="property">value</span>) <span class="comment">// YangYangYang</span></span><br></pre></td></tr></table></figure>

<p>这里，属性 <code>name</code> 作为对象字面形式的一部分被定义。调用 <code>Object.getOwnPropertyDescriptor()</code> 方法返回的属性描述对象具有 4 个属性，因为上面是数据属性，所以返回 <code>enumerable</code>,<code>configurable</code>,<code>writable</code> 和 <code>value</code>,即使它们从没有没 <code>Object.defineProperty()</code>显式定义。</p>
<h3 id="定义多重属性"><a href="#定义多重属性" class="headerlink" title="定义多重属性"></a>定义多重属性</h3><hr>
<p>如果使用 Object.defineProperties() 方法而不是 Object.defineProperty() 方法，可以为一个对象同时定义多个属性。<br>Object.defineProperties() 接收两个参数：</p>
<ol>
<li>需要改变的对象；</li>
<li>一个包含所有属性信息的对象；(对象的属性与第一个参数对象要添加或修改的一一对应)</li>
</ol>
<hr>
<p>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(person1, &#123;</span><br><span class="line">  <span class="comment">// 属性来存储数据</span></span><br><span class="line">  <span class="attr">_name</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;YangYnagYang&#x27;</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 如果需要 继续往下写 比如age:&#123;&#125;,sex:&#123;&#125;等等 ，访问器数据一样</span></span><br><span class="line">  <span class="comment">// 访问器属性</span></span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;设定获取&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;设定设置&#x27;</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_name</span> = value</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>🔔 注意：上面代码 name 是对象里面属性的名字，设置有两种方式，一种利用 for in 循环 让所有属性匹配数据属性，或者如上一个一个去设置，上面仅设置了 name 属性，假设对象当中有 name 属性的话！</p>
<h2 id="继承自-Object-prototype-的方法"><a href="#继承自-Object-prototype-的方法" class="headerlink" title="继承自 Object.prototype 的方法"></a>继承自 Object.prototype 的方法</h2><p>所有的对象都继承顶级对象 Object.prototype 下面的 5 种方法</p>
<ul>
<li><p>hasOwnPrototype() 方法： 检查是否存在一个给定名字的自有属性（用来判断和过滤继承属性的）</p>
</li>
<li><p>propertyEnumerable() 方法：检查一个自有属性是否可枚举</p>
</li>
<li><p>isPrototypeOf() 方法：检查一个对象是否是另外一个对象的原型对象 （具体可参考笔记）</p>
</li>
<li><p>valueOf() 返回一个对象的值表达 (返回指定对象的原始值)</p>
</li>
<li><p>toString() 返回一个对象的字符串表达式，强大之处能把数组嵌套 N 层的强制转成字符串表达（隐）</p>
</li>
</ul>
<p>这 5 种方法由继承出现在所有对象中，也就是所有对象都可以使用这 5 种方法。</p>
<h2 id="判断某个对象是否是另外一个对象的原型"><a href="#判断某个对象是否是另外一个对象的原型" class="headerlink" title="判断某个对象是否是另外一个对象的原型"></a>判断某个对象是否是另外一个对象的原型</h2><p><code>isPrototypeOf()</code> 以及 <code>Object.getPrototypeOf()</code></p>
<p>通过 isPrototypeOf() 来确定对象之间是否存在这种关系，本质上讲，如果[[Prototype]] (就是<strong>proto</strong>) 指向调用 <code>isPrototypeOf()</code> 方法的对象 (<code>Person.prototype</code>)，那么这个方法就返回 <code>true</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(person1), <span class="comment">// true</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(person2) <span class="comment">// true</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>这里，用原型对象的 <code>isPrototypeOf()</code> 方法测试了 person1 和 person2 ，因为它们内部都有一个指向 <code>Person.prototype</code> 的指针，因此返回 <code>true</code></p>
<p><strong>isPrototypeOf(需要判断的对象名)</strong><br>该方法被包含在所有对象中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(obj)) <span class="comment">// 结果为true</span></span><br><span class="line"><span class="comment">// 任何实例化的对象，包括被new的对象它的隐式原型__proto__也就是[[Prototype]]</span></span><br><span class="line"><span class="comment">// 都指向了创建这个实例对象的构造函数的原型！这里创建obj实例对象的构造函数是</span></span><br><span class="line"><span class="comment">// Object 而实例对象的隐式原型指向了这个构造函数的原型Object.prototype;</span></span><br></pre></td></tr></table></figure>

<p>🔔 注意：可以使用 <code>Object.getPrototypeOf()</code> 方法读取 <code>__proto__</code> 也就是 [[Prototype]] 隐式原型属性的值</p>
<p>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj) <span class="comment">// 实例对象通过getprototypeOf() 获取实例对象的隐式原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proto) <span class="comment">// 同下面的一样</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span>) <span class="comment">// 同上面的一样</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proto === obj.<span class="property">__proto__</span>) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// ------------- 分割线</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">constructor</span> === <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proto === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 任何一个实例化的对象 隐式原型__proto__ 总是指向了Object顶级对象的原型prototype</span></span><br></pre></td></tr></table></figure>

<p>🔔 注意：上面代码 Object.getPrototypeOf(obj)得到的其实就是 obj 实例对象的 <code>__proto__</code></p>
<p>拓展：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person1) === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="comment">// true</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(person1) <span class="comment">// true</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>返回的对象实际就是这个对象的原型。</p>
<h2 id="Object-create-方法"><a href="#Object-create-方法" class="headerlink" title="Object.create() 方法"></a>Object.create() 方法</h2><hr>
<p>该方法接收接收两个参数：</p>
<ol>
<li>要继承的对象，也就是说，要通过原型链 <code>__proto__</code>也就是 [[prototype]] 往上查找的对象</li>
<li>可选参数：属性的描述对象，描述属性特征！是否枚举？是否可配置？是否可读写？以及 value<br>如果第二个参数使用了不写，默认为 <code>false</code></li>
</ol>
<hr>
<p>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Jonly&#x27;</span>,</span><br><span class="line">    <span class="attr">firends</span>: [<span class="string">&#x27;Luna&#x27;</span>, <span class="string">&#x27;Eva&#x27;</span>, <span class="string">&#x27;Van&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(person, &#123;</span><br><span class="line">   <span class="attr">name</span>:&#123;</span><br><span class="line">       <span class="attr">value</span>:<span class="string">&#x27;Jonly哥&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">firends</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(obj)); /</span><br><span class="line"><span class="comment">// Object.create() 不可枚举 不可扩展 不可写入</span></span><br></pre></td></tr></table></figure>

<p>常规对象字面量方式创建对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;我是这个对象的描述哈&#x27;</span>,</span><br><span class="line">&#125; <span class="comment">// 这种创建方式 字面量创建方式 该对象自动继承Object.prototype,并且其属性被</span></span><br><span class="line"><span class="comment">// 默认设置为 可配置、可枚举、没读写</span></span><br></pre></td></tr></table></figure>

<p>Object.create() 方式创建对象:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> book = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">  <span class="comment">// 第一个参数要继承的对象</span></span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">// 可配置</span></span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">// 可枚举</span></span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;我是当前这个book对象里面title属性的值撒&#x27;</span>,</span><br><span class="line">    <span class="attr">writeable</span>: <span class="literal">true</span>, <span class="comment">// 可读写</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>🔔 注意：以上两种申明方式具有相同的效果。</p>
<ul>
<li>第一种申明使用对象字面形式来定义一个具有单一属性的 <code>title</code> 的对象，该对象自动继承 <code>Objec.prototype</code>，并且其属性默认为可配置、可枚举、可读写！</li>
<li>第二种申明使用 <code>Object.create()</code> 显式做了同样的操作，两个 BOOK 行为完全一致！</li>
</ul>
<p><strong>下面的例子是用来体验 Object.crate() 来对象之间发生继承关系：</strong><br>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;YangYangYang&quot;</span>,</span><br><span class="line">    <span class="attr">sayName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(person1,&#123;  <span class="comment">// 指定继承person1</span></span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line">        <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">enumerable</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">value</span>:<span class="string">&quot;Greg&quot;</span>,</span><br><span class="line">        <span class="attr">writeable</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">sayName</span>(); <span class="comment">// YangYangYang</span></span><br><span class="line">person2.<span class="title function_">syaName</span>(); <span class="comment">// Greg  自己有name 就使用自己的 没有再去继承关系找</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;sayName)); // true sayName是person1的自有属性</span></span><br><span class="line"><span class="string">console.log(person1.isPrototypeOf(person2)); // true person2是继承person1</span></span><br><span class="line"><span class="string">console.log(person2.hasOwnProperty(&quot;</span>sayName<span class="string">&quot;)) // false 这个不是person2自有的属性</span></span><br></pre></td></tr></table></figure>

<p>当访问一个对象的属性时，javascript 引擎会执行一个搜索过程，如果在对象实例上发现该属性（就是自有属性），该属性值就会被使用。如果对象实例上没有发现该属性，则通过 [[prototype]] 也就是 <code>__proto__</code> 查找，如果也没有，则继续搜索该原型对象的<code>__proto__</code>,直接原型链顶端，<code>Object.prototype.__proto__</code> 为 <code>null</code>；</p>
<p>🔔 注意反例：不要使其为 null;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nakeObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;toString&#x27;</span> <span class="keyword">in</span> nakeObj) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;valueOf&#x27;</span> <span class="keyword">in</span> nakObj) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 这是一个恶趣味的javascript诡计，创建了一个没有原型的对象，一个哈希容器;</span></span><br><span class="line"><span class="comment">// 这样导致Object.prototype的5个对象继承的原型方法toString,valueOf,hasProperty,</span></span><br><span class="line"><span class="comment">// isProtypeOf(检查一个对象是否另一个对象的原型对象),propertyIsEnumerable(检查</span></span><br><span class="line"><span class="comment">// 一个对象是否可以被枚举);</span></span><br></pre></td></tr></table></figure>

<p><strong>延申，用来实现继承父类原型的时候可以使用：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将父类的原型 赋值缓存到一个变量</span></span><br><span class="line"><span class="keyword">var</span> prototype = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">SuperClass</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="comment">// 这个原型的构造器 指向子类的构造函数</span></span><br><span class="line">prototype.<span class="property">constructor</span> = <span class="title class_">SubClass</span></span><br><span class="line"><span class="comment">// 将这个继承来的原型 放入子类自己的原型对象中</span></span><br><span class="line"><span class="title class_">SubClass</span>.<span class="property"><span class="keyword">prototype</span></span> = prototype</span><br></pre></td></tr></table></figure>

<p><strong>设置原型继承 ES6 这个方法更加强大 <code>Object.setPrototypeOf(Son.prototype,Person.prototype)</code></strong></p>
<h2 id="禁止修改对象"><a href="#禁止修改对象" class="headerlink" title="禁止修改对象"></a>禁止修改对象</h2><hr>
<p>对象和属性一样具有指导其他行为的内部特征。其中对象内部 [[Extensible]] (可扩展的)是一个布尔值，它指明该对象本身是否可以被修改。所有创建的默认对象都是可扩展修改的，意味着新的属性可以随时添加。<br>设置 [[Extensible]] 为 <code>false</code>,就能禁止新属性的添加，原生 js 提供了 3 种方法！</p>
<ol>
<li>禁止扩展；</li>
<li>对象封印；</li>
<li>对象冻结；</li>
</ol>
<hr>
<p><strong>判断对象是否为可扩展：</strong><br><code>isExtensible(对象名)</code> ，返回一个布尔值，默认创建的对象为可扩展 <code>true</code>!<br>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;YangYangYang&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(person1))); <span class="comment">// true 创建的对象默认都是ture</span></span><br></pre></td></tr></table></figure>

<h3 id="禁止扩展：Object-preventExtensions"><a href="#禁止扩展：Object-preventExtensions" class="headerlink" title="禁止扩展：Object.preventExtensions()"></a>禁止扩展：Object.preventExtensions()</h3><p>这种方法是利用 <code>Object.preventExtensions()</code> 方法， (防止扩展的意思)，创建一个不可扩展的对象，该方法接收一个参数，就是你希望使其不可扩展的对象。一旦在一个对象上使用该方法，就永远不能再给它添加新的属性了，可以利用 <code>Object.isExtensible()</code>方法来检查 [[Extensible]] 的值。</p>
<p>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;YangYangYang&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(person1)) <span class="comment">// true 判断这个对象是否为可扩展的对象</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(person1) <span class="comment">// 强制要求使其当前对象为不可扩展</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(person1)) <span class="comment">// 所以 现在反悔为false 不可扩展</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再尝试给person1对象添加一个方法</span></span><br><span class="line"></span><br><span class="line">person1.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sayName&#x27;</span> <span class="keyword">in</span> person1) <span class="comment">// 判断这个新添加的方法 在person1对象中存在，结果为false 因为不可扩展 以上设置没被添加到</span></span><br></pre></td></tr></table></figure>

<p>每一次创建一个对象的时候，都会隐式的检查该对象的 [[Extensible]] 特征，默认是可扩展。以上代码显示的将其变为不可扩展，由于不可扩展，所有上面的 <code>sayName</code> 方法永远无法添加到 <code>person1</code> 上！</p>
<h3 id="对象封印：Object-seal"><a href="#对象封印：Object-seal" class="headerlink" title="对象封印：Object.seal()"></a>对象封印：Object.seal()</h3><p>对象封印是创建不可扩展对象的第二种方法。<br>一个被封印的对象是不可扩展的并且其所有属性都不可配置，意味着不能给添加对象新属性，也不能删除属性或改变类型，如果一个对象被封印，只能读写它的属性。</p>
<p>使用 <code>Object.seal()</code> 方法来封印一个对象。当该方法被调用时，[[Extensible]] 特征被置为 <code>false</code>,其所有属性的[[Configurable]] 特征被置为 <code>false</code>。</p>
<p>判断对象是否被封印。<br><code>Object.isSealed(对象名)</code>，返回一个布尔值，默认是 <code>false</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;YangYangYang&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isSealed</span>(person1)); <span class="comment">// 返回false</span></span><br></pre></td></tr></table></figure>

<p>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;YangYangYang&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(person1)) <span class="comment">// true  可以扩展</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isSealed</span>(person1)) <span class="comment">// false  没有被封印</span></span><br><span class="line"><span class="comment">// 下面对person1 对象进行封印</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(person1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(person1)) <span class="comment">// false  不能扩展</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isSealed</span>(person1)) <span class="comment">// true  被封印</span></span><br><span class="line"><span class="comment">// 尝试给对象添加方法</span></span><br><span class="line">person1.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sayName&#x27;</span> <span class="keyword">in</span> person1) <span class="comment">// 返回结果为true 证明添加对象方法失败</span></span><br><span class="line"><span class="comment">// 尝试修改自由属性的值</span></span><br><span class="line">person1.<span class="property">name</span> = <span class="string">&#x27;Greg&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>) <span class="comment">// 修改成功 可以读写</span></span><br><span class="line"><span class="comment">// 获取属性特征看看</span></span><br><span class="line"><span class="keyword">var</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person1, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor.<span class="property">configurable</span>) <span class="comment">// 返回false 代表不可配置！不可以删除！不可以修改特征！</span></span><br></pre></td></tr></table></figure>

<p>这段代码封印了 <code>person1</code>,因此不能再 <code>person1</code> 上面添加或删除属性，所有的封印对象都是不可扩展的对象，此时对 <code>person1</code> 使用 <code>Ojbect.Extensible()</code>方法将返回 false,并且试图添加 <code>sayName()</code> 会失败，而且，虽然 <code>person1.name</code> 被成功改变为新值，是因为它 <code>writable</code> 为 <code>true</code>，可以读写，但是删除它确是失败，因为它的数据属性特征 <code>configurable</code> 为 <code>false</code>,不可配置！</p>
<p>🔔 注意：</p>
<ol>
<li>禁止扩展：只是阻止了扩展功能，无法添加新的属性和方法。</li>
<li>封印对象：在阻止扩展功能的前提上，增加了不可配置，不能删除和重新配置<br>相同点：它们都是可以针对对象自有属性进行 writable 读写的！</li>
</ol>
<h3 id="对象冻结-Object-fieeze"><a href="#对象冻结-Object-fieeze" class="headerlink" title="对象冻结 Object.fieeze()"></a>对象冻结 Object.fieeze()</h3><hr>
<p>创建不可扩展对象的最后一种方法是冻结它。<br>如果一个对象被冻结，则不能再其上添加或删除属性，不能改变属性类型，也不能写入任何数据属性。<br>简而言之，被冻结对象是一个数据属性都为只读的被封印对象，所以 <code>Object.isExtensible()</code> 返回为 <code>false</code> (不可扩展)，而 <code>Object.isSealed()</code>返回 <code>true</code> （被封印）。<br>被冻结对象无法解冻！</p>
<hr>
<p>判断对象是否被冻结：<code>Object.isFrozen(对象名)</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;YangYangYang&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(person1)); <span class="comment">// true 可扩展</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isSealed</span>(person1)); <span class="comment">// false 没被封印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isPFrozen</span>(person1)); <span class="comment">// false 没被冻结</span></span><br><span class="line"><span class="comment">// 强制冻结此对象</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(person1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(person1)); <span class="comment">// false 不可扩展</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isSealed</span>(person1)); <span class="comment">// true 被封印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isPFrozen</span>(person1)); <span class="comment">// true 被冻结</span></span><br></pre></td></tr></table></figure>

<p>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;YangYangYang&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(person1)) <span class="comment">// true 可扩展</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isSealed</span>(person1)) <span class="comment">// false 没被封印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(person1)) <span class="comment">// false 没被冻结</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制冻结</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(person1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(person1)) <span class="comment">// false 不可扩展</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isSealed</span>(person1)) <span class="comment">// true 被封印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(person1)) <span class="comment">// true 被冻结</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试给对象添加方法</span></span><br><span class="line">person1.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sayName&#x27;</span> <span class="keyword">in</span> person1) <span class="comment">// 判断sayName在person1对象当中吗 结果为false 证明没添加到对象中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试给自由属性读写 改变属性值</span></span><br><span class="line">person1.<span class="property">name</span> = <span class="string">&#x27;杨大哥&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>) <span class="comment">// 结果依然是冻结之前定义的已有name 证明读写失败  writable为false 不可读写！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取属性name的类型特征</span></span><br><span class="line"><span class="keyword">var</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person1, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor.<span class="property">configurable</span>) <span class="comment">//  false 不可配置</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor.<span class="property">writable</span>) <span class="comment">// false 不可读写</span></span><br></pre></td></tr></table></figure>

<p>🔔 注意：被冻结的对象仅仅只是对象在某个时间点上的快照，其用途有限且极少使被使用；使用的时候注意，不可扩展，对象封印，对象冻结的特性来根据需求选择！<br>冻结对象较于封印对象 多了属性 [[Writable]] 为 <code>false</code> 不可写！ 只能读~</p>
<p>冻结/封印/扩展的时候注意是冻结实例对象还是冻结构造函数的原型，但是常规的原型引用的目的就是为了共享，所以原型的冻结是没必要的，一般原生提供的 <code>Object</code> 顶级对象的原型 就是可以提供修改的 只是不能删除(不可配置 <code>configurable</code>)</p>
<h2 id="模块模式和暴露模块模式"><a href="#模块模式和暴露模块模式" class="headerlink" title="模块模式和暴露模块模式"></a>模块模式和暴露模块模式</h2><hr>
<p>模块模式：（单个对象，字面量对象）<br>模块模式是一种用于创建拥有私有数据的单件对象的模式。基本做法是使用立即执行函数表达（IIFE）来返回一个对象。IIFE 是一种被定义后立即调用并产生结果的函数表达，该函数表达可以包括任意数量的本地 变量，它们在函数外不可见。因为返回的对象被定义在函数内部，对象的方法可以访问这些数据。(IIFE 定义的所有的对象都可以访问同样的本地变量)以这种方式访问私有数据的方法被称为特权方法。</p>
<hr>
<p>栗：基本格式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> yourObj = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 私有数据 变量</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 公有的方法和属性</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p>该模式创建了一个匿名函数并立即执行。这种立即执行函数意味着仅存在于被调用的瞬间，一旦执行完毕立即销毁。<br>模块模式允许使用普通变量作为非公有对象属性。<br>通过创建闭包函数作为对象方法来操作它们。<br>闭包函数就是一个可以访问其他作用域外部数据的普通函数。</p>
<p>举例来说：<br>当你在一个函数中访问一个全局对象，比如网页浏览器的 window 对象，该函数就是在访问其欧用于的变量。</p>
<p>区别是：<br>在模块模式里，变量是定义在 IIFE(立即执行表达式函数)中，而访问变量的函数也定义在 IIFE 中。</p>
<p>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">25</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Yang&#x27;</span>,</span><br><span class="line">    <span class="attr">getAge</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> age</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">growOLder</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      age++</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>) <span class="comment">// Yang</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getAge</span>()) <span class="comment">// 25</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">100</span> <span class="comment">//</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getAge</span>()) <span class="comment">// 所以结果还是 25</span></span><br><span class="line">person.<span class="title function_">growOlder</span>() <span class="comment">// 执行一次++函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getAge</span>()) <span class="comment">// 26</span></span><br></pre></td></tr></table></figure>

<p>这段代码使用模块创建了 <code>person</code> 对象。<br>变量 <code>age</code> 就是该对象的一个私有属性。<br>它无法被外界直接访问，但可以通过对象方法来操作。<br>该对象上有有两个特权方法：<code>getAge()</code>读取变量 <code>age</code> 的值，<code>growOlder()</code> 让 <code>age</code> 自增.<br>这两个方法都可以直接访问变量 <code>age</code>，因为它们都定义了同一个 IIFE 内。</p>
<h3 id="暴露模块模式"><a href="#暴露模块模式" class="headerlink" title="暴露模块模式"></a>暴露模块模式</h3><p>它将所有的变量和方法都组织在 IIFE 的顶部，然后将它们设置到需要被返回的对象上。</p>
<p>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">25</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">growOlder</span>(<span class="params"></span>) &#123;</span><br><span class="line">    age++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 以上都是本地的 私有的</span></span><br><span class="line">  <span class="comment">// 下面是决定将哪些私有的 本地的 方法或属性 暴露出去</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Yang&#x27;</span>,</span><br><span class="line">    <span class="attr">getAge</span>: getAge,</span><br><span class="line">    <span class="attr">growOlder</span>: growOlder,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p>在暴露模块模式中，<code>age,getAge()</code> 和 <code>growOlder()</code> 都被定义成 IIFE 的本地对象。<br>然后 <code>getAge()</code> 和<code>growOlder()</code> 函数被设置到返回的对象中，有效地对外界进行了 “暴露”。<br>也就是说，只能对暴露出来的这些属性和方法进行操作！</p>
<h3 id="构造函数的私有成员"><a href="#构造函数的私有成员" class="headerlink" title="构造函数的私有成员"></a>构造函数的私有成员</h3><p>模块模式在定义单 对象的私有属性上十分有效，但对于同样需要私有属性的自定义类型，需要用构造函数类型的模块模式来创建。</p>
<p>栗：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="comment">// 定义一个只能在Person构造函数内部访问的变量</span></span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">25</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">growOlder</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    age++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Yang&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>) <span class="comment">// Yang</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getAge</span>()) <span class="comment">// 25</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getAge</span>()) <span class="comment">// 25</span></span><br><span class="line">person.<span class="title function_">growOlder</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getAge</span>()) <span class="comment">// 26</span></span><br></pre></td></tr></table></figure>

<p>在这段代码中，<code>Person</code> 构造函数有一个本地变量 <code>age</code>。<br>该变量被用于 <code>getAge()</code>和 <code>growOlder()</code>方法，当你创建 <code>Person</code> 的一个实例时，该实例接收其自身的 <code>age</code> 变量、<code>getAge()</code> 方法和 <code>growOlder()</code>方法，这种做法在很多方面类似模块模式，构造函数创建一个本地作用域并返回 <code>this</code> 对象。<br>将方法直接放在对象实例上不如放在原型对象有效，但是如果需要实例私有的数据，这是唯一的手段！</p>
<p><strong>所有实例可共享的私有数据：</strong><br>就好像它被定义在原型对象里那样，需要结合模块模式和构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 每个人的年龄都一样</span></span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">25</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">InnerPerson</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">InnerPerson</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">InnerPerson</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">growOlder</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    age++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">InnerPerson</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Yang&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Wang&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>) <span class="comment">// Yang</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">getAage</span>()) <span class="comment">// 25</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="property">name</span>) <span class="comment">// Wang</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="title function_">getAge</span>())</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="comment">//  调用++函数</span></span><br><span class="line">person1.<span class="title function_">growOlder</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">getAge</span>()) <span class="comment">// 26</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="title function_">getAge</span>()) <span class="comment">// 26</span></span><br></pre></td></tr></table></figure>

<p>在这段代码中，<code>InnerPerson</code> 构造函数被定义在一个 IIFE 中。<br>变量 <code>age</code> 被定义在构造函数外并被两个原型对象的方法使用。<br>IIFE 返回 <code>InnerPerson</code> 构造函数作为全局作用域里的 Person 构造函数。<br>最终，Person 的全部实例得以共享 <code>age</code> 变量，所以在一个实例上的改变自动影响另外一个。</p>
]]></content>
      <categories>
        <category>前端原生</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员作息表</title>
    <url>/schedule/</url>
    <content><![CDATA[<blockquote>
<p>程序员关注自身健康,首先从作息时间开始。</p>
</blockquote>
<p>任何试图更改生物钟的行为，都将给身体留下莫名其妙的疾病,辛苦的程序员们,给自己健康一个保障,做一个有益于健康的作息时间表。</p>
<p>8.30 ~ 早班（每一小时，眼睛休息 3 分钟左右） ~ 11 点喝酸奶（每天三餐之间喝酸奶有利，心脏健康）</p>
<p>12:00 ~ 午饭（午休 15-30 分钟）</p>
<p>13:30 ~ 下午班（每一小时，眼睛休息 3 分钟左右） ~ 16 点喝酸奶</p>
<p>18:00 ~ 下班前用 10 分钟总结一下今天的工作内容和计划明天的工作内容，下班回家</p>
<p>19:30 ~ 家庭时间 (no-computer time)晚饭,聊天,锻炼（一三五）,阅读</p>
<p>20:30 ~ 学习技术，撸会代码</p>
<p>23:00 ~ 洗漱准备休息</p>
<p>23:30 ~ 睡觉</p>
<p>周六和周天   不上班</p>
<p>逛超市，看电影，睡懒觉，每天 3 小时学习，周天晚上花 30 分钟想想下周的工作和学习计划。</p>
<blockquote>
<p>如何在高强度的工作和学习中保持精力充沛，头脑清醒？</p>
</blockquote>
<p>学习工作要注重效率，不能花的时间而没有效率，那是很蛋疼的事，所以建议：要有充足的睡眠，每天最少 7-8 小时，中午午睡半小时（这个很重要），平时要经常健身,这会让自己很有精力，饮食：吃好喝好。</p>
<blockquote>
<p>如何对自己的工作和学习任务有计划的进行，这肯定要对任务进行拆解？</p>
</blockquote>
<ol>
<li><p>先梳理一年内要干的事情，定个目标，比如提高 js 技术，或者学习 go。</p>
</li>
<li><p>拆分目标，大概需要做那些事。</p>
</li>
<li><p>采用倒推法把事情分到每个月，每周。</p>
</li>
<li><p>每周强制自己完成制定的计划任务，一定要坚持。</p>
</li>
<li><p>一年后，你会发现，大概率目标完成了。</p>
</li>
<li><p>如果不这样，一年的时候过得很快，你会发现，还有好多事没有完成。</p>
</li>
</ol>
<blockquote>
<p>如何在工作中任务要分情况来处理？</p>
</blockquote>
<p>不分先后的工作，你会很累，还完成不了任务，需要加班加点来完成 ，给领导留下工作效率低的不好印象！要按如下的优先级来处理工作。</p>
<p>一级：紧急且重要的事。</p>
<p>二级：紧急且不重要的事。</p>
<p>三级：不紧急但重要的事。</p>
<p>四级：不紧急且不重要的事。</p>
]]></content>
      <categories>
        <category>分享类</category>
      </categories>
      <tags>
        <tag>schedule</tag>
      </tags>
  </entry>
  <entry>
    <title>朱雀云丹 · 风采铃</title>
    <url>/video_yztx/</url>
    <content><![CDATA[<p>一壶生死曾入喉，醉梦黄泉九千宵。转眼形骸具付灭，悲欢两散天涯老。</p>
<span id="more"></span>
<!-- <iframe src="//player.bilibili.com/player.html?aid=54488812&bvid=BV1Z4411n7my&cid=95263211&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="500px"> </iframe>
 -->
<iframe src="//player.bilibili.com/player.html?aid=54488812&bvid=BV1Z4411n7my&cid=95263211&page=1&high_quality=1&danmaku=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe>]]></content>
      <categories>
        <category>分享类</category>
      </categories>
      <tags>
        <tag>video</tag>
      </tags>
  </entry>
  <entry>
    <title>Pjax 下动态加载插件方案</title>
    <url>/pjax_dynamic_plugins/</url>
    <content><![CDATA[<p>在纯静态网站里，有时候会动态更新某个区域往会选择 Pjax（swup、barba.js）去处理，他们都是使用 ajax 和 pushState 通过真正的永久链接，页面标题和后退按钮提供快速浏览体验。</p>
<span id="more"></span>

<p>但是实际使用中可能会遇到不同页面可能会需要加载不同插件处理，有些人可能会全量选择加载，这样会导致加载很多无用的脚本，有可能在用户关闭页面时都不一定会访问到，会很浪费资源。</p>
<h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>首先想到的肯定是在请求到新的页面后，我们手动去比较当前 DOM 和 新 DOM 之间 <code>script</code> 标签的差异，手动给他插入到 body 里。</p>
<h3 id="处理-Script"><a href="#处理-Script" class="headerlink" title="处理 Script"></a>处理 Script</h3><p>一般来说 JavaScript 脚本都是放在 <code>body</code> 后，避免阻塞页面渲染，假设我们页面脚本也都是在 <code>body</code> 后，并在 script 添加 <code>[data-reload-script]</code> 表明哪些是需要动态加载的。</p>
<p>首先我们直接获取到带有 <code>[data-reload-script]</code> 属性的 script 标签:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NewHTML 为 新页面 HTML</span></span><br><span class="line"><span class="keyword">const</span> pageContent = <span class="title class_">NewHTML</span>.<span class="title function_">replace</span>(</span><br><span class="line">  <span class="string">&#x27;&lt;body&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;&lt;div id=&quot;DynamicPluginBody&quot;&#x27;</span></span><br><span class="line">).<span class="title function_">replace</span>(<span class="string">&#x27;&lt;/body&gt;&#x27;</span>, <span class="string">&#x27;&lt;/div&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> element = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">element.<span class="property">innerHTML</span> = pageContent</span><br><span class="line"><span class="keyword">const</span> children = element</span><br><span class="line">  .<span class="title function_">querySelector</span>(<span class="string">&#x27;#DynamicPluginBody&#x27;</span>)</span><br><span class="line">  .<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;script[data-reload-script]&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>然后通过创建 script 标签插入到 <code>body</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">children.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> &#123; name, value &#125; <span class="keyword">of</span> <span class="title function_">arrayify</span>(item.<span class="property">attributes</span>)) &#123;</span><br><span class="line">    element.<span class="title function_">setAttribute</span>(name, value)</span><br><span class="line">  &#125;</span><br><span class="line">  element.<span class="property">textContent</span> = item.<span class="property">textContent</span></span><br><span class="line">  element.<span class="title function_">setAttribute</span>(<span class="string">&#x27;async&#x27;</span>, <span class="string">&#x27;false&#x27;</span>)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">insertBefore</span>(element)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果你的插件都是通过 script 引入，且不需要执行额外的 JavaScript 代码，只需要在 Pjax 钩子函数这样处理就可以了。</p>
<h4 id="执行代码块"><a href="#执行代码块" class="headerlink" title="执行代码块"></a>执行代码块</h4><p>实际很多插件不仅仅需要你引入，还需要你手动去初始化做一些操作的。我们可以通过 <code>src</code> 去判断是引入的脚本，还是代码块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> scripts = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">document</span>.<span class="property">scripts</span>)</span><br><span class="line"><span class="keyword">let</span> scriptCDN = []</span><br><span class="line"><span class="keyword">let</span> scriptBlock = []</span><br><span class="line"></span><br><span class="line">children.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (item.<span class="property">src</span>)</span><br><span class="line">    scripts.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">s</span>) =&gt;</span> s.<span class="property">src</span> === item.<span class="property">src</span>) &lt; <span class="number">0</span> &amp;&amp; scriptCDN.<span class="title function_">push</span>(item)</span><br><span class="line">  <span class="keyword">else</span> scriptBlock.<span class="title function_">push</span>(item.<span class="property">innerText</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>scriptCDN 继续通过上面方式插入到 body 里，然后通过 eval 或者 new Function 去执行 scriptBlock 。因为 scriptBlock 里的代码可能是会依赖 scriptCDN 里的插件的，所以需要在 scriptCDN 加载完成后在执行 scriptBlock 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">loadScript</span> = (<span class="params">item</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> &#123; name, value &#125; <span class="keyword">of</span> <span class="title function_">arrayify</span>(item.<span class="property">attributes</span>)) &#123;</span><br><span class="line">      element.<span class="title function_">setAttribute</span>(name, value)</span><br><span class="line">    &#125;</span><br><span class="line">    element.<span class="property">textContent</span> = item.<span class="property">textContent</span></span><br><span class="line">    element.<span class="title function_">setAttribute</span>(<span class="string">&#x27;async&#x27;</span>, <span class="string">&#x27;false&#x27;</span>)</span><br><span class="line">    element.<span class="property">onload</span> = resolve</span><br><span class="line">    element.<span class="property">onerror</span> = reject</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">insertBefore</span>(element)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">runScriptBlock</span> = (<span class="params">code</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> func = <span class="keyword">new</span> <span class="title class_">Function</span>(code)</span><br><span class="line">    <span class="title function_">func</span>()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="built_in">eval</span>(code)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(scriptCDN.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="title function_">loadScript</span>(item))).<span class="title function_">then</span>(<span class="function">(<span class="params">_</span>) =&gt;</span> &#123;</span><br><span class="line">  scriptBlock.<span class="title function_">forEach</span>(<span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">runScriptBlock</span>(code)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="卸载插件"><a href="#卸载插件" class="headerlink" title="卸载插件"></a>卸载插件</h4><p>按照上面思去处理之后，会存在一个问题。 比如：我们添加了一个 全局的 ‘resize’ 事件的监听，在跳转其他页面时候我们需要移除这个监听事件。</p>
<p>这个时候我们需要对代码块的格式进行一个约束，比如像下面这样，在初次加载时执行 mount 里代码，页面卸载时执行 unmount 里代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script data-reload-script&gt;</span><br><span class="line">    <span class="title class_">DynamicPlugin</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line">        <span class="comment">// 页面加载时执行</span></span><br><span class="line">        <span class="title function_">mount</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;time&#x27;</span>).<span class="property">innerText</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toString</span>()</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 页面卸载时执行</span></span><br><span class="line">        <span class="title function_">unmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>DynamicPlugin 大致结构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cacheMount = []</span><br><span class="line"><span class="keyword">let</span> cacheUnMount = []</span><br><span class="line"><span class="keyword">let</span> context = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicPlugin</span> &#123;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isFunction</span>(options)) cacheMount.<span class="title function_">push</span>(options)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isPlainObject</span>(options)) &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; mount, unmount &#125; = options</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isFunction</span>(mount)) cacheMount.<span class="title function_">push</span>(mount)</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isFunction</span>(unmount)) cacheUnMount.<span class="title function_">push</span>(unmount)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行当前页面加载钩子</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">runMount</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">runMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (cacheMount.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> item = cacheMount.<span class="title function_">shift</span>()</span><br><span class="line">      item.<span class="title function_">call</span>(context)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">runUnMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (cacheUnMount.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> item = cacheUnMount.<span class="title function_">shift</span>()</span><br><span class="line">      item.<span class="title function_">call</span>(context)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>页面卸载时调用 DynamicPlugin.runUnMount()。</p>
<h3 id="处理-Head"><a href="#处理-Head" class="headerlink" title="处理 Head"></a>处理 Head</h3><p>Head 部分处理来说相对比较简单，可以通过拿到新旧两个 Head，然后循环对比每个标签的 <code>outerHTML</code>，用来判断哪些比是需要新增的哪些是需要删除的。</p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>本文示例代码完整版本可以 <a href="https://github.com/MaLuns/dynamic-plugin">参考这里</a></p>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>Pjax</tag>
      </tags>
  </entry>
  <entry>
    <title>前端自动化测试 【JEST】</title>
    <url>/test/</url>
    <content><![CDATA[<p>前端自动化测试框架 JEST。</p>
<h2 id="JEST-框架的安装使用"><a href="#JEST-框架的安装使用" class="headerlink" title="JEST 框架的安装使用"></a>JEST 框架的安装使用</h2><p>安装：<code>npm install jest@24.8.0 -D</code> ，推荐使用这个版本。</p>
<p>package.json 文件的 script 里面的 test 修改如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line"><span class="comment">// 修改了以后 执行命令就会去找带test.js的后缀文件 并自动监听</span></span><br><span class="line">  <span class="string">&quot;test&quot;</span>: <span class="string">&quot;jest --watchAll&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>执行测试命令： <code>npm run test</code>。</p>
<ul>
<li>单元测试：模块测试。</li>
<li>集成测试：多模块测试。</li>
</ul>
<p>expect(要测试的)， .toBe(此方法期望的结果 ) 它是一个匹配器。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意，jest 测试框架支持 CommonJS 模块化规范</span></span><br><span class="line"><span class="comment">// xxx.test.js文件  ===&gt; 这是测试文件</span></span><br><span class="line"><span class="keyword">const</span> math = <span class="built_in">require</span>(<span class="string">&#x27;./math.js&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; add, minus, multi &#125; = math</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试加法 3 + 7&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">add</span>(<span class="number">3</span>, <span class="number">7</span>)).<span class="title function_">toBe</span>(<span class="number">10</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试减法 3 - 3&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">minus</span>(<span class="number">3</span>, <span class="number">3</span>)).<span class="title function_">toBe</span>(<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试乘法 3 * 3&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">multi</span>(<span class="number">3</span>, <span class="number">3</span>)).<span class="title function_">toBe</span>(<span class="number">9</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是被测试文件  math.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">minus</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multi</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a * b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 使浏览器不报错 使用 try catch</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    add,</span><br><span class="line">    minus,</span><br><span class="line">    multi,</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JEST-的配置"><a href="#JEST-的配置" class="headerlink" title="JEST 的配置"></a>JEST 的配置</h3><p>配置 JEST <code>npx jest --init</code>。</p>
<p>根据需要选择 <code>node</code> 或者 浏览器环境。<br>前三个都默认<code>yes</code> 会生成 <code>jest.config.js</code> 文件。<br>执行如下命令会生成测试覆盖率的申明 会生成一个 <code>coverage</code> 目录。</p>
<p><code>npx jest --coverage</code></p>
<p>使 JEST 识别 ES6 模块语法，需安装 babel <code>pm install @babel/core@7.4.5 @babel/preset-env@7.4.5 -D</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置babel 新建.babelrc 文件进行配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;targets&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;node&quot;</span>: <span class="string">&quot;current&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这样就可以使用 ES6的模块语法</span></span><br></pre></td></tr></table></figure>

<h3 id="JEST-中的匹配器"><a href="#JEST-中的匹配器" class="headerlink" title="JEST 中的匹配器"></a>JEST 中的匹配器</h3><ol>
<li>测试值相等，它无法匹配对象内容的引用</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试加法 3 + 7&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// toBe 匹配器 matchers 相当于 object.js ===</span></span><br><span class="line">  <span class="comment">// 字符串 数值 布尔值 简单类型推荐使用</span></span><br><span class="line">  <span class="title function_">expect</span>(<span class="number">10</span>).<span class="title function_">toBe</span>(<span class="number">10</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>测试对象内容相等</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试对象内容相等&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// toEqual 匹配器 引用类型推荐使用</span></span><br><span class="line">  <span class="keyword">const</span> a = &#123; <span class="attr">one</span>: <span class="number">1</span> &#125;</span><br><span class="line">  <span class="title function_">expect</span>(a).<span class="title function_">toEqual</span>(&#123; <span class="attr">one</span>: <span class="number">1</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>变量和 null 进行匹配</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;null匹配器&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// toBeNull 匹配器</span></span><br><span class="line">  <span class="keyword">const</span> a = <span class="literal">null</span></span><br><span class="line">  <span class="title function_">expect</span>(a).<span class="title function_">toBeNull</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>真假有关的匹配器</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;toBeUndefined 匹配器&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="literal">undefined</span></span><br><span class="line">  <span class="title function_">expect</span>(a).<span class="title function_">toBeUndefined</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;toBeDefined 匹配器&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">1</span> <span class="comment">// 定义过的才可以</span></span><br><span class="line">  <span class="title function_">expect</span>(a).<span class="title function_">toBeDefined</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;toBeTruthy 相当于true匹配器&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">  <span class="comment">// 判断是否为真的匹配器 相当于 true 的条件才可以</span></span><br><span class="line">  <span class="title function_">expect</span>(a).<span class="title function_">toBeTruthy</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;toBeFalsy 相当于false匹配器&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 判断是否为假的匹配器 相当于 false 的条件才可以</span></span><br><span class="line">  <span class="title function_">expect</span>(a).<span class="title function_">toBeFalsy</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;not 取反匹配器&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line">  <span class="title function_">expect</span>(a).<span class="property">not</span>.<span class="title function_">toBeFalsy</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>数字相关的 匹配器</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 大于匹配器</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;toBeGreaterThan&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">10</span></span><br><span class="line">  <span class="title function_">expect</span>(a).<span class="title function_">toBeGreaterThan</span>(<span class="number">9</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小于匹配器</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;toBeLessThan&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">6</span></span><br><span class="line">  <span class="title function_">expect</span>(a).<span class="title function_">toBeLessThan</span>(<span class="number">9</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大于等于匹配器</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;toBeGreaterThanOrEqual&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">6</span></span><br><span class="line">  <span class="title function_">expect</span>(a).<span class="title function_">toBeGreaterThanOrEqual</span>(<span class="number">6</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理浮点数</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;toBeCloseTo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">0.1</span></span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">0.2</span></span><br><span class="line">  <span class="title function_">expect</span>(a + b).<span class="title function_">toBeCloseTo</span>(<span class="number">0.3</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>字符串相关的匹配器</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否包含某个字符串</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;toMatch&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">&#x27;http://www.dell-lee.com&#x27;</span></span><br><span class="line">  <span class="title function_">expect</span>(str).<span class="title function_">toMatch</span>(<span class="string">&#x27;dell&#x27;</span>) <span class="comment">// 也可以写表达式</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>数组相关的匹配器</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否数组包含某个项</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;toContain&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = [<span class="string">&#x27;dell&#x27;</span>, <span class="string">&#x27;lee&#x27;</span>, <span class="string">&#x27;imooc&#x27;</span>]</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">new</span> <span class="title class_">Set</span>(arr)</span><br><span class="line">  <span class="title function_">expect</span>(data).<span class="title function_">toContain</span>(<span class="string">&#x27;dell&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>处理异常的匹配器</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异常</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">throwNewErrorFunc</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;this is a new error&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;toThrow&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(throwNewErrorFunc).<span class="title function_">toThrow</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>🔔 注意：如果当一个文件中测试用例过多，只针对其中一个进行测试，可以添加.only。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比如</span></span><br><span class="line">test.<span class="title function_">only</span>(<span class="string">&#x27;测试 Counter 中的 addOne 方法&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  counter.<span class="title function_">addOne</span>()</span><br><span class="line">  <span class="title function_">expect</span>(counter.<span class="property">number</span>).<span class="title function_">toBe</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="JEST-命令工具的使用"><a href="#JEST-命令工具的使用" class="headerlink" title="JEST 命令工具的使用"></a>JEST 命令工具的使用</h3><p>当执行测试命令 npm run test 测试代码的时候会提示 <code>w</code> 切换。</p>
<p>f : f 的意思是 只对之前当前文件测试失败的代码进行测试 退出在 f。<br>o : 当有多个测试文件测试的时候，需要使用它 或者改 watchAll 为 watch。<br>t : 过滤模式 需要针对 pattern 输入对应要检测的模式。<br>q : 退出模式。<br>p : 它的作用是类似正则一样，检测比如 输入 matchers 它就会去找类似的文件。</p>
<h3 id="异步代码的测试方法"><a href="#异步代码的测试方法" class="headerlink" title="异步代码的测试方法"></a>异步代码的测试方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回调方法一：</span></span><br><span class="line">.<span class="property">js</span>文件</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">fetchData</span> = (<span class="params">fn</span>) =&gt; &#123;</span><br><span class="line">  axios.<span class="title function_">get</span>(<span class="string">&#x27;http://www.dell-lee.com/react/api/demo.json&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">fn</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 done 作为回调的第二个参数，否则不执行后面的语句</span></span><br><span class="line">.<span class="property">test</span>.<span class="property">js</span>文件</span><br><span class="line"><span class="keyword">import</span> &#123; fetchData &#125; <span class="keyword">from</span> <span class="string">&#x27;./fetchDate&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;fetchData 返回结果为 &#123; success: true &#125;&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">fetchData</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(data).<span class="title function_">toEqual</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">done</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 方法2 直接返回Promise 推荐</span></span><br><span class="line">.<span class="property">js</span> 文件</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">fetchData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;http://www.dell-lee.com/react/api/demo.json&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">.<span class="property">test</span>.<span class="property">js</span> 文件</span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;fetchData 返回结果为 &#123; success: true &#125;&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(res.<span class="property">data</span>).<span class="title function_">toEqual</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要满足404 类似错误的结果</span></span><br><span class="line"><span class="comment">// 比如 输错了请求地址</span></span><br><span class="line">.<span class="property">test</span>.<span class="property">js</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;fetchData 返回结果为 404&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  expect.<span class="title function_">assertions</span>(<span class="number">1</span>)  <span class="comment">// 使用 catch 一定记得用它</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetchData</span>().<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(e.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&#x27;404&#x27;</span>) &gt; <span class="number">1</span>).<span class="title function_">toBe</span>(<span class="literal">true</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="另一种处理异步代码的测试方法"><a href="#另一种处理异步代码的测试方法" class="headerlink" title="另一种处理异步代码的测试方法"></a>另一种处理异步代码的测试方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;fetchData 返回结果为 &#123; success: true &#125;&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 是否包含这个子对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">expect</span>(<span class="title function_">fetchData</span>()).<span class="property">resolves</span>.<span class="title function_">toMatchObject</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------  还可以用 async await 方式写</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;fetchData 返回结果为 404&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  expect.<span class="title function_">assertions</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">fetchData</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(e.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&#x27;404&#x27;</span>) &gt; <span class="number">1</span>).<span class="title function_">toBe</span>(<span class="literal">true</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试处理失败的情况</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;fetchData 返回结果为 &#123; success: true &#125;&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">expect</span>(<span class="title function_">fetchData</span>()).<span class="property">rejects</span>.<span class="title function_">toThrow</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="推荐写法"><a href="#推荐写法" class="headerlink" title="推荐写法"></a>推荐写法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;fetchData 返回结果为 &#123; success: true &#125;&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetchData</span>()</span><br><span class="line">  <span class="title function_">expect</span>(res.<span class="property">data</span>).<span class="title function_">toEqual</span>(&#123;</span><br><span class="line">    <span class="attr">success</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理错误</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;fetchData 返回结果为 404&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  expect.<span class="title function_">assertions</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">fetchData</span>()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="title function_">expect</span>(e.<span class="title function_">toString</span>()).<span class="title function_">toEqual</span>(<span class="string">&#x27;Error: Request failed with status code 404&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="JEST-中的钩子函数"><a href="#JEST-中的钩子函数" class="headerlink" title="JEST 中的钩子函数"></a>JEST 中的钩子函数</h3><p>不使用钩子函数的情况，会有一些问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比如有这么一个例子：</span></span><br><span class="line">.<span class="property">js</span> 文件</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">number</span> = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">number</span> += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">minusOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">number</span> -= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">.<span class="property">test</span>.<span class="property">js</span> 文件</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Counter</span> <span class="keyword">from</span> <span class="string">&#x27;./Counter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要在测试之前对一些公共信初始化 推荐使用钩子函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter = <span class="keyword">new</span> <span class="title class_">Counter</span>  <span class="comment">// 这样初始化测试的时候其实有问题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试 Counter 中的 addOne 方法&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  counter.<span class="title function_">addOne</span>()</span><br><span class="line">  <span class="title function_">expect</span>(counter.<span class="property">number</span>).<span class="title function_">toBe</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试 Counter 中的 minusOne 方法&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  counter.<span class="title function_">minusOne</span>()</span><br><span class="line">  <span class="title function_">expect</span>(counter.<span class="property">number</span>).<span class="title function_">toBe</span>(<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 这样在测试过程中，第二个方法执行就会以第一个方法执行为标准，耦合度高</span></span><br><span class="line"><span class="comment">// 不是想要得到的结果，addOne + 1了 minusOne又在addOne基础上-1</span></span><br><span class="line"><span class="comment">// 相互之间存在依赖</span></span><br></pre></td></tr></table></figure>

<p>如果要在测试之前对一些公共信初始化 推荐使用钩子函数 <code>beforeEach</code>。</p>
<ul>
<li><code>beforeAll( ()=&gt;&#123;&#125; )</code> 第一个运行的钩子函数。</li>
<li><code>befaoreEach( ()=&gt;&#123;&#125; )</code> 当每个测试用例执行之前，都先执行下 <code>beforeEach</code> 钩子函数。</li>
<li><code>afterEach( ()=&gt;&#123;&#125; )</code> 当每个测试用例执行之后 都会执行这个钩子函数。</li>
<li><code>afterAll( ()=&gt;&#123;&#125; )</code> 等待所有的测试用例结束后执行的钩子函数。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Counter</span> <span class="keyword">from</span> <span class="string">&#x27;./Counter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要在测试之前对一些公共信初始化 推荐使用钩子函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  counter = <span class="keyword">new</span> <span class="title class_">Counter</span>() <span class="comment">// 将初始化工作放入 beforeEach 中</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试 Counter 中的 addOne 方法&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  counter.<span class="title function_">addOne</span>()</span><br><span class="line">  <span class="title function_">expect</span>(counter.<span class="property">number</span>).<span class="title function_">toBe</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试 Counter 中的 minusOne 方法&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  counter.<span class="title function_">minusOne</span>()</span><br><span class="line">  <span class="title function_">expect</span>(counter.<span class="property">number</span>).<span class="title function_">toBe</span>(-<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>分组钩子：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Counter</span> <span class="keyword">from</span> <span class="string">&#x27;./Counter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要在测试之前对一些公共信初始化 推荐使用钩子函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  counter = <span class="keyword">new</span> <span class="title class_">Counter</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;测试跟加相关的代码&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">test</span>(<span class="string">&#x27;测试 Counter 中的 addOne 方法&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    counter.<span class="title function_">addOne</span>()</span><br><span class="line">    <span class="title function_">expect</span>(counter.<span class="property">number</span>).<span class="title function_">toBe</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">test</span>(<span class="string">&#x27;测试 Counter 中的 addTwo 方法&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    counter.<span class="title function_">addTwo</span>()</span><br><span class="line">    <span class="title function_">expect</span>(counter.<span class="property">number</span>).<span class="title function_">toBe</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;测试跟减相关的代码&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">test</span>(<span class="string">&#x27;测试 Counter 中的 minusOne 方法&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    counter.<span class="title function_">minusOne</span>()</span><br><span class="line">    <span class="title function_">expect</span>(counter.<span class="property">number</span>).<span class="title function_">toBe</span>(-<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">test</span>(<span class="string">&#x27;测试 Counter 中的 minusTwo 方法&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    counter.<span class="title function_">minusTwo</span>()</span><br><span class="line">    <span class="title function_">expect</span>(counter.<span class="property">number</span>).<span class="title function_">toBe</span>(-<span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>钩子函数的作用域：</p>
<p>钩子函数的作用域跟作用域链的基本差不多，每一个 <code>describe</code> 里面都可以有自己的钩子函数，最外层的 <code>describe</code> 里面的钩子函数可以作用域内部 <code>describe</code> 的测试用例。</p>
<h3 id="JEST-中的-Mock"><a href="#JEST-中的-Mock" class="headerlink" title="JEST 中的 Mock"></a>JEST 中的 Mock</h3><p>作用：</p>
<ol>
<li>捕获函数的调用和返回结果，以及 this 和调用顺序。</li>
<li>它可以自由的设置返回结果。</li>
<li>改变内部函数的实现，比如下面的 测试 axios 请求。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .js 文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">runCallback</span> = (<span class="params">callback</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">callback</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .test.js 文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; runCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;./demo&#x27;</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试 runCallbaack&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> func = jest.<span class="title function_">fn</span>() <span class="comment">// jest 提供的 mock 函数</span></span><br><span class="line">  <span class="title function_">runCallback</span>(func)</span><br><span class="line">  <span class="title function_">expect</span>(func).<span class="title function_">toBeCalled</span>() <span class="comment">// 判断函数是否被调用过</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果多次调用</span></span><br><span class="line"><span class="keyword">import</span> &#123; runCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;./demo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试 runCallbaack&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> func = jest.<span class="title function_">fn</span>() <span class="comment">// jest 提供的 mock 函数</span></span><br><span class="line">  <span class="title function_">runCallback</span>(func)</span><br><span class="line">  <span class="title function_">runCallback</span>(func)</span><br><span class="line">  <span class="comment">// func.mock.calls.length 拿到调用的次数</span></span><br><span class="line">  <span class="title function_">expect</span>(func.<span class="property">mock</span>.<span class="property">calls</span>.<span class="property">length</span>).<span class="title function_">toBe</span>(<span class="number">2</span>) <span class="comment">// 断言 比如上面调用了两次</span></span><br><span class="line">  <span class="comment">// 类似于 expect(func).toBeCalledWith([&#x27;abc&#x27;])</span></span><br><span class="line">  <span class="comment">// 区别在于 上面是第一次调用的时候参数是 abc 下面是每一次调用是 abc</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(func.<span class="property">mock</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要拿到传递的参数</span></span><br><span class="line"><span class="comment">// .js文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">runCallback</span> = (<span class="params">callback</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">test</span>.<span class="property">js</span>文件</span><br><span class="line"><span class="keyword">import</span> &#123; runCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;./demo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试 runCallbaack&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> func = jest.<span class="title function_">fn</span>();  <span class="comment">// jest 提供的 mock 函数</span></span><br><span class="line">  <span class="title function_">runCallback</span>(func);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(func.<span class="property">mock</span>.<span class="property">calls</span>[<span class="number">0</span>]);</span><br><span class="line">  <span class="comment">// 通过 func.mock.call[0]</span></span><br><span class="line">  <span class="title function_">expect</span>(func.<span class="property">mock</span>.<span class="property">calls</span>[<span class="number">0</span>]).<span class="title function_">toEqual</span>([<span class="string">&#x27;abc&#x27;</span>])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要单独设置返回值</span></span><br><span class="line"><span class="keyword">import</span> &#123; runCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;./demo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试 runCallbaack&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> func = jest.<span class="title function_">fn</span>();  <span class="comment">// jest 提供的 mock 函数</span></span><br><span class="line">  <span class="comment">// 它支持链式操作 Once 是每次设置一个 不加Once 就全部添加</span></span><br><span class="line">  func.<span class="title function_">mockReturnValueOnce</span>(<span class="string">&#x27;Dell&#x27;</span>)</span><br><span class="line">    .<span class="title function_">mockReturnValueOnce</span>(<span class="string">&#x27;Lee&#x27;</span>)</span><br><span class="line">    .<span class="title function_">mockReturnValueOnce</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">    <span class="comment">// 还有种写法更底层强悍 可以写一个逻辑处理</span></span><br><span class="line">    <span class="comment">// func.mockImplementationOnce(()=&gt;&#123;  // 也可以不带Once</span></span><br><span class="line">        <span class="comment">// return &#x27;dell&#x27;</span></span><br><span class="line">        <span class="comment">// console.log(...) 等等逻辑</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="title function_">runCallback</span>(func);</span><br><span class="line">  <span class="title function_">runCallback</span>(func);</span><br><span class="line">  <span class="title function_">runCallback</span>(func);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(func.<span class="property">mock</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>测试 axios 请求：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .js 文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="property">data</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ---------------------------</span></span><br><span class="line">.<span class="property">test</span>.<span class="property">js</span> 文件</span><br><span class="line"><span class="keyword">import</span> &#123; runCallback, createObject, getData &#125; <span class="keyword">from</span> <span class="string">&#x27;./demo&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line">jest.<span class="title function_">mock</span>(<span class="string">&#x27;axios&#x27;</span>); <span class="comment">// jset 对 axios 做一个模拟</span></span><br><span class="line">test.<span class="title function_">only</span>(<span class="string">&#x27;测试 getDate&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  axios.<span class="property">get</span>.<span class="title function_">mockResolvedValue</span>(&#123; <span class="attr">data</span>: <span class="string">&#x27;hello&#x27;</span> &#125;)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">getData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(data).<span class="title function_">toBe</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果要返回 <code>this</code>，可以使用 <code>func.mockReturnThis()</code>，了解即可！</p>
<p><strong>mock 的深入学习：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">fetchData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="property">data</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//.test.js</span></span><br><span class="line"></span><br><span class="line">jest.<span class="title function_">mock</span>(<span class="string">&#x27;./demo&#x27;</span>) <span class="comment">// 使用的是 __mocaks__ 里面的demo文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; fetchData &#125; <span class="keyword">from</span> <span class="string">&#x27;./demo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;fetchDate 测试&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(<span class="built_in">eval</span>(data)).<span class="title function_">toEqual</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注意新建 __mocks__ 下面在建.js文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">fetchData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;(function()&#123;return &#x27;123&#x27;&#125;())&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种方法 修改 config.js 里面的 automocak: true</span></span><br></pre></td></tr></table></figure>

<p>如果即有需要 <code>mock</code> 的 <code>axios</code> 请求 又有非 <code>axios</code> 数据 就要这么写，不模拟真实就要用 <code>jest.requireActual</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">fetchData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="property">data</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getNumber</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .test.js</span></span><br><span class="line"></span><br><span class="line">jest.<span class="title function_">mock</span>(<span class="string">&#x27;./demo&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> &#123; fetchData &#125; <span class="keyword">from</span> <span class="string">&#x27;./demo&#x27;</span></span><br><span class="line"><span class="comment">// 注意，使用真实的 ./demo.js 而不是 __mocks__里面的.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; getNumber &#125; = jest.requireActual(<span class="string">&#x27;./demo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;fetchDate 测试&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(<span class="built_in">eval</span>(data)).<span class="title function_">toEqual</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面针对进行测试</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">`getNumber 测试`</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">getNumber</span>()).<span class="title function_">toEqual</span>(<span class="number">123</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>mock timers</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .js 文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (callback) =&gt; &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">callback</span>()</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">callback</span>()</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .test.js 文件</span></span><br><span class="line"><span class="comment">// 解决方法一：</span></span><br><span class="line"><span class="keyword">import</span> timer <span class="keyword">from</span> <span class="string">&#x27;./timer&#x27;</span></span><br><span class="line"><span class="comment">// 使用这个方法</span></span><br><span class="line">jest.<span class="title function_">useFakeTimers</span>()</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;timer 测试&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fn = jest.<span class="title function_">fn</span>()</span><br><span class="line">  <span class="title function_">timer</span>(fn)</span><br><span class="line">  <span class="comment">// 使定时器立即执行</span></span><br><span class="line">  jest.<span class="title function_">runAllTimers</span>()</span><br><span class="line">  <span class="comment">// 希望被调用几次，因为上面.js调用了两次</span></span><br><span class="line">  <span class="title function_">expect</span>(fn).<span class="title function_">toHaveBeenCalledTimes</span>(<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 推荐解决方案：</span></span><br><span class="line"><span class="keyword">import</span> timer <span class="keyword">from</span> <span class="string">&#x27;./timer&#x27;</span></span><br><span class="line">jest.<span class="title function_">useFakeTimers</span>()</span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;timer 测试&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fn = jest.<span class="title function_">fn</span>()</span><br><span class="line">  <span class="title function_">timer</span>(fn)</span><br><span class="line">  <span class="comment">// 让时间快进设置的延时时间</span></span><br><span class="line">  jest.<span class="title function_">advanceTimersByTime</span>(<span class="number">3000</span>)</span><br><span class="line">  <span class="title function_">expect</span>(fn).<span class="title function_">toHaveBeenCalledTimes</span>(<span class="number">1</span>)</span><br><span class="line">  jest.<span class="title function_">advanceTimersByTime</span>(<span class="number">3000</span>)</span><br><span class="line">  <span class="title function_">expect</span>(fn).<span class="title function_">toHaveBeenCalledTimes</span>(<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------  分割线  ------------</span></span><br><span class="line"><span class="comment">// 如果想每个测试互不影响，因为推荐解决方案会基于上次结束再次执行</span></span><br><span class="line"><span class="keyword">import</span> timer <span class="keyword">from</span> <span class="string">&#x27;./timer&#x27;</span></span><br><span class="line"><span class="comment">// 将它包裹在 beforeEach 钩子函数中</span></span><br><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  jest.<span class="title function_">useFakeTimers</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;timer 测试&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> fn = jest.<span class="title function_">fn</span>()</span><br><span class="line">  <span class="title function_">timer</span>(fn)</span><br><span class="line">  <span class="comment">// 让时间快进设置的延时时间</span></span><br><span class="line">  jest.<span class="title function_">advanceTimersByTime</span>(<span class="number">3000</span>)</span><br><span class="line">  <span class="title function_">expect</span>(fn).<span class="title function_">toHaveBeenCalledTimes</span>(<span class="number">1</span>)</span><br><span class="line">  jest.<span class="title function_">advanceTimersByTime</span>(<span class="number">3000</span>)</span><br><span class="line">  <span class="title function_">expect</span>(fn).<span class="title function_">toHaveBeenCalledTimes</span>(<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="JEST-中的-Snapshop-快照测试"><a href="#JEST-中的-Snapshop-快照测试" class="headerlink" title="JEST 中的 Snapshop 快照测试"></a>JEST 中的 Snapshop 快照测试</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">generateConfig</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">server</span>: <span class="string">&#x27;http://localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">post</span>: <span class="number">8080</span>,</span><br><span class="line">    <span class="attr">domain</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//.test.js 文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; generateConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;./demo&#x27;</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试 generateConfig&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">generateConfig</span>()).<span class="title function_">toMatchSnapshot</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 会生成对应的快照文件</span></span><br></pre></td></tr></table></figure>

<p><strong>当配置文件是变化的情况下：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">generateConfig</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">server</span>: <span class="string">&#x27;http://localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">post</span>: <span class="number">8080</span>,</span><br><span class="line">    <span class="attr">domain</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">generateConfig1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">server</span>: <span class="string">&#x27;http://localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">post</span>: <span class="number">8086</span>,</span><br><span class="line">    <span class="attr">domain</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// .test.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; generateConfig, generateConfig1 &#125; <span class="keyword">from</span> <span class="string">&#x27;./demo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试 generateConfig&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">generateConfig</span>()).<span class="title function_">toMatchSnapshot</span>(&#123;</span><br><span class="line">    <span class="attr">time</span>: expect.<span class="title function_">any</span>(<span class="title class_">Date</span>),</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试 generateConfig1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">generateConfig1</span>()).<span class="title function_">toMatchSnapshot</span>(&#123;</span><br><span class="line">    <span class="attr">time</span>: expect.<span class="title function_">any</span>(<span class="title class_">Date</span>),</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>行内快照 toMatchInlineSnapshot</strong></p>
<p>安装模块 <code>npm install prettier@1.18.2 --save</code></p>
<p>栗如下：放在到测试用例下面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试 generateConfig1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">generateConfig1</span>()).<span class="title function_">toMatchInlineSnapshot</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">time</span>: expect.<span class="title function_">any</span>(<span class="title class_">Date</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">`  // 行内快照 放到了测试用例下面</span></span><br><span class="line"><span class="string">    Object &#123;</span></span><br><span class="line"><span class="string">      &quot;domain&quot;: &quot;localhost&quot;,</span></span><br><span class="line"><span class="string">      &quot;post&quot;: 8086,</span></span><br><span class="line"><span class="string">      &quot;server&quot;: &quot;http://localhost&quot;,</span></span><br><span class="line"><span class="string">      &quot;time&quot;: Any&lt;Date&gt;,</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="ES6-中-类的测试-（单元测试）"><a href="#ES6-中-类的测试-（单元测试）" class="headerlink" title="ES6 中 类的测试 （单元测试）"></a>ES6 中 类的测试 （单元测试）</h3><p>单元测试就是利用 <code>mock</code> 来提升性能的测试。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// util.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Util</span> &#123;</span><br><span class="line">  <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...很复杂的逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...很复杂的逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Util</span></span><br><span class="line"><span class="comment">// util.test.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Util</span> <span class="keyword">from</span> <span class="string">&#x27;./util&#x27;</span></span><br><span class="line"><span class="keyword">let</span> util = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeAll</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  util = <span class="keyword">new</span> <span class="title class_">Util</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试 a 方法&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// expect(util.a(1, 2)).toBe(&#x27;12&#x27;);</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Util</span> <span class="keyword">from</span> <span class="string">&#x27;./util&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">testFunction</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> util = <span class="keyword">new</span> <span class="title class_">Util</span>();</span><br><span class="line">  util.<span class="title function_">a</span>(a);</span><br><span class="line">  util.<span class="title function_">b</span>(b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> testFunction;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .test.test.js</span></span><br><span class="line">jest.<span class="title function_">mock</span>(<span class="string">&#x27;./util&#x27;</span>);</span><br><span class="line"><span class="comment">// 底层会把 Util下面的a,b会变成 jest.fn.a/b</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Util</span> <span class="keyword">from</span> <span class="string">&#x27;./util&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> testFunction <span class="keyword">from</span> <span class="string">&#x27;./test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试 testFunction&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">testFunction</span>();</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title class_">Util</span>).<span class="title function_">toHaveBeenCalled</span>();</span><br><span class="line">  <span class="comment">// 针对上文的类中的两个方法a/b进行测试</span></span><br><span class="line">  <span class="title function_">expect</span>(<span class="title class_">Util</span>.<span class="property">mock</span>.<span class="property">instances</span>[<span class="number">0</span>].<span class="property">a</span>).<span class="title function_">toHaveBeenCalled</span>();</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title class_">Util</span>.<span class="property">mock</span>.<span class="property">instances</span>[<span class="number">0</span>].<span class="property">b</span>).<span class="title function_">toHaveBeenCalled</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="JEST-中对-DOM-进行测试"><a href="#JEST-中对-DOM-进行测试" class="headerlink" title="JEST 中对 DOM 进行测试"></a>JEST 中对 DOM 进行测试</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .js</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addDivToBody</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  $(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">append</span>(<span class="string">&#x27;&lt;div&gt;&lt;/div&gt;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> addDivToBody</span><br><span class="line"></span><br><span class="line"><span class="comment">//.test.js</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line"><span class="keyword">import</span> addDivToBody <span class="keyword">from</span> <span class="string">&#x27;./demo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;测试 addDivToBody&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">addDivToBody</span>()</span><br><span class="line">  <span class="title function_">expect</span>($(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">length</span>).<span class="title function_">toBe</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Vue-中的-TDD"><a href="#Vue-中的-TDD" class="headerlink" title="Vue 中的 TDD"></a>Vue 中的 TDD</h2><h3 id="Test-Driven-Development-TDD-测试驱动开发"><a href="#Test-Driven-Development-TDD-测试驱动开发" class="headerlink" title="Test Driven Development (TDD) 测试驱动开发"></a>Test Driven Development (TDD) 测试驱动开发</h3><p>TDD 开发流程 （Red-Green） 从红到绿的一种开发模式，因为前期测试代码一片红。</p>
<ol>
<li>编写测试用例</li>
<li>运行测试用例，测试用例无法通过测试</li>
<li>编写代码，使测试用例通过</li>
<li>优化代码，完成开发</li>
<li>重复上述步骤</li>
</ol>
<p><strong>TDD 的优势：</strong></p>
<ul>
<li>长期减少回归 bug (编写代码过程中，测试代码及时提示)。</li>
<li>代码质量更好（组织，可维护性）。</li>
<li>测试覆盖率高。</li>
<li>错误的测试代码不容易出现。</li>
</ul>
<h3 id="Vue-环境中配置-JEST"><a href="#Vue-环境中配置-JEST" class="headerlink" title="Vue 环境中配置 JEST"></a>Vue 环境中配置 JEST</h3><p><code>package.json</code> 中 <code>test:unit</code> 尾部添加 <code>--watch</code>。</p>
<p><code>@vue/test-utils</code> 的配置及使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改 jest.config.js 配置文件如下信息：</span></span><br><span class="line"><span class="attr">testMatch</span>: [</span><br><span class="line">  <span class="string">&#x27;**/tests/unit/**/*.(spec|test).(js|jsx|ts|tsx)|**/__tests__/*.(js|jsx|ts|tsx)&#x27;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<p>用例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浅渲染，只会渲染当前组件，不会影响子组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; shallowMount &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/test-utils&#x27;</span></span><br><span class="line"><span class="comment">// 只对当前组件 HelloWorld 组件进行浅渲染</span></span><br><span class="line"><span class="keyword">const</span> wrapper = <span class="title function_">shallowMount</span>(<span class="title class_">HelloWorld</span>, &#123;</span><br><span class="line">  <span class="attr">propsData</span>: &#123; msg &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// wrapper 的几个方法</span></span><br><span class="line">wrapper.<span class="title function_">text</span>() 可以得到当前组件的文本信息</span><br><span class="line">wrapper.<span class="title function_">props</span>(<span class="string">&#x27;msg&#x27;</span>) 也可以拿到对应的 props 信息</span><br><span class="line">wrapper.<span class="title function_">setProps</span>(&#123;<span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span>&#125;)</span><br><span class="line">wrapper.<span class="title function_">find</span>() 可以查找它的类名等信息</span><br><span class="line">wrapper.<span class="title function_">findAll</span>() 同上 查询多个</span><br><span class="line"><span class="comment">// 使用findAll拿数据要这样拿记得 at()----&gt; expect(countElem.at(0).text()).toEqual(&#x27;0&#x27;)</span></span><br><span class="line"><span class="title function_">expect</span>(wrapper).<span class="title function_">toMatchSnapshot</span>()  快照测试</span><br><span class="line"><span class="comment">// 深渲染，对子组件也会影响</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/test-utils&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="常用的一些-API"><a href="#常用的一些-API" class="headerlink" title="常用的一些 API"></a>常用的一些 API</h3><ul>
<li><code>const input = wrapper.find(&#39;[data-test=&quot;input&quot;]&#39;)</code> 自定义 input 属性 判断节点是否存在。</li>
<li><code>expect(input.exists()).toBe(true)</code> 判断 <code>input</code> 是否存在。</li>
<li><code>wrapper.vm.$data.</code> 方式拿到 <code>vue</code> 里面组件的 <code>data</code> 实例的属性。</li>
<li><code>input.setValue(&#39;&#39;)</code> 设置 <code>input</code> 的属性。</li>
<li><code>input.trigger(&#39;keyup.enter&#39;)</code> 触发一个方法，模拟用户输入回车。</li>
<li><code>expect(wrapper.emitted().add).toBeFalsy()</code> 判断是否有触发这个事件。</li>
<li><code>wrapper.vm.</code>方法名 方式拿到 <code>vue</code> 里面组件的 <code>methods</code> 的方法。</li>
</ul>
<p>实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowMount &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/test-utils&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;../../components/Header&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;Header 包含 input 框&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = <span class="title function_">shallowMount</span>(<span class="title class_">Header</span>)</span><br><span class="line">  <span class="comment">// 通过自定义属性来区分是否有这个标签</span></span><br><span class="line">  <span class="keyword">const</span> input = wrapper.<span class="title function_">find</span>(<span class="string">&#x27;[data-test=&quot;input&quot;]&#x27;</span>)</span><br><span class="line">  <span class="comment">// input 是否存在 API 在 vue-test-utils</span></span><br><span class="line">  <span class="title function_">expect</span>(input.<span class="title function_">exists</span>()).<span class="title function_">toBe</span>(<span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;Header 中 input 框初始内容为空&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = <span class="title function_">shallowMount</span>(<span class="title class_">Header</span>)</span><br><span class="line">  <span class="comment">// 找到这个 new 的实例</span></span><br><span class="line">  <span class="comment">// 通过 wrapper.vn.$data 拿到 VUE 实例里面 data 的属性</span></span><br><span class="line">  <span class="keyword">const</span> inputValue = wrapper.<span class="property">vm</span>.<span class="property">$data</span>.<span class="property">inputValue</span></span><br><span class="line">  <span class="title function_">expect</span>(inputValue).<span class="title function_">toBe</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;Header 中 input 框输入回车 无内容时，无反应&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = <span class="title function_">shallowMount</span>(<span class="title class_">Header</span>)</span><br><span class="line">  <span class="keyword">const</span> input = wrapper.<span class="title function_">find</span>(<span class="string">&#x27;[data-test=&quot;input&quot;]&#x27;</span>)</span><br><span class="line">  <span class="comment">// 设置 input 的属性</span></span><br><span class="line">  input.<span class="title function_">setValue</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="comment">// 触发一个方法 模拟用户输入回车</span></span><br><span class="line">  input.<span class="title function_">trigger</span>(<span class="string">&#x27;keyup.enter&#x27;</span>)</span><br><span class="line">  <span class="title function_">expect</span>(wrapper.<span class="title function_">emitted</span>().<span class="property">add</span>).<span class="title function_">toBeFalsy</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;Header 中 input 框输入回车 有内容时，向外触发事件&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = <span class="title function_">shallowMount</span>(<span class="title class_">Header</span>)</span><br><span class="line">  <span class="keyword">const</span> input = wrapper.<span class="title function_">find</span>(<span class="string">&#x27;[data-test=&quot;input&quot;]&#x27;</span>)</span><br><span class="line">  input.<span class="title function_">setValue</span>(<span class="string">&#x27;dell lee&#x27;</span>)</span><br><span class="line">  <span class="comment">// 触发一个方法 模拟用户输入回车</span></span><br><span class="line">  input.<span class="title function_">trigger</span>(<span class="string">&#x27;keyup.enter&#x27;</span>)</span><br><span class="line">  <span class="title function_">expect</span>(wrapper.<span class="title function_">emitted</span>().<span class="property">add</span>).<span class="title function_">toBeTruthy</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;Header 中 input 框输入回车 有内容时，向外触发事件 同时清空 inputValue&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = <span class="title function_">shallowMount</span>(<span class="title class_">Header</span>)</span><br><span class="line">  <span class="keyword">const</span> input = wrapper.<span class="title function_">find</span>(<span class="string">&#x27;[data-test=&quot;input&quot;]&#x27;</span>)</span><br><span class="line">  input.<span class="title function_">setValue</span>(<span class="string">&#x27;dell lee&#x27;</span>)</span><br><span class="line">  <span class="comment">// 触发一个方法 模拟用户输入回车</span></span><br><span class="line">  input.<span class="title function_">trigger</span>(<span class="string">&#x27;keyup.enter&#x27;</span>)</span><br><span class="line">  <span class="title function_">expect</span>(wrapper.<span class="property">vm</span>.<span class="property">$data</span>.<span class="property">inputValue</span>).<span class="title function_">toBe</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>npm run lint --fix</code> 会自动把不规范的代码 按照 <code>lint</code> 自动规范化代码。</p>
]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>VS Code 插件开发指北 (一)</title>
    <url>/vscode_extension/</url>
    <content><![CDATA[<p>最近闲来无事，给公司框架做了开发代码片段提示和一些常用工具整合的插，在这里记录一下踩过的坑和一些常用的基本功能示例。</p>
<span id="more"></span>
<h2 id="插件能做什么"><a href="#插件能做什么" class="headerlink" title="插件能做什么"></a>插件能做什么</h2><p>因为 VS Code 是基于 Electron 的，所以一般 node 能做的一般基本上都是可以是现实。如果你想对 VS Code 做些个性化的配置，你可以开发自定义主题、图标主题、欢迎页面、自定义左侧的面板（例如资源管理器栏那种）等。你还可以自己定义命令、快捷键、自动补全、菜单等来提升你的开发效率。甚至你可以对现有语言做扩展或者定义新的语言的支持。</p>
<h2 id="创建插件项目"><a href="#创建插件项目" class="headerlink" title="创建插件项目"></a>创建插件项目</h2><p>首先安装官方的脚手架</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装脚手架</span></span><br><span class="line">npm install -g yo generator-code</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建项目</span></span><br><span class="line">yo code </span><br><span class="line"><span class="comment">// 会一路提示你 输入插件名 插件id 等等。根据需要填写</span></span><br></pre></td></tr></table></figure>
<p>微软提供了两种方式去开发，一种是 JavaScript 和 TypeScript 去开发，可以根据自己的习惯选择。创建好后按 F5 会打开调试用的 VS Code 窗口来调试插件</p>
<p>使用 JavaScript 生成的项目结构，<br>├── .vscode<br>│   ├── launch.json     // 插件加载和调试的配置<br>│   └── tasks.json      // 配置TypeScript编译任务<br>├── .gitignore          // 忽略构建输出和node_modules文件<br>├── README.md           // 插件文档<br>├── CHANGELOG.md        // 插件更新日志<br>├── extension.ts        // 插件源代码<br>├── package.json        // 插件配置清单<br>├── jsconfig.json       // </p>
<p>先看下入口文件，入口文件需要导出两个函数 activate 和 deactivate</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//extension.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插件激活调用，也是插件的入口</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">activate</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Congratulations, your extension &quot;vscode-demo&quot; is now active!&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册一个命令</span></span><br><span class="line">    <span class="keyword">let</span> disposable = vscode.<span class="property">commands</span>.<span class="title function_">registerCommand</span>(<span class="string">&#x27;vscode-demo.helloWorld&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//命令触发是调用</span></span><br><span class="line">        vscode.<span class="property">window</span>.<span class="title function_">showInformationMessage</span>(<span class="string">&#x27;Hello World from vscode-demo!&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    context.<span class="property">subscriptions</span>.<span class="title function_">push</span>(disposable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插件销毁调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deactivate</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    activate,</span><br><span class="line">    deactivate</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个初始化插件项目，默认就是注册了个 hello world 命令，然后运行命令显示 hello world 的通知，按F5运行项目，在命令面板输入 hello world，可以看到右下角弹出通知<br><img src="/images/posts/vscode_extension/20210615205632.png" alt="项目结构" loading="lazy"><br><img src="/images/posts/vscode_extension/20210615205655.png" alt="项目结构" loading="lazy"></p>
<h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><p>vscode 插件的 package.json 是 npm 的一个超集，插件的图标、命令注册、菜单配置、语言注册、主题注册、代码片段等一系列的都需要在这个文件里配置。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode-demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode-demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;publisher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">//发布者id，后面会讲怎么发布到插件市场</span></span><br><span class="line">    <span class="attr">&quot;engines&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//vscode 最低版本</span></span><br><span class="line">        <span class="attr">&quot;vscode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.57.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">//插件市场的分类 可以设置成语言主题等其他类型</span></span><br><span class="line">        <span class="string">&quot;Other&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;activationEvents&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">//扩展的激活事件</span></span><br><span class="line">        <span class="string">&quot;onCommand:vscode-demo.helloWorld&quot;</span><span class="punctuation">,</span> <span class="comment">//调用命令时激活</span></span><br><span class="line">        <span class="string">&quot;onLanguage:python&quot;</span><span class="punctuation">,</span> <span class="comment">//py时激活插件</span></span><br><span class="line">        <span class="string">&quot;workspaceContains:**/.editorconfig&quot;</span><span class="punctuation">,</span><span class="comment">// 文件夹打开时激活</span></span><br><span class="line">        <span class="string">&quot;onDebug&quot;</span><span class="punctuation">,</span><span class="comment">//调试前激活</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="string">&quot;*&quot;</span> <span class="comment">//启动时候激活，使用这个不需要设置其他的</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./extension.js&quot;</span><span class="punctuation">,</span> <span class="comment">//指定插件入口文件</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="comment">//插件图标</span></span><br><span class="line">    <span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//大部分的配置都要在这里配置</span></span><br><span class="line">        <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//配置命令,如果需要暴露给用户使用的需要在这里配置</span></span><br><span class="line">        <span class="attr">&quot;menus&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//配置菜单</span></span><br><span class="line">        <span class="attr">&quot;submenus&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//配置子菜单会用到</span></span><br><span class="line">        <span class="attr">&quot;languages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//配置语言</span></span><br><span class="line">        <span class="attr">&quot;grammars&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//为语言配置TextMate语法</span></span><br><span class="line">        <span class="attr">&quot;keybindings&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//配置快捷键</span></span><br><span class="line">        <span class="attr">&quot;snippets&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//配置代码片段</span></span><br><span class="line">        <span class="attr">&quot;themes&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//配置主题</span></span><br><span class="line">        <span class="attr">&quot;views&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//配置活动栏视图</span></span><br><span class="line">        <span class="attr">&quot;viewsWelcome&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//配置左侧视图欢迎页</span></span><br><span class="line">        <span class="attr">&quot;viewsContainers&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//配置视图容器</span></span><br><span class="line">        <span class="attr">&quot;configuration&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span>  <span class="comment">//配置插件配置</span></span><br><span class="line">        <span class="attr">&quot;configurationDefaults&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">//配置插件默认配置</span></span><br><span class="line">        <span class="attr">&quot;colors&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;problemMatchers&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;taskDefinitions&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;typescriptServerPlugins&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="命令示例"><a href="#命令示例" class="headerlink" title="命令示例"></a>命令示例</h2><p>一般提供给被人使用的功能都是通过命令注册，在命令的回调函数里处理相关功能逻辑，然后就可以在 VS Code 的命令面板调用相关命令。你也可以注册快捷键、菜单等和命令绑定在一起来触发命令。VS Code 内部含有大量和编辑器交互、控制UI、后台操作的内置命令给我们使用。</p>
<h3 id="注册命令"><a href="#注册命令" class="headerlink" title="注册命令"></a>注册命令</h3><p>vscode 在 commands 下提供了 <strong>registerCommand</strong> 和 <strong>registerTextEditorCommand</strong>用来注册命令，registerTextEditorCommand 注册的命令只会在编辑器激活的时候才调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在activate函数注册命令</span></span><br><span class="line"></span><br><span class="line">context.<span class="property">subscriptions</span>.<span class="title function_">push</span>(</span><br><span class="line">    <span class="comment">// 第一个参数为命令ID,第二次参数命令回调函数</span></span><br><span class="line">    vscode.<span class="property">commands</span>.<span class="title function_">registerCommand</span>(<span class="string">&#x27;vscode-demo.currentText&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 获取当前激活的编辑器</span></span><br><span class="line">        <span class="keyword">let</span> currentEditor = vscode.<span class="property">window</span>.<span class="property">activeTextEditor</span>; </span><br><span class="line">        <span class="comment">// 获取编辑器选择的内容</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(currentEditor.<span class="property">document</span>.<span class="title function_">getText</span>(currentEditor.<span class="property">selection</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>命令注册后默认是不会对外提供的，如果需要提供给用户使用还需要在 <strong>package.json</strong> 的 <strong>contributes.commands</strong> 添加相应配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode-demo.currentText&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取选择文本&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>按住 F5 运行插件，在命令面板输入 <em>获取选择文本</em> ，会发现报错了。是因为 <strong>activationEvents</strong> 配置里只配置了 “onCommand:vscode-demo.helloWorld” 才会激活插件，我们需要把新加的命令也加入进去，或者改为 *</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    activationEvents<span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;*&quot;</span> <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><p>在 commands 提供了 <strong>executeCommand</strong> API用来调用命令，可以使用它调用我们插件里的命令，也可以调用 VS Code 内置的命令。<br>使用示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用</span></span><br><span class="line">vscode.<span class="property">commands</span>.<span class="title function_">executeCommand</span>(<span class="string">&#x27;vscode-demo.helloWorld&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="菜单示例"><a href="#菜单示例" class="headerlink" title="菜单示例"></a>菜单示例</h2><p>package.json 中的 <strong>contributes.menus</strong> 用来的配置菜单项，下面这些编辑器可以配置菜单的地方。</p>
<ul>
<li>全局命令面板 - commandPalette</li>
<li>资源管理器上下文菜单 - explorer/context</li>
<li>编辑器上下文菜单 - editor/context</li>
<li>编辑器标题栏 - editor/title</li>
<li>编辑器标题上下文菜单 - editor/title/context</li>
<li>调试栈视图的上下文菜单 - debug/callstack/context</li>
<li>视图的标题菜单 - view/title</li>
<li>视图项的菜单 - view/item/context</li>
<li>SCM 标题菜单 - scm/title</li>
<li>SCM 资源组 - scm/resourceGroup/context</li>
<li>SCM 资源 - scm/resource/context</li>
<li>SCM 改变标题 - scm/change/title</li>
</ul>
<p>配置菜单需要提供，选中菜单时执行的命令和菜单出现的条件。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;命令&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;when&quot;</span><span class="punctuation">:</span> <span class="string">&quot;条件&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;可选命令&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;菜单分组&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;submenu&quot;</span><span class="punctuation">:</span> <span class="string">&quot;配置二级菜单&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;图标&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="控制命令面板的命令"><a href="#控制命令面板的命令" class="headerlink" title="控制命令面板的命令"></a>控制命令面板的命令</h3><p>默认情况下注册的命令都会显示在命令面板中，有时候需要更具条件显示，就可以在 <strong>commandPalette</strong> 配置指定命令然后通过 <strong>when</strong> 控制。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode-demo.currentText&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取选择文本&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;menus&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;commandPalette&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode-demo.currentText&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获取选择文本&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;when&quot;</span><span class="punctuation">:</span> <span class="string">&quot;editorHasSelection&quot;</span> <span class="comment">// 只有选择文本才显示</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="when-条件"><a href="#when-条件" class="headerlink" title="when 条件"></a>when 条件</h3><p>when 提供的逻辑操作符有 ==、!=、||、&amp;&amp;、!、=~(正则)、&gt;、&gt;=、&lt;、&lt;=、in 等操作符，和js的类似，多了一个 <strong>=~</strong> 符匹配正则。VS Code 还提供了很多上下文可以和这些操作符组合使用。<a href="https://code.visualstudio.com/api/references/when-clause-contexts">查看上下文详情</a><br>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;when&quot;:&quot;resourceExtname != .js&quot; //不是js文件时</span><br><span class="line">&quot;when&quot;:&quot;editorHasSelection&quot; //选择文本才显示</span><br><span class="line">&quot;when&quot;:&quot;!editorHasSelection&quot; //不选择文本才显示</span><br></pre></td></tr></table></figure>


<h3 id="配置多级菜单"><a href="#配置多级菜单" class="headerlink" title="配置多级菜单"></a>配置多级菜单</h3><p>使用 <strong>submenu</strong> 指定父级菜单的ID，<strong>submenus</strong> 配置父级菜单名称等信息。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;menus&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;editor/context&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode-demo.currentText&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;submenu&quot;</span><span class="punctuation">:</span> <span class="string">&quot;first.menu&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;first.menu&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode-demo.currentText&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;submenu&quot;</span><span class="punctuation">:</span> <span class="string">&quot;two.menu&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;two.menu&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode-demo.currentText&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;submenus&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;first.menu&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;一级菜单&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;two.menu&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;二级菜单&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/posts/vscode_extension/20210616211914.png" alt="示例" loading="lazy"></p>
<h3 id="分组排序"><a href="#分组排序" class="headerlink" title="分组排序"></a>分组排序</h3><p>菜单项可以通过组来分类。根据下列默认规则，然后按照字母排序，</p>
<ul>
<li>编辑器上下文菜单(editor/context)默认有这些分组：<ul>
<li>navigation - navigation组始终在最上方。</li>
<li>1_modification - 紧接上一个组，这个组包含可以修改你代码的命令。</li>
<li>9_cutcopypaste - 然后是基础编辑命令。</li>
<li>z_commands - 最后一个分组则是命令面板入口。</li>
</ul>
</li>
<li>资源管理器上下文菜单(explorer/context)默认有下列分组：<ul>
<li>navigation - 在VS Code 中导航的相关命令。navigation 组始终在最上方。</li>
<li>2_workspace - 和工作区操作相关的命令。</li>
<li>3_compare - 比较文件和diff相关的命令。</li>
<li>4_search - 在搜索视图中和搜索相关的命令。</li>
<li>5_cutcopypaste - 和剪切、复制、粘贴文件相关的命令。</li>
<li>7_modification - 修改文件的相关命令。</li>
</ul>
</li>
<li>编辑器标签菜单默认有下列分组<ul>
<li>1_close - 和关闭编辑器相关的命令。</li>
<li>3_preview - 和固定编辑器相关的命令。</li>
</ul>
</li>
<li>编辑器标题栏(editor/title)的默认分组<ul>
<li>1_diff - 与使用差异编辑器相关的命令。</li>
<li>3_open - 与打开编辑器相关的命令。</li>
<li>5_close - 与关闭编辑器相关的命令。</li>
</ul>
</li>
</ul>
<p>组内的菜单顺序取决于标题或者序号属性。菜单的组内顺序由@<number>加到 group 值的后面得以确定：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;editor/title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;when&quot;</span><span class="punctuation">:</span> <span class="string">&quot;editorHasSelection&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;extension.Command&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myGroup@1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<h2 id="注册快捷键"><a href="#注册快捷键" class="headerlink" title="注册快捷键"></a>注册快捷键</h2><p>快捷键还是比较简单的，Windows 和Linux 是 key 指定，macOS 使用 mac 指定的快捷键。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;keybindings&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode-demo.currentText&quot;</span><span class="punctuation">,</span> <span class="comment">//快捷键绑定命令</span></span><br><span class="line">        <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctrl+f1&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;mac&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cmd+f1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;when&quot;</span><span class="punctuation">:</span> <span class="string">&quot;editorHasSelection&quot;</span> <span class="comment">// 出现时机</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>设置好后，使用了对应命令的菜单项也会显示对应快捷键，如图所示<br><img src="/images/posts/vscode_extension/20210616230737.png" alt="示例" loading="lazy"></p>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>VS Code 插件开发指北 (二)</title>
    <url>/vscode_extension_two/</url>
    <content><![CDATA[<p>接着上面的继续介绍一些常用的 VS Code 插件的配置和 API。</p>
<span id="more"></span>
<h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><p>在 package.json 增加 snippets 配置。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;snippets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定支持的语言</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./snippets/demo.json&quot;</span> <span class="comment">// 文件路径</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<p>在 snippets 文件夹下创建 demo.json 文件，代码格式如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;片段名称&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;代码片段触发前缀&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;片段内容&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;代码片段描述&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;selectCheckBox&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;select-check-box&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;&lt;select-check-box v-model=&#x27;$&#123;1:search.statusList&#125;&#x27;  :sourceOpt=&#x27;$&#123;2:statusOpt&#125;&#x27; @change=&#x27;$&#123;3:getList(1)&#125;&#x27; title=&#x27;$&#123;4:状态&#125;&#x27;&gt;&lt;/select-check-box&gt;&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;多选下拉框&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>片段中的 ${1:xxx} 是占位符，数字表示光标聚焦的顺序，1表示默认光标落在这里，按下回车或者tab跳到2的位置，以此类推，xxx 表示此位置的默认值，可省略，比如直接写$3。一个片段里可以设置多个相同的占位符，来同时修改多出占位处。片段中也是支持使用 VS Code 内置的很多变量的，比如可以根据获取当前选择的值(${TM_SELECTED_TEXT}) 填充到代码片段中。</p>
<p>占位符几种使用</p>
<ul>
<li>$1 只显示光标</li>
<li>${1:xxxx} 默认使用 xxx 填充</li>
<li>${1|a,b,c|} 当光标在此处时 提供 a,b,c 三个选择给选择</li>
<li>${1:${TM_SELECTED_TEXT}} 使用内置的变量占位</li>
</ul>
<p>常用用的变量，<a href="https://code.visualstudio.com/docs/editor/variables-reference#_environment-variables">查看更多变量</a></p>
<ul>
<li>TM_SELECTED_TEXT当前选定的文本或空字符串</li>
<li>TM_CURRENT_LINE当前行的内容</li>
<li>TM_CURRENT_WORD光标下的单词或空字符串的内容</li>
<li>TM_LINE_INDEX基于零索引的行号</li>
<li>TM_LINE_NUMBER基于单索引的行号</li>
<li>TM_FILENAME当前文档的文件名</li>
<li>TM_FILENAME_BASE没有扩展名的当前文档的文件名</li>
<li>TM_DIRECTORY当前文档的目录</li>
<li>TM_FILEPATH当前文档的完整文件路径</li>
<li>CLIPBOARD剪贴板的内容</li>
<li>CURRENT_YEAR当前年份</li>
<li>CURRENT_YEAR_SHORT当前年份的最后两位数字</li>
<li>CURRENT_MONTH两个数字的月份（例如’02’）</li>
<li>CURRENT_MONTH_NAME月份的全名（例如“七月”）</li>
<li>CURRENT_MONTH_NAME_SHORT月份的简称（例如’Jul’）</li>
<li>CURRENT_DATE每月的某一天</li>
<li>CURRENT_DAY_NAME天的名称（例如’星期一’）</li>
<li>CURRENT_DAY_NAME_SHORT当天的简称（例如’Mon’）</li>
<li>CURRENT_HOUR 24小时制格式的当前小时</li>
<li>CURRENT_MINUTE当前分钟</li>
<li>CURRENT_SECOND当前秒</li>
</ul>
<h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>在 configuration 中配置的内容会暴露给用户，用户可以从“用户设置”和“工作区设置”中修改你暴露的选项。configuration 是 JSON 格式的键值对，用户会在修改设置时获得对应的提示和更好的体验。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;configuration&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;显示在配置页左侧标题&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;demo.showtick&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;配置demo&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>在插件内获取和修改当前插件配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果当前配置没有值 默认返回 undefined</span></span><br><span class="line"><span class="keyword">const</span> result = vscode.<span class="property">workspace</span>.<span class="title function_">getConfiguration</span>().<span class="title function_">get</span>(<span class="string">&#x27;demo.showtick&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改配置 第三个参数如果传true 则修改全局配置，false只修改当前工作区配置</span></span><br><span class="line">vscode.<span class="property">workspace</span>.<span class="title function_">getConfiguration</span>().<span class="title function_">update</span>(<span class="string">&#x27;demo.showtick&#x27;</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<h2 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h2><p>如果只是自己使用可以直接打包本地安装，发布到插件市场感觉创建发布前期还是有点繁琐的。</p>
<h3 id="本地打包"><a href="#本地打包" class="headerlink" title="本地打包"></a>本地打包</h3><p><strong>vsce</strong> 是一个用于将插件发布到市场上的命令行工具。不论是本地打包还是要发布到插件市场都需要使用这个工具</p>
<p>首先安装vsce</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g vsce</span><br></pre></td></tr></table></figure>
<p>打包成vsix包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vsce package</span><br></pre></td></tr></table></figure>
<h3 id="发出插件市场"><a href="#发出插件市场" class="headerlink" title="发出插件市场"></a>发出插件市场</h3><p>发布到插件市场有两种方式，一种是在 VS Code 插件市场直接发布 vsix 包，另一种是直接使用 vsce 发布</p>
<h4 id="在插件市场发布"><a href="#在插件市场发布" class="headerlink" title="在插件市场发布"></a>在插件市场发布</h4><p>首先在 <a href="https://marketplace.visualstudio.com/VSCode">插件市场</a> 登录你的账号，可以使用 github 账户或者 Microsoft账户登录<br><img src="/images/posts/vscode_extension_two/20210623231124.png" alt="" loading="lazy"><br>创建发布者（这里需要翻墙），这里发布者 ID 需要和插件 package.json 的 publisher 保持一致。<br><img src="/images/posts/vscode_extension_two/20210623230340.png" alt="" loading="lazy"><br><img src="/images/posts/vscode_extension_two/20210623230642.png" alt="" loading="lazy"><br>上传vsix包文件<br><img src="/images/posts/vscode_extension_two/20210623231651.png" alt="" loading="lazy"></p>
<h4 id="使用vsce发布"><a href="#使用vsce发布" class="headerlink" title="使用vsce发布"></a>使用vsce发布</h4><p>使用 vsce 发布首先需要 一个微软 <strong>Azure</strong> 账户，然后创建一个 <strong>Azure DevOps</strong>，然后在组织里创建发布 Token，然后就能使用 vsce 发布插件。</p>
<p>首先打开  <a href="https://dev.azure.com">azure</a> ，直接使用微软账户登录创建一个组织。按照步骤默认会创建一个以邮箱前缀为名的组织。<br>创建完后<br><img src="/images/posts/vscode_extension_two/20210623232915.png" alt="" loading="lazy"><br>创建 tonken,然后将生成tonken保存下来<br><img src="/images/posts/vscode_extension_two/20210623233248.png" alt="" loading="lazy"><br>然后需要创建一个 publisher， 以前可以 vsce 直接创建 ，新的不在支持了，只能通过在上一种方式在网页创建了。<br>创建好后就可以在使用 vsce publish 命令发布插件，这个时候会提示需要 tonken，将刚刚生成复制上去。可以看到插件已经发布上去了。<br><img src="/images/posts/vscode_extension_two/20210623234418.png" alt="" loading="lazy"></p>
<h3 id="发布注意事项"><a href="#发布注意事项" class="headerlink" title="发布注意事项"></a>发布注意事项</h3><ul>
<li>README.md 文件默认会显示在插件主页，且里面连接需要是 https 的</li>
<li>CHANGELOG.md 会显示在变更选项卡</li>
</ul>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 使用中的小技巧 （一）</title>
    <url>/vue_use1/</url>
    <content><![CDATA[<p>在 vue 的使用过程中会遇到各种场景，当普通使用时觉得没什么，但是或许优化一下可以更高效更优美的进行开发。下面有一些我在日常开发的时候用到的小技巧</p>
<span id="more"></span>

<h2 id="data-和-Object-freeze"><a href="#data-和-Object-freeze" class="headerlink" title="data 和 Object.freeze"></a>data 和 Object.freeze</h2><p>每个 Vue 实例都会代理其 data 对象里所有的属性，这些被代理的数据是响应式的，在其数据改变时视图也会随之更新。<br>在每个 vue 组件中都有一个 data 对象，不要把所有数据都放在 data 中。只把需要做响应式的数据放在 data 对象中；原因是：如果一个数据存在于 data 中，数据会被劫持，vue 会给数据添加一个 getter（获取数据），一个 setter（设置数据），性能不会高。<br>可以把一些不需要响应的数据直接放到实例上，而不是在 data 里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 不需要做响应的数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span>=[...]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">list2</span>:[...]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Object.freeze() 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。freeze() 返回和传入的参数相同的对象</p>
</blockquote>
<p>对于一些不需要响应列表数据，也可以用 Object.freeze() 处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> &#123; </span><br><span class="line">        <span class="attr">list</span>: []</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br><span class="line">created () &#123;</span><br><span class="line">    <span class="keyword">let</span> listData = <span class="title class_">Object</span>.<span class="title function_">freeze</span>([</span><br><span class="line">            &#123; <span class="attr">value</span>: <span class="number">1</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">value</span>: <span class="number">2</span> &#125;</span><br><span class="line">        ])</span><br><span class="line">    <span class="comment">// 冻结 listData </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span> = listData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 界面不会有响应</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span>[<span class="number">0</span>].<span class="property">value</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面两种做法，界面都会响应，只是冻结 listData 没有冻结 this.list</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span> = [</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">100</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">200</span> &#125;</span><br><span class="line">    ];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span> = <span class="title class_">Object</span>.<span class="title function_">freeze</span>([</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">100</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">value</span>: <span class="number">200</span> &#125;</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="优雅处理事件监听和移除"><a href="#优雅处理事件监听和移除" class="headerlink" title="优雅处理事件监听和移除"></a>优雅处理事件监听和移除</h2><p>有时候我们会遇到这样的场景,需要自己去监听一些事件什么的，可能会像下面这个写，但是有时候可能因为 mounted 和 destroyed 不再一个位置啥的，导致忘记清除对事件监听。可以利用 hook 去监听钩子事件将它们写在一起</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="variable language_">this</span>.<span class="property">func</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="variable language_">this</span>.<span class="property">func</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更改后</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="variable language_">this</span>.<span class="property">func</span>)</span><br><span class="line">    <span class="variable language_">this</span>.$once(<span class="string">&quot;hook:beforeDestroy&quot;</span>, <span class="function">()=&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="variable language_">this</span>.<span class="property">func</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="sync-修饰符"><a href="#sync-修饰符" class="headerlink" title=".sync 修饰符"></a>.sync 修饰符</h2><p>在有些情况下，我们可能需要对一个 <strong>prop</strong> 进行“双向绑定”。 不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以修改父组件，且在父组件和子组件都没有明显的改动来源。这也是为什么我们推荐以 <strong>update:myPropName</strong> 的模式触发事件取而代之。举个例子，在一个包含 <strong>show</strong> prop 的假设的组件中，我们可以用以下方法表达对其赋新值的意图：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;update:show&#x27;</span>, newShow)</span><br></pre></td></tr></table></figure>
<p>父组件可以监听那个事件并根据需要更新一个本地的数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;dialog  v-<span class="attr">bind</span>:title=<span class="string">&quot;show&quot;</span>  v-<span class="attr">on</span>:<span class="attr">update</span>:show=<span class="string">&quot;show = $event&quot;</span>&gt;&lt;/dialog&gt;</span><br></pre></td></tr></table></figure>
<p>使用 .sync 简写 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;dialog :title.<span class="property">sync</span>=<span class="string">&quot;doc.title&quot;</span>&gt;&lt;/dialog&gt;</span><br></pre></td></tr></table></figure>

<h2 id="属性事件传递"><a href="#属性事件传递" class="headerlink" title="属性事件传递"></a>属性事件传递</h2><p>有时候需要对一些组件进行更高层次封装，例如有一个普通表格组件，需要实现能有行内编辑等一些功能时候，就需要对表格进行二次封装。像表格组件属性较多时，需要一个个去传递，非常不友好并且费时</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">BaseTable</span> <span class="attr">v-bind</span>=<span class="string">&quot;$props&quot;</span> <span class="attr">v-on</span>=<span class="string">&quot;$listeners&quot;</span>&gt;</span> <span class="comment">&lt;!-- ... --&gt;</span> <span class="tag">&lt;/<span class="name">BaseTable</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> <span class="title class_">BaseTable</span> <span class="keyword">from</span> <span class="string">&quot;./BaseTable&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">BaseTable</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>可以看到传递属性和事件的方便性，而不用一个个去传递,还有$attrs（props、class、style 除外的其他 attribute ）可以使用</p>
<h2 id="Watch的初始立即执行"><a href="#Watch的初始立即执行" class="headerlink" title="Watch的初始立即执行"></a>Watch的初始立即执行</h2><p>当 watch 一个变量的时候，初始化时并不会执行，如下面的例子，你需要在 created 的时候手动调用一次。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">search</span>();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="title function_">searchText</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">search</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这样的做法可以使用，但很麻烦，我们可以添加 immediate 属性，这样初始化的时候就会自动触发(不用再写 created 去调用了)，然后上面的代码就能简化为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="attr">searchText</span>: &#123;</span><br><span class="line">    <span class="title function_">handler</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">search</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 中的 mixin,component,render,hoc</title>
    <url>/vue_hoc/</url>
    <content><![CDATA[<p>在项目中，一般我们经常会基于一套现有组件库进行快速开发，但是现实中往往需要对组件库进行定制化改造二次封装</p>
<span id="more"></span>

<h2 id="混入-mixin"><a href="#混入-mixin" class="headerlink" title="混入(mixin)"></a>混入(mixin)</h2><p>vue 官方介绍</p>
<blockquote>
<p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p>
</blockquote>
<p>简单来说就是将组件的对象的属性，方法，钩子函数等等进行提取封装，以便达到可以多出复用。来看一个简单例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:v-loading</span>=<span class="string">&#x27;isLoading&#x27;</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>  <span class="attr">ref</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;selection&quot;</span> <span class="attr">width</span>=<span class="string">&quot;55&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;规则名称&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;description&quot;</span> <span class="attr">label</span>=<span class="string">&quot;描述&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;count&quot;</span> <span class="attr">label</span>=<span class="string">&quot;服务调用次数(万)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;state&quot;</span> <span class="attr">label</span>=<span class="string">&quot;状态&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123;row&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;run-state&#x27;,row.state]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    &#123;&#123; row.state==&#x27;close&#x27;?&#x27;关闭&#x27;:&#x27;运行中&#x27; &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;time&quot;</span> <span class="attr">label</span>=<span class="string">&quot;上次调度时间&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-divider</span> <span class="attr">direction</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-divider</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>订阅警报<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-pagination</span> <span class="attr">:current-page.sync</span>=<span class="string">&quot;page.pageIndex&quot;</span> <span class="attr">:page-sizes</span>=<span class="string">&quot;[20, 30, 40, 50]&quot;</span> @<span class="attr">size-change</span>=<span class="string">&quot;(e)=&gt;page.pageSize=e&quot;</span> <span class="attr">:total</span>=<span class="string">&quot;total&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    data () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tableData</span>:[],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isLoading</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">total</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">page</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">pageSize</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">pageIndex</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;page&#x27;</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">deep</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">immediate</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">getList</span>()</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">getList</span>(<span class="params">pageIndex = <span class="variable language_">this</span>.page.pageIndex,pageSize = <span class="variable language_">this</span>.page.pageSize</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取列表数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">isLoading</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">tableData</span> = <span class="title class_">MockData</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">total</span>=<span class="number">300</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isLoading</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面是个常见报表分页使用场景，假如有很多个表报，那就需要写很多次分页的逻辑，正常开发中当然不可能这么处理的，这种情况就可以使用 mixins 来提取分页的逻辑。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mixins.js</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">isLoading</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">total</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">page</span>: &#123;</span><br><span class="line">                <span class="attr">pageSize</span>: <span class="number">20</span>,</span><br><span class="line">                <span class="attr">pageIndex</span>: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watch</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;page&#x27;</span>:&#123;</span><br><span class="line">            <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="title function_">handler</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">getList</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:v-loading</span>=<span class="string">&#x27;isLoading&#x27;</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>  <span class="attr">ref</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;selection&quot;</span> <span class="attr">width</span>=<span class="string">&quot;55&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;规则名称&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;description&quot;</span> <span class="attr">label</span>=<span class="string">&quot;描述&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;count&quot;</span> <span class="attr">label</span>=<span class="string">&quot;服务调用次数(万)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;state&quot;</span> <span class="attr">label</span>=<span class="string">&quot;状态&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123;row&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;run-state&#x27;,row.state]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    &#123;&#123; row.state==&#x27;close&#x27;?&#x27;关闭&#x27;:&#x27;运行中&#x27; &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;time&quot;</span> <span class="attr">label</span>=<span class="string">&quot;上次调度时间&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-divider</span> <span class="attr">direction</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-divider</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>订阅警报<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">el-pagination</span> <span class="attr">:current-page.sync</span>=<span class="string">&quot;page.pageIndex&quot;</span> <span class="attr">:page-sizes</span>=<span class="string">&quot;[20, 30, 40, 50]&quot;</span> @<span class="attr">size-change</span>=<span class="string">&quot;(e)=&gt;page.pageSize=e&quot;</span> <span class="attr">:total</span>=<span class="string">&quot;page.total&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">PageMixins</span> <span class="keyword">from</span> <span class="string">&quot;./mixins.js&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">mixins</span>:[<span class="title class_">PageMixins</span>],</span></span><br><span class="line"><span class="language-javascript">    data () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tableData</span>:[]</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">getList</span>(<span class="params">pageIndex = <span class="variable language_">this</span>.page.pageIndex,pageSize = <span class="variable language_">this</span>.page.pageSize</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取列表数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">isLoading</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">tableData</span> = <span class="title class_">MockData</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">total</span>=<span class="number">300</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isLoading</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样就将分页的逻辑分离出来了，也可以被其他组件混入使用，大大的减少了代码量，当然 mixin 过度滥用也是存在缺点的。</p>
<ul>
<li>命名冲突<br>  使用 mixins 是将两个组件对象合并的，当两个组件属性名重复时候，vue 默认会将本地组件的属性覆盖 mixin 的，虽然 vue 提供了合并策略配置，但是同时存在多个 mixin 存在命名冲突时候就会变得处理起来非常麻烦了。</li>
<li>隐含的依赖关系<br>  很明显上面的组件是依赖于 mixin 的，这种情况会存在潜在问题。如果我们以后想重构一个组件，改变了 mixin 需要的变量的名称，就会影响现有的组件的使用了，而且当项目中使用了很多这个 mixin 的时候，就只能去手动搜索修改了，因为不知道哪些组件使用了这些 mixin。</li>
</ul>
<h2 id="组件封装"><a href="#组件封装" class="headerlink" title="组件封装"></a>组件封装</h2><p>上面表格还有中处理方法，就是将 el-table 和 el-pagination 封装成一个组件去是使用，也能提高复用性。</p>
<h3 id="template封装"><a href="#template封装" class="headerlink" title="template封装"></a>template封装</h3><p>使用 template 创建组件，来对 el-table 进行二次封装满足上面需求，增加一个 total 参数<br>提供是一个分页改变事件，再把 m-table 的 $attrs 和 $listeners 绑定到 el-table 上，然后把 el-table 方法暴露出去，这样就可像使用 el-table 一样使用 m-table。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">ref</span>=<span class="string">&quot;table&quot;</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span> <span class="attr">v-on</span>=<span class="string">&quot;$listeners&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-pagination</span> <span class="attr">:current-page.sync</span>=<span class="string">&quot;page.pageIndex&quot;</span> <span class="attr">:page-sizes</span>=<span class="string">&quot;[20, 30, 40, 50]&quot;</span> @<span class="attr">size-change</span>=<span class="string">&quot;(e)=&gt;page.pageSize=e&quot;</span> <span class="attr">:total</span>=<span class="string">&quot;total&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;m-table&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">page</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">pageSize</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">pageIndex</span>: <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">total</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">page</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">deep</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">handler</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$emit(<span class="string">&quot;page-chagne&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将el-table 方法暴露出去</span></span></span><br><span class="line"><span class="language-javascript">        ...(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> methodsJson = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">            [<span class="string">&#x27;reloadData&#x27;</span>, <span class="string">&#x27;clearSelection&#x27;</span>, <span class="string">&#x27;toggleRowSelection&#x27;</span>, <span class="string">&#x27;toggleAllSelection&#x27;</span>, <span class="string">&#x27;setCurrentRow&#x27;</span>, <span class="string">&#x27;clearSort&#x27;</span>, <span class="string">&#x27;clearFilter&#x27;</span>, <span class="string">&#x27;doLayout&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">                .<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    methodsJson = &#123;</span></span><br><span class="line"><span class="language-javascript">                        ...methodsJson, [key](...res) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">$refs</span>[<span class="string">&#x27;table&#x27;</span>][key].<span class="title function_">apply</span>(<span class="variable language_">this</span>, res);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> methodsJson;</span></span><br><span class="line"><span class="language-javascript">        &#125;)()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用 m-table</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">m-table</span> @<span class="attr">page-chagne</span>=<span class="string">&quot;GetTableDataList()&quot;</span> <span class="attr">:total</span>=<span class="string">&quot;page.total&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;selection&quot;</span> <span class="attr">width</span>=<span class="string">&quot;55&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;规则名称&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;description&quot;</span> <span class="attr">label</span>=<span class="string">&quot;描述&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;count&quot;</span> <span class="attr">label</span>=<span class="string">&quot;服务调用次数(万)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;state&quot;</span> <span class="attr">label</span>=<span class="string">&quot;状态&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123;row&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;run-state&#x27;,row.state]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            &#123;&#123; row.state==&#x27;close&#x27;?&#x27;关闭&#x27;:&#x27;运行中&#x27; &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;time&quot;</span> <span class="attr">label</span>=<span class="string">&quot;上次调度时间&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-divider</span> <span class="attr">direction</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-divider</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>订阅警报<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">m-table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>一般情况下这样使用 template 封装就满足了需求，但是总有些时候这样封装是满足不了需求的。比如现在 m-table 现在需要动态支持修改配置显示列，并且不希望修改 m-table 的基本使用方式， 这个时候就需要使用 render 了。</p>
<h3 id="render-函数"><a href="#render-函数" class="headerlink" title="render 函数"></a>render 函数</h3><p>Vue 的模板实际上都会被编译成了渲染函数，render 函数有一个 createElement 参数，用来创建一个 VNode。</p>
<p>要满足上面的需求，首先是的获得 el-table 的插槽(slot)中的内容，根据插槽的内容生成每列信息，根据配置的信息动态创建插槽的内容就可以实现了。简单示例代码入下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> mSetting <span class="keyword">from</span> <span class="string">&#x27;./setting&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123; mSetting &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;m-table&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">showTable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">setShow</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">config</span>: [],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">copySlots</span>: [], <span class="comment">// 展示solt数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">page</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">pageSize</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">pageIndex</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">total</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">page</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">deep</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">handler</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$emit(<span class="string">&quot;page-chagne&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="title function_">initConfig</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">ref</span>=<span class="string">&quot;table&quot;</span> &#123;<span class="attr">...</span>&#123; <span class="attr">attrs:</span> <span class="attr">this.</span>$<span class="attr">attrs</span> &#125;&#125; &#123;<span class="attr">...</span>&#123; <span class="attr">on:</span> <span class="attr">this.</span>$<span class="attr">listeners</span> &#125;&#125;&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        this.copySlots</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                &#123;this.showTable ? (<span class="tag">&lt;<span class="name">el-pagination</span> <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">                    &#123;<span class="attr">...</span>&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">                        <span class="attr">on:</span> &#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">                            &#x27;<span class="attr">size-change</span>&#x27;<span class="attr">:</span> (<span class="attr">e</span>) =&gt;</span> this.page.pageSize = e,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                            &#x27;current-change&#x27;: (e) =&gt; this.page.pageIndex = e</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    &#125;&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    &#123;...&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        attrs: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                            &#x27;current-page&#x27;: this.page.pageIndex,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                            &#x27;page-sizes&#x27;: [20, 30, 40, 50],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                            &#x27;total&#x27;: this.total</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    &#125;&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                &gt; <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span>) : null&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;<span class="name">m-setting</span>  &#123;<span class="attr">...</span>&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">                    <span class="attr">on:</span> &#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="language-javascript">                        &#x27;<span class="attr">update:show</span>&#x27;<span class="attr">:</span> <span class="attr">e</span> =&gt;</span> this.setShow = e,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        &#x27;change&#x27;: this.initConfig</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                &#125;&#125; show=&#123;this.setShow&#125; config=&#123;this.config&#125;&gt;<span class="tag">&lt;/<span class="name">m-setting</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            &lt;/div &gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        )</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        initConfig(config = []) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            if (config.length === 0) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                config = this.$slots.default</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    .filter(item =&gt; item.componentOptions &amp;&amp; item.componentOptions.tag === &quot;el-table-column&quot;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    .map(item =&gt; &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        if (item.componentOptions.propsData.prop === &#x27;index&#x27;) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                            if (!item.data.scopedSlots) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                                item.data.scopedSlots = &#123;&#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                            item.data.scopedSlots.header = () =&gt; (</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-s-tools&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.setShow = true&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                            );</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        return &#123; ...item.componentOptions.propsData &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                this.sourceConfig = JSON.parse(JSON.stringify(config))</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                this.copySlots = this.$slots.default;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                this.sourceSlots = this.$slots.default;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            &#125; else &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                let arr = []</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                this.sourceSlots.forEach(item =&gt; &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    let temp = config.find(subItem =&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        (subItem.prop &amp;&amp; subItem.prop === item.componentOptions.propsData.prop) ||</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        (subItem.type &amp;&amp; subItem.type === item.componentOptions.propsData.type)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    );</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    if (temp &amp;&amp; temp.isShow) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        Object.assign(item.componentOptions.propsData, temp);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        arr.push(item)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                this.copySlots = arr;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                this.showTable = false</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                this.$nextTick(() =&gt; &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    this.showTable = true</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            this.config = config;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        ...(() =&gt; &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            let methodsJson = &#123;&#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            [&#x27;reloadData&#x27;, &#x27;clearSelection&#x27;, &#x27;toggleRowSelection&#x27;, &#x27;toggleAllSelection&#x27;, &#x27;setCurrentRow&#x27;, &#x27;clearSort&#x27;, &#x27;clearFilter&#x27;, &#x27;doLayout&#x27;, &#x27;sort&#x27;]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                .forEach(key =&gt; &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    methodsJson = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        ...methodsJson, [key](...res) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                            this.$refs[&#x27;table&#x27;][key].apply(this, res);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            return methodsJson;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        &#125;)()</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;表格设置&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;shows&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">:before-close</span>=<span class="string">&quot;handleClose&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;list&quot;</span> <span class="attr">size</span>=<span class="string">&#x27;mini&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;showLabel&quot;</span> <span class="attr">label</span>=<span class="string">&quot;名称&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;label&quot;</span> <span class="attr">label</span>=<span class="string">&quot;显示名称&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123;row&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;row.label&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">label</span>=<span class="string">&quot;是否显示&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123;row&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-switch</span> <span class="attr">v-model</span>=<span class="string">&quot;row.isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;shows = false&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleClose()&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;m-setting&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">list</span>: []</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">shows</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">show</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">set</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$emit(<span class="string">&quot;update:show&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">show</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">required</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">config</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">default</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> []</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="title function_">init</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">init</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">list</span> = <span class="variable language_">this</span>.<span class="property">config</span>.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    ...item,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">showLabel</span>: item.<span class="property">showLabel</span> || item.<span class="property">label</span>, <span class="comment">// 名称</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">isShow</span>: item.<span class="property">isShow</span> || <span class="literal">true</span> <span class="comment">// 是否显示</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handleClose</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;change&#x27;</span>, <span class="variable language_">this</span>.<span class="property">list</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">shows</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样就简单实现了可以动态显示列，而且不需要去修改原组件的使用方式了。</p>
<h2 id="hoc-高阶组件"><a href="#hoc-高阶组件" class="headerlink" title="hoc 高阶组件"></a>hoc 高阶组件</h2><p><a href="http://hcysun.me/2018/01/05/%E6%8E%A2%E7%B4%A2Vue%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/">vue高阶组件可以参考这篇</a></p>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Vue3 构建 Web Components</title>
    <url>/vue_web_components/</url>
    <content><![CDATA[<p>有时候想写一个无关框架组件，又不想用原生或者 Jquery 那套去写，而且还要避免样式冲突，用 Web Components 去做刚觉就挺合适的。但是现在 Web Components 使用起来还是不够灵活，很多地方还是不太方便的，如果能和 MVVM 搭配使用就好了。早在之前 Angular 就支持将组件构建成 Web Components，<strong>Vue3 3.2+</strong> 开始终于支持将组建构建成 Web Components 了。正好最近想重构下评论插件，于是上手试了试。</p>
<span id="more"></span>
<h2 id="构建-Web-Components"><a href="#构建-Web-Components" class="headerlink" title="构建 Web Components"></a>构建 Web Components</h2><p>vue 提供了一个 <strong>defineCustomElement</strong> 方法，用来将 vue 组件转换成一个扩展至HTMLElement的自定义函数构造函数，使用方式和 <strong>defineComponent</strong> 参数api基本保持一致。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineCustomElement &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyVueElement</span> = <span class="title function_">defineCustomElement</span>(&#123;</span><br><span class="line">  <span class="comment">// 在此提供正常的 Vue 组件选项</span></span><br><span class="line">  <span class="attr">props</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">emits</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`...`</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// defineCustomElement 独有特性: CSS 会被注入到隐式根 (shadow root) 中</span></span><br><span class="line">  <span class="attr">styles</span>: [<span class="string">`/* inlined css */`</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册 Web Components</span></span><br><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;my-vue-element&#x27;</span>, <span class="title class_">MyVueElement</span>)</span><br></pre></td></tr></table></figure>
<p>如果需要使用单文件，需要 <strong>@vitejs/plugin-vue@^1.4.0</strong> 或 <strong>vue-loader@^16.5.0</strong> 或更高版本工具。如果只是部分文件需要使用，可以将后缀改为 <strong>.ce.vue</strong> 。若果需要将所有文件都构建 <strong>Web Components</strong> 可以将 <strong>@vitejs/plugin-vue@^1.4.0</strong> 或 <strong>vue-loader@^16.5.0</strong> 的 <strong>customElement</strong> 配置项开启。这样不需要再使用 <strong>.ce.vue</strong> 后缀名了。</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>vue 会把所有的的 props 自定义元素的对象的 property 上，也会将自定义元素标签上的 attribute 做一个映射。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com-demo</span> <span class="attr">type</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">com-demo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">props:&#123;</span><br><span class="line">  type:String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为 HTML 的 <strong>attribute</strong> 的只能是字符串，除了基础类型(Boolean、Number) Vue 在映射时会帮忙做类型转换，其他复杂类型则需要设置到 DOM property 上。</p>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>在自定义元素中，通过 <strong>this.$emit</strong> 或在 <strong>setup</strong> 中的 <strong>emit</strong> 发出的事件会被调度为原生 <a href="https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events#adding_custom_data_%E2%80%93_customevent">CustomEvents</a>。附加的事件参数 (payload) 会作为数组暴露在 CustomEvent 对象的 details property 上。</p>
<h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>编写组件时，可以想 vue 一样，但是使用时只能原生的插槽语法，所以也不在支持作用域插槽。</p>
<h3 id="子组件样式问题"><a href="#子组件样式问题" class="headerlink" title="子组件样式问题"></a>子组件样式问题</h3><p>使用子组件嵌套的时，有个坑的地方就是默认不会将子组件里的样式抽离出来。</p>
<p>父组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Childer</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Childer</span> <span class="keyword">from</span> <span class="string">&quot;./childer.vue&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123; <span class="title class_">Childer</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;父组件&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>子组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;childer&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;子组件&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.childer</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#222</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看到子组件的样式没有插入进去，但是样式隔离的标识是有生成的 data-v-5e87e937。不知道vue官方后续会不会修复这个bug</p>
<p><img src="/images/posts/vue_web_components/pic_1637475879404.png" alt="插入图片" loading="lazy"><em>生成HTML</em></p>
<p>查看组件是可以看到，子组件的样式是有被抽离出来的，这样就只需要自己注入进去了。</p>
<p><img src="/images/posts/vue_web_components/pic_1637476488307.png" alt="插入图片" loading="lazy"><em>实例对象</em></p>
<p>将子组件样式抽离插入到父组件里，参考<a href="https://github.com/vuejs/vue-loader/issues/1881">这个的实现</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ComDemo</span> <span class="keyword">from</span> <span class="string">&#x27;~/demo/index.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">deepStylesOf</span> = (<span class="params">&#123; styles = [], components = &#123;&#125; &#125;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">unique</span> = array =&gt; [...<span class="keyword">new</span> <span class="title class_">Set</span>(array)];</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">unique</span>([...styles, ...<span class="title class_">Object</span>.<span class="title function_">values</span>(components).<span class="title function_">flatMap</span>(deepStylesOf)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将子组件样式插入到父组件里</span></span><br><span class="line"><span class="title class_">ComDemo</span>.<span class="property">styles</span> = <span class="title function_">deepStylesOf</span>(<span class="title class_">ComDemo</span>)</span><br><span class="line"></span><br><span class="line">!customElements.<span class="title function_">get</span>(<span class="string">&#x27;com-demo&#x27;</span>) &amp;&amp; customElements.<span class="title function_">define</span>(<span class="string">&#x27;com-demo&#x27;</span>, <span class="title function_">defineCustomElement</span>(<span class="title class_">ComDemo</span>))</span><br></pre></td></tr></table></figure>
<p>完美解决子组件样式问题</p>
<p><img src="/images/posts/vue_web_components/pic_1637477447787.png" alt="插入图片" loading="lazy"><em>效果图</em></p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><strong>defineCustomElement</strong> 构建的组件默认是不会将方法挂到 <strong>customElement</strong> 上的，看 Vue 源码中，只有 _def（构造函数），_instance（组件实例)）。如果想调用组件内的方法，dom._instance.proxy.fun()，感觉实在不太优雅。<br><img src="/images/posts/vue_web_components/pic_1638631915396.png" alt="vuecode" loading="lazy"><br>我们当然希望我们组件暴露的方法能像普通dom那样直接 dom.fun() 去掉用，我们对 <strong>defineCustomElement</strong> 稍作扩展。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">VueElement</span>, defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">defineCustomElement</span> = (<span class="params">options, hydate</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Comp</span> = <span class="title function_">defineComponent</span>(options);</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">VueCustomElement</span> <span class="keyword">extends</span> <span class="title class_ inherited__">VueElement</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">initialProps</span>) &#123;</span><br><span class="line">            <span class="variable language_">super</span>(<span class="title class_">Comp</span>, initialProps, hydate);</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Comp</span>.<span class="property">methods</span>) &#123;</span><br><span class="line">                <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Comp</span>.<span class="property">methods</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// 将所有非下划线开头方法 绑定到 元素上</span></span><br><span class="line">                    <span class="keyword">if</span>(!<span class="regexp">/^_/</span>.<span class="title function_">test</span>(key))&#123;</span><br><span class="line">                        <span class="variable language_">this</span>[key] = <span class="keyword">function</span> (<span class="params">...res</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_instance</span>) &#123;</span><br><span class="line">                                <span class="comment">// 将方法thi改为 组件实例的proxy</span></span><br><span class="line">                                <span class="keyword">return</span> <span class="title class_">Comp</span>.<span class="property">methods</span>[key].<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">_instance</span>.<span class="property">proxy</span>, ...res)</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;未找到组件实例&#x27;</span>)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">VueCustomElement</span>.<span class="property">def</span> = <span class="title class_">Comp</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">VueCustomElement</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体来说坑还是有不少的，如果仅仅需要构建一些比较简单跨框架插件，使用这种方式来构建 Web Components 也是一种不错的方案。</p>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>WebComponents</tag>
      </tags>
  </entry>
  <entry>
    <title>keep-alive 与 router-view</title>
    <url>/vue_keep_alive/</url>
    <content><![CDATA[<p>keep-alive 用于缓存不活动的组件实例，router-view 一个 functional 组件，渲染路径匹配到的视图组件。这里对两者结合使用时遇到几种情况做个简单记录</p>
<span id="more"></span>

<h2 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h2><p>属性：</p>
<ul>
<li>include - 字符串或正则表达式。只有名称匹配的组件会被缓存。</li>
<li>exclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。</li>
<li>max - 数字。最多可以缓存多少组件实例。</li>
</ul>
<p>缓存组件名为 a，b 的组件，排除组成名为 c 的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;[&#x27;a&#x27;,&#x27;b&#x27;]&quot;</span> <span class="attr">:exclude</span>=<span class="string">&quot;[&#x27;c&#x27;]&quot;</span> <span class="attr">:max</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="结合router-view使用"><a href="#结合router-view使用" class="headerlink" title="结合router-view使用"></a>结合router-view使用</h2><p>如果直接被包在 keep-alive 里面，所有路径匹配到的视图组件都会被缓存</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后实现总是会有其他不同的需求的</p>
<ul>
<li>比如只缓存某些组件</li>
<li>或者相同路由不同参数需要分开缓存<!-- - 又或者不同路由使用相同组件一个缓存另一个不需要缓存 --></li>
<li>…</li>
</ul>
<h3 id="缓存部分组件"><a href="#缓存部分组件" class="headerlink" title="缓存部分组件"></a>缓存部分组件</h3><p>指定只缓存部分组件，相对来说比较简单。 可以在 router.meta 中增加需要缓存标识，然后使用<br>include 指定需要缓存组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;include&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">include</span>: []</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            $route(route) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> &#123; meta &#125; = route</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (meta.<span class="property">cache</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">include</span>.<span class="title function_">includes</span>(meta.<span class="property">name</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">include</span>.<span class="title function_">push</span>(meta.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// route 路由数组</span><br><span class="line">[&#123;</span><br><span class="line">    path: &#x27;home&#x27;,</span><br><span class="line">    name: &quot;home&quot;,</span><br><span class="line">    meta:&#123;</span><br><span class="line">        name:&#x27;组件名称&#x27;,</span><br><span class="line">        cache:true  //设置需要缓存</span><br><span class="line">    &#125;,</span><br><span class="line">    component: () =&gt; import(&#x27;@/views/home&#x27;)</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    path: &#x27;/login&#x27;,</span><br><span class="line">    name: &#x27;login&#x27;,</span><br><span class="line">    meta:&#123;</span><br><span class="line">        name:&#x27;组件名称&#x27;,</span><br><span class="line">        cache:true</span><br><span class="line">    &#125;,</span><br><span class="line">    component: () =&gt; import(&#x27;@/views/login&#x27;),</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
<p>这种方式需要知道组件的 name，当项目较大时候，给路由匹配上对应组件 name 也是件挺繁琐的事。改进一下使用两个 router-view 组件，一个用 keep-alive 包裹进行缓存，一个不缓存。这样就不需要例举出需要被缓存组件名称</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>  <span class="attr">v-if</span>=<span class="string">&quot;$route.meta.cache&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;!$route.meta.cache&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="相同路由不同参数"><a href="#相同路由不同参数" class="headerlink" title="相同路由不同参数"></a>相同路由不同参数</h3><p>当有一个路由为 /params/:id ，打开 /params/1、/params/2 、/params/xxx 正常情况下 vue 会对其进行复用，但是有些时候我们需要对其分开缓存。 这个时候可以给 router-view 指定 key</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">:key</span>=<span class="string">&quot;$route.fullPath&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>$route.fullPath : 完成解析后的 URL，包含查询参数和 hash 的完整路径。所以每个路径都是唯一的，当然也可以指定其他的值，只需要保持唯一就可以了</p>
<!-- ### 不同路由使用相同组件
当都需要缓存的时候，和正常情况一样处理就可以了。但是当一个需要缓存一个不需要缓存时候（没有的这么奇葩要求，但是被面试问答过） -->
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>瀑布流使用虚拟列表性能优化</title>
    <url>/waterfalls_and_visiblelist/</url>
    <content><![CDATA[<p>瀑布流算是比较常见的布局了，一个般常见纵向瀑布流的交互，当我们滚动到底的时候加载下一页的数据追加到上去。因为一次加载的数据量不是很多，页面操作是也不会有太大的性能消耗。但是如果当你一直往下滚动加载，加载几十页的时候，就会开始感觉不那么流畅的，这是因为虽然每次操作的很少，但是页面的 DOM 越来越多，内存占用也会增大，而且发生重排重绘时候浏览器计算量耗时也会增大，就导致了慢慢不能那么流畅了。这个时候可以选择结合虚拟列表方式使用，虚拟列表本身就是用来解决超长列表时的处理方案。</p>
<span id="more"></span>

<h2 id="瀑布流"><a href="#瀑布流" class="headerlink" title="瀑布流"></a>瀑布流</h2><p>瀑布流的实现方式有很多种，大体分为：</p>
<ul>
<li>CSS： CSS 实现的有 multi-column、grid ，CSS 实现存在一定局限性，例如无法调整顺序，当元素高度差异较大时候不是很好处理各列间隔差等。</li>
<li>JavaScript：JavaScript 实现的有 JavaScript + flex、JavaScript + position，JavaScript 实现兼容性较好，可控制性高。</li>
</ul>
<p>因为我的瀑布流是可提前计算元素宽高，列数是动态的，所以采用了 JavaScript + position 来配合 虚拟列表 进行优化。</p>
<h3 id="js-flex-实现"><a href="#js-flex-实现" class="headerlink" title="js + flex 实现"></a>js + flex 实现</h3><p>如果你的瀑布流 列是固定，列宽不固定 的，使用 flex 是个很好选择，当你的容器宽度变话时候，每一列宽度会自适应，大致实现方式</p>
<p>将你的数据分为对应列数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data1 = [], <span class="comment">//第一列</span></span><br><span class="line">  data2 = [], <span class="comment">//第二列</span></span><br><span class="line">  data3 = [], <span class="comment">//第三列</span></span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; data.<span class="property">length</span>) &#123;</span><br><span class="line">  data1.<span class="title function_">push</span>(data[i++])</span><br><span class="line">  <span class="keyword">if</span> (i &lt; data.<span class="property">length</span>) &#123;</span><br><span class="line">    data2.<span class="title function_">push</span>(data[i++])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (i &lt; data.<span class="property">length</span>) &#123;</span><br><span class="line">    data3.<span class="title function_">push</span>(data[i++])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后将你的每列数据插入进去就可以了，设置 list 为 flex 容器，并设置主轴方向为 row</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 第一列 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- more items--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 第二列 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- more items--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 第三列 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- more items--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="js-position-实现"><a href="#js-position-实现" class="headerlink" title="js + position 实现"></a>js + position 实现</h3><p>这种方式比较适合 列定宽，列数量不固定情况，而且最好能计算出每个元素的大小。</p>
<p>大致 HTML 结构如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- more items--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ui</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.list</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.list-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JavaScript 部分，首先需要获取 list 宽度，根据 list.width/列宽 计算出列的数量，然后根据列数量去分组数据和计算位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以列宽为300 间隔为20 为例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> catchColumn = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="built_in">parseInt</span>((dom.<span class="property">clientWidth</span> + <span class="number">20</span>) / (<span class="number">300</span> + <span class="number">20</span>)), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toTwoDimensionalArray</span> = (<span class="params">count</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> list = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; count; index++) &#123;</span><br><span class="line">    list.<span class="title function_">push</span>([])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">minValIndex</span> = (<span class="params">arr = []</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> val = <span class="title class_">Math</span>.<span class="title function_">min</span>(...arr)</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> i === val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存累计高度</span></span><br><span class="line"><span class="keyword">let</span> sumHeight = <span class="title function_">toTwoDimensionalArray</span>(catchColumn)</span><br><span class="line"></span><br><span class="line">data.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取累计高度最小那列</span></span><br><span class="line">  <span class="keyword">const</span> minIndex = <span class="title function_">minValIndex</span>(sumHeight)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> width = <span class="number">0</span> <span class="comment">// 这里宽高更具需求计算出来</span></span><br><span class="line">  <span class="keyword">let</span> height = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  item.<span class="property">_top</span> = minIndex * (<span class="number">300</span> + <span class="number">20</span>) <span class="comment">// 缓存位置信息，后面会用到</span></span><br><span class="line">  item.<span class="property">style</span> = &#123;</span><br><span class="line">    <span class="attr">width</span>: width + <span class="string">&#x27;px&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: height + <span class="string">&#x27;px&#x27;</span>,</span><br><span class="line">    <span class="comment">// 计算偏移位置</span></span><br><span class="line">    <span class="attr">transform</span>: <span class="string">`translate(<span class="subst">$&#123;minIndex * (<span class="number">300</span> + <span class="number">20</span>)&#125;</span>px, <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">      sumHeight[minIndex]</span></span></span><br><span class="line"><span class="subst"><span class="string">    &#125;</span>px)`</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sumHeight[minIndex] = sumHeight[minIndex] + height + <span class="number">20</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="动态列数"><a href="#动态列数" class="headerlink" title="动态列数"></a>动态列数</h3><p>可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ResizeObserver">ResizeObserver</a>(现代浏览器兼容比较好了) 监听容器元素大小变化，当宽度变化时重新计算列数量，当列数量发生变化时重新计算每项的位置信息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="title function_">debounce</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> column = <span class="title function_">updateVisibleContainerInfo</span>(visibleContainer)</span><br><span class="line">  <span class="keyword">if</span> (column !== catchColumn) &#123;</span><br><span class="line">    catchColumn = column</span><br><span class="line">    <span class="comment">// 重新计算</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">resetLayout</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resizeObserver = <span class="keyword">new</span> <span class="title class_">ResizeObserver</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="title function_">observer</span>(e))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始监听</span></span><br><span class="line">resizeObserver.<span class="title function_">observe</span>(dom)</span><br></pre></td></tr></table></figure>

<h3 id="过渡动画"><a href="#过渡动画" class="headerlink" title="过渡动画"></a>过渡动画</h3><p>当列数量发生变化时候，元素项的位置很多都会发生变化，如下图，第 4 项的位置从第 3 列变到了第 4 项，如果不做处理会显得比较僵硬。</p>
<p align="center">
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 460 298" width="460" height="298">
    <rect x="0" y="0" width="460" height="298" fill="#ffffff">
    </rect>
    <g stroke-linecap="round" transform="translate(10 113) rotate(0 220 87.5)">
        <path d="M-0.49 0.17 C99.14 1.36, 198.27 0.42, 439.01 -0.6 M-0.08 -0.06 C124.83 -1.08, 249.03 -1.15, 439.88 -0.3 M441.52 -1.12 C441.14 56.74, 440.97 108.16, 440.42 174.59 M440.47 0.31 C441.08 41.11, 441.73 83.9, 439.17 175.32 M440.53 174.55 C306.2 173.35, 173.32 173.64, -0.03 175.37 M439.94 175.07 C325.72 174.97, 210.49 174.53, 0.34 174.72 M-1.31 173.92 C-1.32 128.03, -0.73 80.94, -0.75 0.21 M-0.02 174.92 C-0.93 132.04, -1.82 87, 0.93 0.03" stroke="#000000" stroke-width="2" fill="none">
        </path>
    </g>
    <g stroke-linecap="round" transform="translate(19 10) rotate(0 46 58.5)">
        <path d="M0.34 0.61 C36.77 1.67, 70.84 -1.52, 90.79 -0.34 M-0.11 0.63 C19.8 0.16, 39.54 -0.08, 91.41 0.15 M90.88 1.39 C93.57 34.66, 89.93 67.3, 91.59 115.77 M92.31 -0.64 C92.08 46.58, 93.12 92.3, 92.32 117.02 M91.09 115.47 C68.38 116.27, 45.77 117.43, 0.74 116.21 M92.14 117.51 C58.99 116, 24.94 117.57, -0.57 116.74 M-1.08 115.01 C0.47 84.99, 1.3 55.04, 0.21 -1.01 M-0.08 117.12 C-0.38 74.15, -1.73 33.8, 0.03 0.41" stroke="#c92a2a" stroke-width="1" fill="none">
        </path>
    </g>
    <g stroke-linecap="round" transform="translate(125 11.5) rotate(0 46 86.5)">
        <path d="M0.61 0.84 C24.89 -1.19, 45.37 -1.36, 91.66 -1.68 M0.63 -0.07 C31.97 -0.1, 63.69 -0.48, 92.15 -0.14 M93.39 1.68 C94.53 48.35, 93.73 100.21, 90.77 174.96 M91.36 -0.63 C92.84 62.73, 91.99 124.94, 92.02 172.52 M90.47 172.58 C69.22 172.76, 48.83 173.32, -0.79 174.21 M92.51 173.17 C63.97 172.42, 38.41 172.56, -0.26 172.62 M-1.99 173.94 C-0.26 115.9, 0.39 55.47, -1.01 1.19 M0.12 173.73 C-0.74 104.14, 0.97 36.58, 0.41 0.42" stroke="#c92a2a" stroke-width="1" fill="none">
        </path>
    </g>
    <g stroke-linecap="round" transform="translate(230 14.5) rotate(0 46 46.5)">
        <path d="M0.84 1.22 C22.02 -2.25, 44.91 -0.62, 90.32 0.95 M-0.07 0.01 C25.86 -0.81, 51.54 -0.43, 91.86 -0.09 M93.68 1.22 C89.52 35.39, 91.07 68.71, 93.96 94.2 M91.37 0.02 C92.71 31.48, 92.61 64.64, 91.52 92.34 M91.58 91.79 C59.74 92.25, 27.87 91.5, 1.21 92.9 M92.17 92.1 C64.74 94.15, 38.33 93.21, -0.38 93.4 M0.94 91.6 C2.28 70.46, 0.71 48.42, 1.19 1.89 M0.73 92.22 C-0.56 66.24, 0.1 38.04, 0.42 -0.53" stroke="#364fc7" stroke-width="1" fill="none">
        </path>
    </g>
    <g stroke-linecap="round" transform="translate(344 15.5) rotate(0 46 58.5)">
        <path d="M-1.03 -1.97 C29.22 -0.9, 59.17 0.39, 91.67 -0.23 M91.58 -0.47 C90.73 42.75, 91.63 84.72, 93.52 115.88 M90.04 117.42 C57.59 116.33, 25.96 118.76, 0.95 117.63 M0.84 115.34 C1.37 89.38, -0.22 60.36, 1.05 -0.91" stroke="#c92a2a" stroke-width="4.5" fill="none" stroke-dasharray="8 12">
        </path>
    </g>
    <g transform="translate(61.5 56) rotate(0 3.5 12.5)">
        <text x="3.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
            1
        </text>
    </g>
    <g transform="translate(163 85.5) rotate(0 8 12.5)">
        <text x="8" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
            2
        </text>
    </g>
    <g transform="translate(268 48.5) rotate(0 8 12.5)">
        <text x="8" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#364fc7" text-anchor="middle" style="white-space: pre;" direction="ltr">
            3
        </text>
    </g>
    <g transform="translate(382.5 61.5) rotate(0 7.5 12.5)">
        <text x="7.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
            4
        </text>
    </g>
    <g stroke-linecap="round" transform="translate(232.5 129.75) rotate(0 46 58.5)">
        <path d="M0.1 -0.36 C35.38 -0.89, 70.24 0.22, 93.8 0.98 M0.7 0.69 C34.69 -0.96, 68.87 -1.35, 91.53 0.38 M93.77 -1.89 C91.58 30.33, 93.21 60.5, 91.19 117.89 M91.77 0.37 C90.74 34.26, 90.78 69.6, 92.47 116.82 M91.36 118.13 C65.56 115.98, 43.28 118.35, -1.28 115.14 M91.17 117.69 C58.79 117.86, 25.56 117.87, -0.5 117.24 M1.32 116.16 C-0.3 78.71, 0.11 38.79, -0.99 -1.08 M0.19 116.09 C1.6 91.53, -0.11 65.64, 0.55 -0.81" stroke="#c92a2a" stroke-width="1" fill="none">
        </path>
    </g>
    <g transform="translate(271 175.75) rotate(0 7.5 12.5)">
        <text x="7.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
            4
        </text>
    </g>
</svg>
</p>

<p>好在我们使用了 transform（也是为什么不使用 top、left 原因，transform 动画性能更高） 进行位置偏移，可以直接使用 transition 过渡。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.list-item</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.5s</span> ease-in-out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用虚拟列表"><a href="#使用虚拟列表" class="headerlink" title="使用虚拟列表"></a>使用虚拟列表</h2><h3 id="瀑布流存在的问题"><a href="#瀑布流存在的问题" class="headerlink" title="瀑布流存在的问题"></a>瀑布流存在的问题</h3><p>很多虚拟列表的都是使用的单列定高使用方式，但是瀑布流使用虚拟列表方式有点不同，瀑布流存在多列且时是错位的。所以常规 length*height 为列表总高度，根据 scrollTop/height 来确定下标方式就行不通了，这个时候高度需要根据瀑布流高度动态决定了，可显示元素也不能通过 starindex-endindex 去截取显示了。</p>
<p>如下图：蓝色框的元素是不应该显示的，只有与可视区域存在交叉的元素才应该显示</p>
<p align="center">
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 353 758.5" width="353" height="758.5">
    <rect x="0" y="0" width="353" height="758.5" fill="#ffffff">
    </rect>
    <g stroke-linecap="round" transform="translate(10 117) rotate(0 166.5 250)">
        <path d="M0.72 1 C85.82 -0.51, 171.42 0.26, 333.25 0 M0.35 -0.53 C86.39 -0.22, 172.88 0.54, 332.59 -0.65 M333.72 -0.59 C331.75 138.3, 331.35 276.01, 333.39 499.35 M333.05 0.37 C331.22 121.97, 331.11 243.44, 333.2 499.61 M332.83 500.47 C221.23 497.05, 106.02 496.84, -0.33 499.21 M333.04 500.64 C253.92 500.48, 175.76 501.12, 0.15 499.67 M-0.64 500.38 C-1.44 333.69, -1.78 166.77, -0.16 -0.42 M-0.32 500.39 C1.58 380.41, 1.74 260.88, -0.19 -0.11" stroke="#000000" stroke-width="2" fill="none">
        </path>
    </g>
    <g stroke-linecap="round" transform="translate(22 10) rotate(0 46 58.49999999999999)">
        <path d="M-1.06 -0.78 C31.6 -1.8, 68.39 -0.16, 90.86 0.72 M-0.27 -0.87 C31.57 -0.47, 62.36 -0.61, 91.06 0.06 M90.59 -0.72 C93.57 23.14, 92.92 48.07, 90.1 118.2 M92.59 0.64 C91.54 25.79, 91.84 48.77, 91.4 117.78 M91.63 117.89 C60.19 117.86, 32.15 118.89, 0.85 116.53 M92 116.75 C66.12 117.09, 41.53 116.61, 0.03 116.45 M-1.92 116.26 C0.71 74.42, -0.38 29.15, -1.19 0.01 M-0.27 116.88 C1.29 85.59, -0.09 54.8, 1 0.84" stroke="#c92a2a" stroke-width="1" fill="none">
        </path>
    </g>
    <g stroke-linecap="round" transform="translate(128 11.5) rotate(0 46 86.5)">
        <path d="M0.85 1.5 C26.04 1.21, 56.87 -0.75, 90.53 -0.61 M0.28 -0.1 C20.66 -0.77, 43.28 0.39, 91.41 -0.74 M90.36 1.13 C94.56 36.23, 91.37 72.5, 90.09 173.74 M92.89 0.38 C92.22 62.29, 91.71 123.93, 91.61 172.56 M91.14 173.54 C61.97 173.1, 32.44 173.8, 1.55 172.93 M92.45 172.99 C57.7 172.47, 22.59 172.26, 0.83 172.24 M1.63 171.19 C-1.73 134.92, -0.06 94.82, 0.92 1.1 M-0.33 172.76 C-1 136.8, -0.94 102.31, 0.87 0.64" stroke="#c92a2a" stroke-width="1" fill="none">
        </path>
    </g>
    <g stroke-linecap="round" transform="translate(233 14.5) rotate(0 46 46.49999999999999)">
        <path d="M1.5 -1.92 C34.3 0.56, 66.3 -1.85, 91.39 -1.4 M-0.1 -0.5 C35 0.7, 71.41 -0.85, 91.26 -0.87 M93.13 1.57 C90.61 31.6, 90.05 64.54, 92.74 94.22 M92.38 -0.15 C92.31 29.22, 91.53 59.37, 91.56 93.19 M92.54 92.29 C57.05 91.69, 21.9 94.16, -0.07 94.44 M91.99 92.93 C70.3 92.46, 48.32 94.24, -0.76 92.3 M-1.81 92.05 C1 61.66, 0.7 29.8, 1.1 -1.86 M-0.24 93.39 C-0.67 58.1, 0.62 23.18, 0.64 -0.54" stroke="#364fc7" stroke-width="1" fill="none">
        </path>
    </g>
    <g stroke-linecap="round" transform="translate(23 143.5) rotate(0 46 58.5)">
        <path d="M-0.16 1.91 C26.05 0.41, 48.97 1.49, 90.17 -1.4 M0.92 0.77 C26.78 -0.71, 53.96 0.27, 92.13 -0.34 M93.12 -0.54 C90.67 25.41, 89.85 54.4, 93.25 118.3 M92.52 1 C92.11 26.6, 92.41 53.9, 91.76 116.57 M92.4 116.38 C60.05 117.38, 32.44 118.87, 0.83 117.28 M91.77 116.5 C71.51 116.15, 52.53 115.85, -0.4 117.31 M-0.92 118.5 C0.74 89.1, 1.33 61.5, 1.99 0.49 M0.75 117.4 C0.41 87.58, 1.55 58.47, -0.01 -0.67" stroke="#c92a2a" stroke-width="1" fill="none">
        </path>
    </g>
    <g stroke-linecap="round" transform="translate(235 137.5) rotate(0 46 58.5)">
        <path d="M-0.69 -1.37 C32.19 0.55, 67.17 -0.66, 91.16 -1.7 M0.65 -0.73 C20.23 -0.89, 40.43 0.42, 91.79 0.1 M91.14 0.57 C92.73 38.01, 93.44 71.56, 90.28 116.5 M92.14 -0.86 C93.09 39.99, 92.35 80.06, 91.19 116.41 M92.62 115.77 C65.3 117.48, 37.88 118.13, 0.68 116.99 M92.24 116.5 C57.79 116.93, 25.79 118.32, -0.44 116.84 M-1.35 118.8 C-1.39 72.23, -0.63 30.25, -0.54 -1.07 M0.64 116.73 C0.24 87.22, 0.82 58.36, -0.39 -0.67" stroke="#c92a2a" stroke-width="1" fill="none">
        </path>
    </g>
    <g stroke-linecap="round" transform="translate(130 200.5) rotate(0 46 58.5)">
        <path d="M-0.81 0.62 C20.98 0.72, 45.28 -0.11, 93.5 0.68 M1 0.24 C27.03 -0.85, 54.07 0.63, 92.4 -0.44 M91.99 -1.35 C94.61 31.82, 91.23 65.8, 91.64 116.46 M91.05 0.64 C91.13 28.53, 90.81 57.97, 91.72 116.61 M92.58 116.45 C72.28 116.64, 49.65 115.97, -1.97 115.48 M91.14 117.5 C67.24 115.93, 40.92 116.91, -0.89 116.82 M-1.9 117.01 C-0.78 72.29, -0.77 27.7, -0.11 -0.07 M-0.48 117.72 C1.8 74.6, 1.55 32.84, -0.35 0.6" stroke="#c92a2a" stroke-width="1" fill="none">
        </path>
    </g>
    <g transform="translate(64.5 56) rotate(0 3.5 12.5)">
        <text x="3.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
            1
        </text>
    </g>
    <g transform="translate(166 85.5) rotate(0 8 12.5)">
        <text x="8" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
            2
        </text>
    </g>
    <g transform="translate(271 48.5) rotate(0 8 12.5)">
        <text x="8" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#364fc7" text-anchor="middle" style="white-space: pre;" direction="ltr">
            3
        </text>
    </g>
    <g transform="translate(273.5 183.5) rotate(0 7.5 12.5)">
        <text x="7.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
            4
        </text>
    </g>
    <g transform="translate(62 189.5) rotate(0 7 12.5)">
        <text x="7" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
            5
        </text>
    </g>
    <g transform="translate(168.5 246.5) rotate(0 7.5 12.5)">
        <text x="7.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
            6
        </text>
    </g>
    <g stroke-linecap="round" transform="translate(22 283.5) rotate(0 46 58.5)">
        <path d="M-0.78 -0.59 C27.23 -0.65, 50.86 1.22, 91.41 0.37 M0.65 -0.88 C35.95 1.84, 70.95 1.2, 92.81 -0.47 M92.88 1.93 C93.54 24.45, 90.38 49.64, 92.62 117.53 M92.13 0.54 C93.6 38.02, 92.98 74.92, 92.32 116.73 M93.95 117.64 C73.79 117.41, 52.17 115.06, -0.16 117.48 M91.88 117.62 C58.53 116.44, 24.3 116.06, 0.44 117.84 M0.08 115.29 C2.68 92.32, 2.36 63.06, -0.71 1.62 M0.25 116.01 C-0.09 88.67, -1.08 57.96, -0.9 -0.7" stroke="#c92a2a" stroke-width="1" fill="none">
        </path>
    </g>
    <g transform="translate(59.5 329.5) rotate(0 8.5 12.5)">
        <text x="8.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
            8
        </text>
    </g>
    <g stroke-linecap="round" transform="translate(130 341.5) rotate(0 46 58.5)">
        <path d="M1 -0.59 C32.65 2.4, 64.71 -1.19, 93.3 -1.76 M0.32 0.81 C33.12 -1.25, 67.48 -0.82, 92.44 0.96 M93.09 0.62 C92.64 42.41, 93.54 84.48, 92.26 118.08 M92.26 0.32 C92.53 43.1, 91.96 87.36, 92.98 117.32 M90.59 116.84 C58.51 118.16, 24.11 115.78, -0.24 118.24 M91.49 117.44 C57.61 117.08, 20.63 117.77, 0.04 116.14 M-1.46 116.29 C0.71 71.41, 0.36 28.31, 0.49 -1.98 M-0.73 116.1 C-1.66 74.26, -0.99 31.55, -0.82 0.7" stroke="#c92a2a" stroke-width="1" fill="none">
        </path>
    </g>
    <g transform="translate(169 387.5) rotate(0 7 12.5)">
        <text x="7" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
            9
        </text>
    </g>
    <g stroke-linecap="round" transform="translate(239 402.5) rotate(0 46 58.5)">
        <path d="M-1.91 1.3 C27.56 1.23, 60.57 0.64, 92.63 1.61 M-0.49 0.44 C24.23 0.31, 46.63 -1.27, 92.54 0.31 M92.43 0.26 C93.31 39.73, 93.59 76.7, 92.52 117.64 M91.42 0.98 C91.3 32.62, 91.45 63.53, 91.3 116.92 M91.07 116.76 C63.44 118.68, 32.12 118.84, -1.02 117.88 M91.93 117.04 C55.82 116.98, 22.12 116.82, -0.73 116.65 M0.46 117.49 C-1.39 73.71, 2.24 27.13, -1.46 -1.8 M0.11 116.18 C0.66 90.47, 0.18 62.67, -0.63 -0.42" stroke="#c92a2a" stroke-width="1" fill="none">
        </path>
    </g>
    <g transform="translate(274.5 448.5) rotate(0 10.5 12.5)">
        <text x="10.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
            10
        </text>
    </g>
    <g stroke-linecap="round" transform="translate(236 269.5) rotate(0 46 58.5)">
        <path d="M0.71 0.63 C21.11 -1.83, 37.16 -0.28, 91.01 0.88 M-0.99 0.54 C36.77 0.19, 73.11 0.64, 92.21 0.13 M92.27 0.52 C93.52 40.89, 91.15 81.19, 90.84 118.95 M91.68 -0.7 C92.73 39.09, 93.54 77.72, 91.54 116.88 M93.83 115.98 C59.56 118.55, 23.85 115.06, -0.13 117.08 M92.65 116.27 C71.92 118.53, 52.04 118.36, 0.23 117.25 M-0.67 115.54 C-2.57 92.09, -0.69 69.9, 0.22 -1.65 M-0.43 116.37 C-0.92 74.02, -1.25 30.48, 0 -0.28" stroke="#c92a2a" stroke-width="1" fill="none">
        </path>
    </g>
    <g transform="translate(275.5 315.5) rotate(0 6.5 12.5)">
        <text x="6.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
            7
        </text>
    </g>
    <g stroke-linecap="round" transform="translate(132 481.5) rotate(0 46 58.5)">
        <path d="M-0.09 -0.12 C23.71 2.13, 48.58 -0.79, 90.97 -0.22 M0.86 -0.96 C20.51 0.59, 39.63 0.54, 92.21 0.07 M93.37 0.43 C90.65 34.55, 93.85 64.72, 91.87 116.49 M91.38 0.78 C91.26 30.42, 91.17 58.57, 91.8 117.59 M93.23 116.33 C63.71 114.95, 37.3 114.96, 0.33 116.58 M92.29 117.23 C55.88 116.15, 17.81 116.14, 0.34 117.36 M1.21 117.27 C0.07 78.92, 1.26 42.55, 0.64 0.41 M-0.61 116.09 C0.66 75.16, 0.77 33.51, 0.21 0.86" stroke="#c92a2a" stroke-width="1" fill="none">
        </path>
    </g>
    <g transform="translate(167 527.5) rotate(0 11 12.5)">
        <text x="11" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
            12
        </text>
    </g>
    <g stroke-linecap="round" transform="translate(27 424.5) rotate(0 46 58.5)">
        <path d="M-1.07 -1.03 C24.24 -1.65, 47.55 0.29, 93.72 -1.92 M0.63 0.21 C36.37 -0.64, 73.15 -1.15, 92.68 0.21 M90.95 -0.13 C92.46 22.58, 92.47 48.66, 90.76 118.55 M91.28 -0.2 C93.5 29.99, 92.52 59.61, 92.62 116.67 M90.18 117.33 C64.28 119.8, 36.51 117.1, 0.57 117.46 M91.46 117.34 C58.76 116.52, 24 117.36, 0.61 117.13 M-1.43 117.64 C1.33 88.17, 0.63 58.67, -1.22 -1.82 M0.48 117.21 C0.68 76.25, -0.98 35.79, -0.77 0.36" stroke="#c92a2a" stroke-width="1" fill="none">
        </path>
    </g>
    <g transform="translate(66.5 470.5) rotate(0 6.5 12.5)">
        <text x="6.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
            11
        </text>
    </g>
    <g stroke-linecap="round" transform="translate(29 558.5) rotate(0 46 58.5)">
        <path d="M1.81 0.03 C26.11 -2.26, 50.27 0.03, 92.69 -0.1 M-0.15 0.34 C30.65 -0.24, 59.96 -1.21, 92.97 -0.02 M91.82 1.12 C91.64 36.32, 91.7 75.52, 90.33 115.01 M92.13 0.61 C92.27 26.43, 92.61 54.51, 91.26 117.8 M91.96 117.34 C55.06 118.72, 18.7 116.9, 0.17 116.84 M92.42 116.04 C71.88 116.65, 53.23 117.9, 0.19 117.61 M0.06 115.34 C-0.02 78.36, 2.75 40.99, 0.23 -1.36 M-0.56 117.48 C-0.12 71.64, -0.45 24.91, 0.53 -0.14" stroke="#c92a2a" stroke-width="1" fill="none">
        </path>
    </g>
    <g stroke-linecap="round" transform="translate(241 544.5) rotate(0 46 58.5)">
        <path d="M-0.92 -1.7 C33.69 1.69, 65.55 2.11, 92.57 -1.76 M-0.52 -0.11 C33.19 1.17, 64.77 0.08, 92.94 0.81 M93.66 1.44 C92.34 35.96, 92.41 71.36, 92.77 118.36 M91.64 -0.63 C92.16 30.78, 92.24 61.78, 91.58 117.18 M93.34 116.25 C66.7 115.43, 39.37 118.67, 1.23 116.18 M91.34 116.92 C73.62 116.56, 52.63 116.57, -0.68 116.14 M1.81 118.41 C1.49 76.26, 1.67 32.91, 0.23 -1.96 M-0.6 117.22 C-0.29 92.07, -0.06 69.28, -0.44 0.17" stroke="#c92a2a" stroke-width="1" fill="none">
        </path>
    </g>
    <g transform="translate(276.5 590.5) rotate(0 10.5 12.5)">
        <text x="10.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
            13
        </text>
    </g>
    <g stroke-linecap="round" transform="translate(134 631.5) rotate(0 46 58.5)">
        <path d="M-0.46 1.74 C25.38 -0.13, 46.51 2.25, 92.99 -1.32 M-0.72 -0.88 C26.22 -0.04, 54.35 0.01, 92.26 0.91 M92.72 -0.77 C92.54 41.38, 90.45 85.81, 92.21 115.79 M91.43 0.63 C90.62 37.79, 90.4 76, 92.03 116.12 M92 115.94 C67.24 118.96, 43.06 117.38, 0.31 116.54 M92.21 116.33 C72.71 117.24, 51.65 116.22, -0.83 117.88 M-0.29 118.94 C-1.61 68.79, 0.3 23.59, -1.8 -1.35 M0.13 116.21 C-0.88 81.19, -0.34 43.61, 0.78 -0.05" stroke="#364fc7" stroke-width="1" fill="none">
        </path>
    </g>
    <g transform="translate(170 677.5) rotate(0 10 12.5)">
        <text x="10" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#364fc7" text-anchor="middle" style="white-space: pre;" direction="ltr">
            15
        </text>
    </g>
    <g transform="translate(68 569) rotate(0 10 12.5)">
        <text x="0" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#1864ab" text-anchor="start" style="white-space: pre;" direction="ltr">
            14
        </text>
    </g>
</svg>
</p>

<h3 id="可视元素判定"><a href="#可视元素判定" class="headerlink" title="可视元素判定"></a>可视元素判定</h3><p>先来看下面图，当元素完全不在可视区域时候就视为当前元素不需要显示，只有与可视区域存在交叉或被包含时候视为需要显示。</p>
<p align="center">
    <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 543 688.2044864933938" width="543" height="688.2044864933938">
        <rect x="0" y="0" width="543" height="688.2044864933938" fill="#ffffff">
        </rect>
        <g stroke-linecap="round" transform="translate(131.5 160) rotate(0 166.5 165)">
            <path d="M0.24 0.87 C123.88 0.38, 245 0.23, 333.59 -0.63 M0.33 -0.24 C91.33 1.23, 182.61 1.05, 333.53 0.44 M332.71 0.36 C334.02 131.26, 334.08 262.73, 333.44 329.43 M332.73 -0.55 C331.42 104.57, 332.58 208.14, 332.71 330.48 M333.66 330.41 C261.8 332.32, 189.92 331.22, 0.11 328.77 M332.9 330.29 C219.76 331.08, 108.19 330.97, 0.25 329.34 M1.29 329.08 C-0.24 224.07, -1.91 117.31, 0.65 1.27 M0.12 329.96 C1.08 251.48, 1.35 173.06, 0.12 -0.13" stroke="#000000" stroke-width="2" fill="none">
            </path>
        </g>
        <g stroke-linecap="round" transform="translate(143.5 10) rotate(0 46 58.49999999999999)">
            <path d="M1.28 1.63 C19.47 -0.96, 38.05 0.71, 91.07 -0.51 M91.28 -0.33 C93.59 38.93, 93.06 81.02, 93.28 118.93 M92.53 116.37 C59.12 116.25, 26.55 117.45, -0.84 117.32 M-1.62 115.19 C1.37 88.48, -0.83 55.93, 1.4 -1.7" stroke="#364fc7" stroke-width="1.5" fill="none" stroke-dasharray="8 9">
            </path>
        </g>
        <g stroke-linecap="round" transform="translate(249.5 11.5) rotate(0 46 86.5)">
            <path d="M1.63 0.65 C27.02 -0.17, 56.51 -1.52, 91.49 0.79 M-0.17 0.95 C24.8 1.01, 51.19 0.97, 92.96 0.65 M91.37 0.67 C91.08 38.12, 92.27 72.12, 92.32 172.15 M91.09 0.37 C92.12 41.76, 90.9 85.68, 91.15 172.24 M92.63 173.64 C56.95 172.29, 21.57 171.46, 0.77 172.29 M91.23 172.91 C60.69 173.15, 27.94 172.42, 0.21 173.31 M0.65 173.07 C-3.41 105.29, -0.68 41.62, -1.26 -1.19 M-0.37 172.63 C-0.28 124.36, -0.11 76.74, 0.33 0.72" stroke="#c92a2a" stroke-width="1" fill="none">
            </path>
        </g>
        <g stroke-linecap="round" transform="translate(354.5 14.5) rotate(0 46 46.49999999999999)">
            <path d="M0.65 -0.8 C29.62 0.12, 57.47 -1.26, 92.79 -0.52 M93.89 -0.8 C93.03 33.92, 92.95 66.67, 93.29 91.22 M92.67 92.45 C67.99 93.35, 39.86 93.03, -0.85 91.91 M0.73 94.59 C-0.71 67.9, 2.16 42.79, -1.52 1.67" stroke="#364fc7" stroke-width="1.5" fill="none" stroke-dasharray="8 9">
            </path>
        </g>
        <g stroke-linecap="round" transform="translate(144.5 143.5) rotate(0 46 58.5)">
            <path d="M-0.8 0.42 C34.36 -1.23, 66.48 0.49, 91.48 0.96 M-0.4 0.68 C25.07 -0.23, 49.54 -0.22, 91.11 -0.21 M91.45 1.64 C92.27 37.35, 91.95 75.53, 90.91 116.22 M92.8 -0.73 C90.52 26.31, 90.09 50.46, 92.84 117.49 M92.25 116.02 C61.78 115.48, 32 116.59, 1 116.7 M92.91 116.76 C60.88 115.95, 29.22 117.23, 0.85 117.94 M-1.78 115.91 C0.57 91.61, -1.64 61.3, -0.45 0.34 M0.01 116.4 C0.62 82.43, 0.77 48.94, 0.77 0.48" stroke="#c92a2a" stroke-width="1" fill="none">
            </path>
        </g>
        <g stroke-linecap="round" transform="translate(356.5 137.5) rotate(0 46 58.5)">
            <path d="M0.42 0.87 C34.17 -0.14, 70.98 -0.15, 92.96 -0.72 M0.68 0.78 C26.71 1.33, 52.79 -0.52, 91.79 0.26 M93.64 0.64 C91.55 31.72, 91.54 61.71, 91.22 115.38 M91.27 -0.42 C93.13 23.66, 91.67 49.86, 92.49 117.3 M91.02 117.16 C59.69 117.88, 30.3 118.12, -0.3 117.85 M91.76 117.37 C70.56 118.05, 51.36 118.69, 0.94 116.33 M-1.09 117.95 C1.82 76.82, -1.23 38.71, 0.34 -0.12 M-0.6 117.18 C0.25 86.62, 1.15 56.33, 0.48 0.64" stroke="#c92a2a" stroke-width="1" fill="none">
            </path>
        </g>
        <g stroke-linecap="round" transform="translate(251.5 200.5) rotate(0 46 58.5)">
            <path d="M0.87 -0.93 C30.07 0.6, 60.63 0.77, 91.28 -0.33 M0.78 0.64 C37.27 0.02, 71.72 -0.84, 92.26 -0.32 M92.64 -0.84 C92 38.14, 90.59 77.2, 90.38 115.19 M91.58 0.7 C92.08 38.63, 93.77 79.26, 92.3 117.31 M92.16 115.18 C62.23 115.84, 31.93 116.24, 0.85 115.45 M92.37 116.03 C65.4 117.09, 39.22 117.73, -0.67 117.33 M0.95 118.86 C-0.22 80.31, 0.59 46.34, -0.12 -0.75 M0.18 116.82 C0.32 86.92, 0.76 55.89, 0.64 -0.76" stroke="#c92a2a" stroke-width="1" fill="none">
            </path>
        </g>
        <g transform="translate(186 56) rotate(0 3.5 12.5)">
            <text x="3.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#364fc7" text-anchor="middle" style="white-space: pre;" direction="ltr">
                1
            </text>
        </g>
        <g transform="translate(287.5 85.5) rotate(0 8 12.5)">
            <text x="8" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
                2
            </text>
        </g>
        <g transform="translate(392.5 48.5) rotate(0 8 12.5)">
            <text x="8" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#364fc7" text-anchor="middle" style="white-space: pre;" direction="ltr">
                3
            </text>
        </g>
        <g transform="translate(395 183.5) rotate(0 7.5 12.5)">
            <text x="7.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
                4
            </text>
        </g>
        <g transform="translate(183.5 189.5) rotate(0 7 12.5)">
            <text x="7" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
                5
            </text>
        </g>
        <g transform="translate(290 246.5) rotate(0 7.5 12.5)">
            <text x="7.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
                6
            </text>
        </g>
        <g stroke-linecap="round" transform="translate(143.5 283.5) rotate(0 46 58.5)">
            <path d="M-0.33 1.89 C24.4 1.69, 51.96 1.61, 93.93 1.29 M-0.32 0.33 C19.12 0.58, 39.12 -0.66, 92.16 -0.43 M90.19 0.73 C93.13 27.27, 90.69 58.87, 90.3 115.48 M92.31 0.32 C92.69 44.4, 92.65 88.87, 92.38 116.65 M90.45 116.83 C61.6 116.92, 28.32 115.45, 0.42 117.61 M92.33 117.03 C55.68 115.84, 21.62 117.31, -0.63 116.41 M-0.75 116.26 C-0.18 83.32, 0.16 51.66, 0.67 1.44 M-0.76 117.71 C-0.41 72.95, 0.1 29.7, -0.27 -0.63" stroke="#c92a2a" stroke-width="1" fill="none">
            </path>
        </g>
        <g transform="translate(181 329.5) rotate(0 8.5 12.5)">
            <text x="8.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
                8
            </text>
        </g>
        <g stroke-linecap="round" transform="translate(251.5 341.5) rotate(0 46 58.5)">
            <path d="M-0.8 1.36 C25.84 0.41, 50.5 0.42, 90.22 -0.42 M-0.28 0.82 C30.35 -0.73, 60.22 -0.73, 91.46 -0.39 M93.59 -1.46 C90.09 27.01, 89.24 49.7, 93.67 117.97 M92.12 -0.49 C92.45 37.73, 92.75 76.93, 92.5 116.85 M93.81 116.53 C61.25 114.99, 29.43 117.53, 1.7 118.89 M91.11 116.45 C71.04 117.96, 48.51 116.44, -0.22 117.17 M0.03 115.8 C0.8 82.24, 1.11 49.66, 1.54 0.96 M0.15 117.07 C1.55 75.31, 0.62 31.12, -0.92 0.03" stroke="#c92a2a" stroke-width="1" fill="none">
            </path>
        </g>
        <g transform="translate(290.5 387.5) rotate(0 7 12.5)">
            <text x="7" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
                9
            </text>
        </g>
        <g stroke-linecap="round" transform="translate(360.5 402.5) rotate(0 46 58.5)">
            <path d="M1.56 1.28 C38.23 0.67, 70.83 -1.05, 92.53 -0.63 M0.32 -0.42 C30.82 -1.18, 60.78 -1.15, 91.19 -0.91 M91.15 1.4 C91.23 37.87, 94.61 79.74, 92.61 117.63 M92.08 -0.91 C92.53 38.48, 92.65 77.51, 92.42 116.23 M92.75 115.07 C65.61 117.4, 40.07 118.67, -1.34 117.65 M92.48 117.93 C63.46 115.9, 35.94 116.67, -0.06 116.63 M0.37 116.63 C0.65 87.65, 1.53 56.37, 1.29 -1.53 M0.66 117.94 C-0.45 72.99, -1.1 30.27, 0.48 0.92" stroke="#c92a2a" stroke-width="1" fill="none">
            </path>
        </g>
        <g transform="translate(396 448.5) rotate(0 10.5 12.5)">
            <text x="10.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
                10
            </text>
        </g>
        <g stroke-linecap="round" transform="translate(357.5 269.5) rotate(0 46 58.5)">
            <path d="M1.93 1.29 C32.09 -1.01, 68.27 -1.22, 92.67 -0.55 M0.16 -0.43 C34.6 -0.01, 69.47 -0.52, 92.37 0.8 M90.3 -1.52 C93.18 27.52, 92.11 53.73, 92.64 117.25 M92.38 -0.35 C92.6 29.19, 92.52 57.9, 91.91 117.91 M92.42 117.61 C68.27 118, 39.8 116.76, 0.07 115.22 M91.37 116.41 C69.19 118.03, 46.77 117.48, -0.37 117.01 M0.67 118.44 C1.33 89.86, 1.07 59.27, 1.42 0.3 M-0.27 116.37 C-1.69 81.11, -0.29 46.1, 0.96 0.17" stroke="#c92a2a" stroke-width="1" fill="none">
            </path>
        </g>
        <g transform="translate(397 315.5) rotate(0 6.5 12.5)">
            <text x="6.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
                7
            </text>
        </g>
        <g stroke-linecap="round" transform="translate(253.5 481.5) rotate(0 46 58.5)">
            <path d="M-1.78 -0.42 C34.03 -1.23, 67.67 -1.15, 93.64 0.64 M-0.54 -0.39 C22.93 -0.51, 47.85 1.19, 91.27 -0.42 M93.67 0.97 C91.61 43.94, 91.64 86.86, 91.02 117.16 M92.5 -0.15 C92.87 23.7, 92.36 49.86, 91.76 117.37 M93.7 118.89 C71.96 117.94, 54.67 115.5, -1.09 117.95 M91.78 117.17 C55.77 116.08, 19.3 116.47, -0.6 117.18 M1.54 117.96 C0.89 82.51, 1.02 51.38, 0.14 1.32 M-0.92 117.03 C0.8 71.86, 1.28 25.05, 0.07 0.74" stroke="#c92a2a" stroke-width="1" fill="none">
            </path>
        </g>
        <g transform="translate(288.5 527.5) rotate(0 11 12.5)">
            <text x="11" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
                12
            </text>
        </g>
        <g stroke-linecap="round" transform="translate(148.5 424.5) rotate(0 46 58.5)">
            <path d="M0.53 -0.63 C34.21 -0.36, 68.73 0.84, 91.16 0.32 M-0.81 -0.91 C24.04 1.16, 46.63 -0.06, 92.7 -0.85 M92.61 0.63 C93.62 26.46, 91.99 52.58, 90.18 117.77 M92.42 -0.77 C92.5 31.87, 92.35 62.3, 91.03 117.21 M90.66 117.65 C61.65 116.09, 30.07 118.82, 1.86 115.74 M91.94 116.63 C69.5 117.17, 47.14 117.34, -0.18 117.33 M1.29 115.47 C0.51 73.76, -0.76 31.24, 1.87 -0.55 M0.48 117.92 C2.04 89.45, 1.14 62.3, -0.87 -0.81" stroke="#c92a2a" stroke-width="1" fill="none">
            </path>
        </g>
        <g transform="translate(188 470.5) rotate(0 6.5 12.5)">
            <text x="6.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#c92a2a" text-anchor="middle" style="white-space: pre;" direction="ltr">
                11
            </text>
        </g>
        <g stroke-linecap="round" transform="translate(150.5 558.5) rotate(0 46 58.5)">
            <path d="M0.67 -0.55 C27.29 0.93, 50.46 0.61, 91.15 -1.09 M92.73 1.59 C89.59 29.67, 92.45 59.33, 90.48 118.67 M92.64 117.25 C58.94 117.45, 26.03 118.06, -0.71 118 M-0.17 118.81 C-0.97 84.42, -2.43 50.77, 0.61 1.7" stroke="#364fc7" stroke-width="1.5" fill="none" stroke-dasharray="8 9">
            </path>
        </g>
        <g stroke-linecap="round" transform="translate(362.5 544.5) rotate(0 46 58.5)">
            <path d="M1.64 0.64 C23.85 0.58, 48.53 -0.83, 91.22 -1.62 M90.54 -0.85 C93.83 22.81, 90.91 50.69, 92.97 117.61 M91.02 117.16 C59.69 117.88, 30.3 118.12, -0.3 117.85 M-0.47 117.75 C-1.83 91.39, 0.71 66.63, 1.89 -1.34" stroke="#364fc7" stroke-width="1.5" fill="none" stroke-dasharray="8 9">
            </path>
        </g>
        <g transform="translate(398 590.5) rotate(0 10.5 12.5)">
            <text x="10.5" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#364fc7" text-anchor="middle" style="white-space: pre;" direction="ltr">
                13
            </text>
        </g>
        <g transform="translate(184.5 603) rotate(0 10 12.5)">
            <text x="0" y="18" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#1864ab" text-anchor="start" style="white-space: pre;" direction="ltr">
                14
            </text>
        </g>
        <g stroke-linecap="round">
            <g transform="translate(487.1804903262407 12.750000000000014) rotate(0 3.6758362127011424 72.03529622842932)">
                <path d="M1.35 0.68 C3.65 11.83, 13.85 44.93, 12.72 68.64 C11.58 92.36, -3.16 130.51, -5.45 142.96 M-1.36 -1.42 C0.73 10.1, 10.6 48.01, 10.89 72.49 C11.18 96.98, 3.48 133.32, 0.38 145.49" stroke="#e67700" stroke-width="1" fill="none">
                </path>
            </g>
        </g>
        <g stroke-linecap="round">
            <g transform="translate(117.53441886727751 157.75) rotate(0 -10.223491209581084 166.2962683300674)">
                <path d="M0.05 2.79 C-3.09 27.9, -20.26 97.29, -20.73 151.57 C-21.2 205.85, -5.76 298.74, -2.79 328.47 M-3.37 1.84 C-6.76 26.14, -24.26 93.14, -23.23 147.96 C-22.19 202.78, -0.45 299.99, 2.82 330.75" stroke="#2b8a3e" stroke-width="1" fill="none">
                </path>
            </g>
        </g>
        <g transform="translate(511 10.75) rotate(0 11 70)">
            <text x="0" y="21" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#e67700" text-anchor="start" style="white-space: pre;" direction="ltr">
                已
            </text>
            <text x="0" y="49" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#e67700" text-anchor="start" style="white-space: pre;" direction="ltr">
                滚
            </text>
            <text x="0" y="77" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#e67700" text-anchor="start" style="white-space: pre;" direction="ltr">
                动
            </text>
            <text x="0" y="105" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#e67700" text-anchor="start" style="white-space: pre;" direction="ltr">
                高
            </text>
            <text x="0" y="133" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#e67700" text-anchor="start" style="white-space: pre;" direction="ltr">
                度
            </text>
        </g>
        <g transform="translate(68 242.75) rotate(0 10 65)">
            <text x="0" y="19" font-family="Virgil, Segoe UI Emoji" font-size="17.647058823529395px" fill="#2b8a3e" text-anchor="start" style="white-space: pre;" direction="ltr">
                可
            </text>
            <text x="0" y="45" font-family="Virgil, Segoe UI Emoji" font-size="17.647058823529395px" fill="#2b8a3e" text-anchor="start" style="white-space: pre;" direction="ltr">
                视
            </text>
            <text x="0" y="71" font-family="Virgil, Segoe UI Emoji" font-size="17.647058823529395px" fill="#2b8a3e" text-anchor="start" style="white-space: pre;" direction="ltr">
                区
            </text>
            <text x="0" y="97" font-family="Virgil, Segoe UI Emoji" font-size="17.647058823529395px" fill="#2b8a3e" text-anchor="start" style="white-space: pre;" direction="ltr">
                高
            </text>
            <text x="0" y="123" font-family="Virgil, Segoe UI Emoji" font-size="17.647058823529395px" fill="#2b8a3e" text-anchor="start" style="white-space: pre;" direction="ltr">
                度
            </text>
        </g>
        <g stroke-linecap="round">
            <g transform="translate(126 10.75) rotate(0 -41.557524843499436 334.64067246239637)">
                <path d="M-2.22 2.78 C-15.51 51.66, -82.99 184.74, -82.27 295.52 C-81.55 406.3, -11.85 606.05, 2.08 667.45 M1.78 1.83 C-11.78 49.64, -85.13 180.83, -85.2 291.06 C-85.26 401.3, -13.23 600.77, 1.4 663.26" stroke="#5f3dc4" stroke-width="1" fill="none">
                </path>
            </g>
        </g>
        <g transform="translate(10 218.75) rotate(0 11 84)">
            <text x="0" y="21" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#5f3dc4" text-anchor="start" style="white-space: pre;" direction="ltr">
                瀑
            </text>
            <text x="0" y="49" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#5f3dc4" text-anchor="start" style="white-space: pre;" direction="ltr">
                布
            </text>
            <text x="0" y="77" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#5f3dc4" text-anchor="start" style="white-space: pre;" direction="ltr">
                流
            </text>
            <text x="0" y="105" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#5f3dc4" text-anchor="start" style="white-space: pre;" direction="ltr">
                总
            </text>
            <text x="0" y="133" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#5f3dc4" text-anchor="start" style="white-space: pre;" direction="ltr">
                高
            </text>
            <text x="0" y="161" font-family="Virgil, Segoe UI Emoji" font-size="20px" fill="#5f3dc4" text-anchor="start" style="white-space: pre;" direction="ltr">
                度
            </text>
        </g>
    </svg>
</p>

<p>因为上面瀑布流的实现采用的是 position 定位的，所以我们完全能知道所有元素距离顶部的距离，很容易计算出与可视区域交叉位置。</p>
<p><strong>元素偏移位置 &lt; 滚动高度+可视区域高度 &amp;&amp; 元素偏移位置 + 元素高度 &gt; 滚动高度</strong></p>
<p>如果只渲染可视区域范围，滚动时候会存在白屏再出现，可视适当的扩大渲染区域，例如把上一屏和下一屏都算进来，进行预先渲染。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> top = scrollTop - clientHeight</span><br><span class="line"><span class="keyword">const</span> bottom = scrollTop + clientHeight * <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> visibleList = data.<span class="title function_">filter</span>(</span><br><span class="line">  <span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">_top</span> + item.<span class="property">height</span> &gt; top &amp;&amp; item.<span class="property">_top</span> &lt; bottom</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>然后通过监听滚动事件，根据滚动位置去处理筛选数。这里会存在一个隐藏性能问题，当滚动加载数据比较多的时候，滚动事件触发也是比较快的，每一次都进行一次遍历，也是比较消耗性能的。可以适当控制一下事件触发频率，当然这也只是治标不治本，归根倒是查询显示元素方法问题。</p>
<p><strong>标记下标</strong><br>应为列表数据的 _top 值是从小到大正序的，所以我们可以标记在可视区元素的下标，当发生滚动的时候，我们直接从标记下标开始查找，根据滚动分几种情况来判断。<br>1&gt; 如果滚动后，标记下标元素还在可视范围内，可以直接从标记下标二分查找，往上往下找直到不符合条件就停止。<br>2&gt; 如果滚动后，标记下标元素不在可视范围内，根据滚动方向往上或者往下去查找。这个时候存在两种情况，一种是滚动幅度比较小，直接根据当前下标往上或者往下找。当用户拖动滚动条滚动幅度特别大的时候，可以将下标往上或者往下偏移，偏移量根据 <strong>滚动高度/预估平均高度*列数</strong> 去估算一个，然后在根据这个预估下标进行查找。找到后然后缓存一个新的下标。</p>
<h3 id="抖动问题"><a href="#抖动问题" class="headerlink" title="抖动问题"></a>抖动问题</h3><p>我们 absolute 定位会撑开容器高度，但是滚动时候还是会存在抖动问题，我们可以自定义一个元素高度去撑开，这个元素高度也就是我们之前计算的每一列累计高度 sumHeight 中最大的那个了。</p>
<h3 id="过渡动画问题"><a href="#过渡动画问题" class="headerlink" title="过渡动画问题"></a>过渡动画问题</h3><p>当列宽发生变化时，元素位置发生了变化，在可视区域的元素也发生了变化，有些元素可能之前并没有渲染，所以使用上面 CSS 会存在新出现元素不会产生过渡动画。好在我们能够很清楚的知道元素原位置信息和新的位置信息，我们可以利用 <strong>FLIP</strong> 来处理这动画，很容易控制元素过渡变化，如果有些元素之前不存在，就没有原位置信息，我们可以在可视范围内给他随机生成一个位置进行过渡，保证每一个元素都有个过渡效果避免僵硬。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面情况仅仅是针对动态列数量，又能计算出高度情况下优化，可能业务中也是可能存在每项高度是动态的，这个时候可以采用预估元素高度在渲染后缓存大小位置等信息，或者离屏渲染等方案解决做出进一步的优化处理。</p>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>解读 webpack 打包后js</title>
    <url>/webpack/</url>
    <content><![CDATA[<p>首先新建 index.js,a.js,b.js 三个文件,index.js 配置为入口,index.js 分别加载a.js,b.js文件, b.js加载a.js文件,js中代码如下</p>
<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./a.js&#x27;</span>)()</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./b.js&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = test</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//b.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./a.js&#x27;</span>)()</span><br></pre></td></tr></table></figure>


<p>对文件进行打包,打包结果如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/******/</span> (<span class="keyword">function</span>(<span class="params">modules</span>) &#123; </span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> installedModules = &#123;&#125;; <span class="comment">//对模块进行缓存</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">function</span> <span class="title function_">__webpack_require__</span>(<span class="params">moduleId</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">if</span>(installedModules[moduleId]) &#123;<span class="comment">//有缓存 直接返回 exports</span></span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">return</span> installedModules[moduleId].<span class="property">exports</span>;</span><br><span class="line"><span class="comment">/******/</span> 		&#125;</span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> <span class="variable language_">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="attr">i</span>: moduleId,</span><br><span class="line"><span class="comment">/******/</span> 			<span class="attr">l</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">/******/</span> 			<span class="attr">exports</span>: &#123;&#125;</span><br><span class="line"><span class="comment">/******/</span> 		&#125;;</span><br><span class="line"><span class="comment">/******/</span>                <span class="comment">//加载模块</span></span><br><span class="line"><span class="comment">/******/</span> 		modules[moduleId].<span class="title function_">call</span>(<span class="variable language_">module</span>.<span class="property">exports</span>, <span class="variable language_">module</span>, <span class="variable language_">module</span>.<span class="property">exports</span>, __webpack_require__);</span><br><span class="line"><span class="comment">/******/</span> 		<span class="variable language_">module</span>.<span class="property">l</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>; <span class="comment">//返回 exports</span></span><br><span class="line"><span class="comment">/******/</span> 	&#125;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> 	__webpack_require__.<span class="property">m</span> = modules;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> 	__webpack_require__.<span class="property">c</span> = installedModules;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> 	__webpack_require__.<span class="property">d</span> = <span class="keyword">function</span>(<span class="params"><span class="built_in">exports</span>, name, getter</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">if</span>(!__webpack_require__.<span class="title function_">o</span>(<span class="built_in">exports</span>, name)) &#123;</span><br><span class="line"><span class="comment">/******/</span> 			<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, name, &#123;</span><br><span class="line"><span class="comment">/******/</span> 				<span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">/******/</span> 				<span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">/******/</span> 				<span class="attr">get</span>: getter</span><br><span class="line"><span class="comment">/******/</span> 			&#125;);</span><br><span class="line"><span class="comment">/******/</span> 		&#125;</span><br><span class="line"><span class="comment">/******/</span> 	&#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> 	__webpack_require__.<span class="property">n</span> = <span class="keyword">function</span>(<span class="params"><span class="variable language_">module</span></span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> getter = <span class="variable language_">module</span> &amp;&amp; <span class="variable language_">module</span>.<span class="property">__esModule</span> ?</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">function</span> <span class="title function_">getDefault</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="variable language_">module</span>[<span class="string">&#x27;default&#x27;</span>]; &#125; :</span><br><span class="line"><span class="comment">/******/</span> 			<span class="keyword">function</span> <span class="title function_">getModuleExports</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="variable language_">module</span>; &#125;;</span><br><span class="line"><span class="comment">/******/</span> 		__webpack_require__.<span class="title function_">d</span>(getter, <span class="string">&#x27;a&#x27;</span>, getter);</span><br><span class="line"><span class="comment">/******/</span> 		<span class="keyword">return</span> getter;</span><br><span class="line"><span class="comment">/******/</span> 	&#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> 	__webpack_require__.<span class="property">o</span> = <span class="keyword">function</span>(<span class="params">object, property</span>) &#123; <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(object, property); &#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> 	__webpack_require__.<span class="property">p</span> = <span class="string">&quot;/&quot;</span>;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">return</span> <span class="title function_">__webpack_require__</span>(__webpack_require__.<span class="property">s</span> = <span class="number">1</span>);<span class="comment">//加载入口 并返回exports</span></span><br><span class="line"><span class="comment">/******/</span> &#125;)</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line">([</span><br><span class="line"><span class="keyword">function</span>(<span class="params"><span class="variable language_">module</span>, <span class="built_in">exports</span>, __webpack_require__</span>)&#123;</span><br><span class="line">    <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">module</span>.<span class="property">exports</span> = test</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">function</span>(<span class="params"><span class="variable language_">module</span>, <span class="built_in">exports</span>, __webpack_require__</span>)&#123;</span><br><span class="line">    <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">        <span class="title function_">__webpack_require__</span>(<span class="number">0</span>)();</span><br><span class="line">        <span class="title function_">__webpack_require__</span>(<span class="number">2</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">function</span>(<span class="params"><span class="variable language_">module</span>, <span class="built_in">exports</span>, __webpack_require__</span>)&#123;</span><br><span class="line">    <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">        <span class="title function_">__webpack_require__</span>(<span class="number">0</span>)();</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看到 webpack 打包后js 是一个自执行匿名函数,而我们的所有模块被打包成了一个数组传入匿名函数中(modules),其中每个元素代表一个模块.然后通过  <strong>webpack_require</strong>(<strong>webpack_require</strong>.s = 1) 加载入口模块.调用 <strong>webpack_require</strong> 方法会接收一个模块ID(对应数组下标),然后检查 installedModules 变量是否已存在对应模块,如果已存在会直接返回当前模块module.exports,否则会先去加载模块,再返回module.exports </p>
</blockquote>
<p>执行结果 1323</p>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Components</title>
    <url>/web_components/</url>
    <content><![CDATA[<p>组件是前端的发展方向，现在流行的 React 和 Vue 都是组件框架。如今 Web Components 被越来越多的浏览器所支持，Web Components 或许是未来的方向。</p>
<span id="more"></span>
<p>Web Components 的组成主要是由这三种组成，它们可以封装自定义功能的元素，可以在你喜欢的任何地方重用，不必担心代码冲突。</p>
<ul>
<li>Custom elements（自定义元素）：允许自定义一个标签，以及一些操作，然后可以像普通标签一样使用它</li>
<li>Shadow DOM（影子DOM）：可以对脚本和样式进行隔离，不用担心外部对其由影响</li>
<li>HTML templates（HTML模板）：&lt;template&gt; 和 &lt;slot&gt; 元素使您可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。</li>
</ul>
<h2 id="自定义元素"><a href="#自定义元素" class="headerlink" title="自定义元素"></a>自定义元素</h2><p>CustomElementRegistry 接口的实例用来注册一个自定义元素，window.customElements 获取去到 CustomElementRegistry 实例。customElements.define() 方法用来注册一个 custom element，该方法接受以下参数：</p>
<ul>
<li>表示所创建的元素名称的符合 DOMString 标准的字符串。注意，custom element 的名称不能是单个单词，且其中必须要有短横线。</li>
<li>用于定义元素行为的 类 。</li>
<li>可选参数，一个包含 extends 属性的配置对象，是可选参数。它指定了所创建的元素继承自哪个内置元素，可以继承任何内置元素。</li>
</ul>
<p>像这样定义一个自定义元素&lt;user-p&gt;，并且继承元素&lt;p&gt;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">customElements.<span class="title function_">define</span>(</span><br><span class="line">    <span class="string">&#x27;user-p&#x27;</span>, </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UserP</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLParagraphElement</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 必须首先调用父类构造方法</span></span><br><span class="line">            <span class="variable language_">super</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">extends</span>: <span class="string">&#x27;p&#x27;</span> </span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>自定义元素的使用也分两种情况<br>一种是如果元素不继承其他内建 HTML 元素,只继承 HTMLElement，可以直接像普通标签一样使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user-p</span>&gt;</span><span class="tag">&lt;/<span class="name">user-p</span>&gt;</span></span><br><span class="line">//或者这样</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;user-p&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果是继承了其他元素，比如像上面那个例子 HTMLParagraphElement </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">is</span>=<span class="string">&#x27;user-p&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">//或者这样</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>,&#123;<span class="attr">is</span>:<span class="string">&#x27;user-p&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="生命周期回调函数"><a href="#生命周期回调函数" class="headerlink" title="生命周期回调函数"></a>生命周期回调函数</h3><ul>
<li>connectedCallback：首次被插入文档DOM时，被调用。</li>
<li>disconnectedCallback：从文档DOM中删除时，被调用。</li>
<li>adoptedCallback：被移动到新的文档时，被调用。</li>
<li>attributeChangedCallback:增加、删除、修改自身属性时，被调用。</li>
</ul>
<p>如果需要在元素属性变化后，触发 attributeChangedCallback()回调函数，你必须监听这个属性。这可以通过定义 observedAttributes() get函数来实现，observedAttributes()函数体内包含一个 return 语句，返回一个数组，包含了需要监听的属性名称：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">get</span> <span class="title function_">observedAttributes</span>() &#123;<span class="keyword">return</span> [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;style&#x27;</span>]; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Shadow-DOM"><a href="#Shadow-DOM" class="headerlink" title="Shadow DOM"></a>Shadow DOM</h2><p>Shadow DOM 可以将一个隐藏的、独立的 DOM 附加到一个元素上，可以将标记结构、样式和行为隐藏起来，并与页面上的其他代码相隔离，保证不同的部分不会混在一起，可使代码更加干净、整洁。</p>
<ul>
<li>Shadow host：一个常规 DOM 节点，Shadow DOM 会被附加到这个节点上。</li>
<li>Shadow tree：Shadow DOM 内部的 DOM 树。</li>
<li>Shadow boundary：Shadow DOM 结束的地方，也是常规 DOM 开始的地方。</li>
<li>Shadow root: Shadow tree 的根节点。</li>
</ul>
<p>像&lt;video&gt;就是用 Shadow DOM 封装的</p>
<p><img src="/images/posts/webcomponents/20200510202839.png" alt="" loading="lazy"></p>
<h3 id="自定义Shadow-DOM"><a href="#自定义Shadow-DOM" class="headerlink" title="自定义Shadow DOM"></a>自定义Shadow DOM</h3><p>可以使用 Element.attachShadow() 方法来将一个 shadow root 附加到任何一个元素上,方法接受一个参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">attachShadow 参数</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;open&#x27;</span>|<span class="string">&#x27;closed&#x27;</span>, </span><br><span class="line">    <span class="comment">//open 表示外部可以访问根节点,例如 Element.shadowRoot </span></span><br><span class="line">    <span class="comment">//closed 表示不允许外部访问</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">delegatesFocus</span>:<span class="literal">true</span>|<span class="literal">false</span></span><br><span class="line">    <span class="comment">//焦点委托</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>:red <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.test</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;test&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;demo&#x27;</span>&gt;</span></span><br><span class="line">        你的浏览器不支持 Shadow DOM </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> demo = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;demo&#x27;</span>).<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> style = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;style&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      style.<span class="property">textContent</span> = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      .demo &#123;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          color: #38acfa;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      :host&#123;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          border:5px  dashed #3699ff;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      :host-context(.test)&#123;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          background:#000;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      :host(#demo)&#123;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          height:60px;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          margin: 20px;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &#125;`</span></span></span><br><span class="line"><span class="language-javascript">      demo.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;div class=&quot;demo&quot;&gt;自定义Shadow DOM&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      demo.<span class="title function_">appendChild</span>(style)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>效果如下，可以看到外部样式是不会影响里面元素的，但是如果是样式是继承祖先元素的是会穿透进去的</p>
<p>这三个都是用来选定 宿主元素 的</p>
<ul>
<li>:host 当前 ShadowDOM 宿主元素</li>
<li>:host() 在宿主元素上查找，比如上面的 :host(#demo) 就是当宿主元素 id=’demo’ 时候生效</li>
<li>:host-context() 在当前 ShadowDOM 宿主元素的祖先节点中查找，比如 :host-context(.test) 可以一直往宿主元素祖先上找，符合就生效</li>
</ul>
<br>
<style>
    .demo{
        color:red !important;
    }
    .test{
        font-size:20px;
    }
</style>
<div class='test'>
    <div id='demo'>
        你的浏览器不支持 Shadow DOM 
    </div>
</div>  
<script>
      let demo = document.getElementById('demo').attachShadow({ mode: 'open' })
      var style = document.createElement('style');
      style.textContent = `
      .demo {
          color: #38acfa;
      }
      :host{
          border:5px  dashed #3699ff;
      }
      :host-context(.test){
          background:#000;
      }
      :host(#demo){
          height:60px;
          margin: 20px;
      }`
      demo.innerHTML = '<div class="demo">自定义Shadow DOM</div>'
      demo.appendChild(style)
</script>


<h2 id="HTML模板"><a href="#HTML模板" class="headerlink" title="HTML模板"></a>HTML模板</h2><p>template 主要作用就是避免重复去创建那些标签结构。比如当一个组件被重复使用时候，如果不用模板的话，会一遍又一遍的去创建组件类的标签结构，使用 template 这样会避免这样重复的创建标签结构。</p>
<p>template 不会再 DOM 上显示，举例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;my-template&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        HTML 模板</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用 js 去获取它</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> template = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;my-template&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(template.<span class="property">content</span>);</span><br></pre></td></tr></table></figure>

<h2 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-div</span> <span class="attr">image</span>=<span class="string">&#x27;/images/logo/admin_template.png&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span>Web Components<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span></span><br><span class="line">        slot footer</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;my-template&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.card</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">0</span> <span class="number">#00000038</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: disc;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-left</span>: <span class="number">1.5em</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span>+<span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#f1f1f1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">250px</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.header</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#f1f1f1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.footer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#f1f1f1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;card&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    customElements.<span class="title function_">define</span>(<span class="string">&#x27;my-div&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">HTMLElement</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">super</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> template = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;my-template&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> templateContent = template.<span class="property">content</span>.<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> shadowRoot = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                templateContent.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;image&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">                shadowRoot.<span class="title function_">appendChild</span>(templateContent);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<my-div image='/images/logo/web_conponents.png'>
    <div slot='header'>Web Components</div>
    <div slot='footer'>
        slot footer
    </div>
</my-div>

<template id="my-template">
    <style>
        .card{
            padding: 10px 20px;
            box-shadow: 0 0 5px 0 #00000038;
            border-radius: 5px;
            display: inline-block;
        }
        ul {
            list-style: disc;
            padding-left: 1.5em;
        }
        li {
            height: 30px;
        }
        li+li {
            border-top: 1px solid #f1f1f1;
        }
        img{
            width:250px
        }
        .header{
            margin-bottom: 10px;
            border-bottom: 1px solid #f1f1f1;
        }
        .footer{
            margin-top: 10px;
            border-top: 1px solid #f1f1f1;
        }
    </style>
    <div class='card'>
        <div class='header'>
            <slot name='header'></slot>
        </div>
        <img>
        <div class='footer'>
            <slot name='footer'></slot>
        </div>
    </div>
</template>

<script>
    customElements.define('my-div',
        class extends HTMLElement {
            constructor() {
                super();
                let template = document.getElementById('my-template');
                let templateContent = template.content.cloneNode(true);

                const shadowRoot = this.attachShadow({ mode: 'open' })

                templateContent.querySelector('img').setAttribute('src', this.getAttribute('image'));
                shadowRoot.appendChild(templateContent);
            }
        })
</script>
]]></content>
      <categories>
        <category>记录类</category>
      </categories>
      <tags>
        <tag>WebComponents</tag>
      </tags>
  </entry>
</search>
